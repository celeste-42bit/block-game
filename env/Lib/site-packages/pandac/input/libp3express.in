1662054097
3 3
12 libp3express 4 vDgf 12 panda3d.core 
647
658 7 is_null 0 4 1309 22 PointerToVoid::is_null 0 1 19 130
/**
 * Returns true if the PointerTo is a NULL pointer, false otherwise.  (Direct
 * comparison to a NULL pointer also works.)
 */
50
constexpr bool PointerToVoid::is_null(void) const;

659 8 get_hash 0 4 1309 23 PointerToVoid::get_hash 0 1 20 10
/**
 *
 */
55
inline std::size_t PointerToVoid::get_hash(void) const;

660 14 ~PointerToVoid 0 516 1309 29 PointerToVoid::~PointerToVoid 0 0 0
36
PointerToVoid::~PointerToVoid(void);

661 5 clear 0 4 1308 56 PointerToBase< ReferenceCountedVector< double > >::clear 0 1 17 0
75
inline void PointerToBase< ReferenceCountedVector< double > >::clear(void);

662 6 output 0 4 1308 57 PointerToBase< ReferenceCountedVector< double > >::output 0 1 18 0
88
void PointerToBase< ReferenceCountedVector< double > >::output(std::ostream &out) const;

663 19 ~PointerToArrayBase 0 516 1307 49 PointerToArrayBase< double >::~PointerToArrayBase 0 0 0
63
inline PointerToArrayBase< double >::~PointerToArrayBase(void);

664 11 operator == 0 4 1307 41 PointerToArrayBase< double >::operator == 0 1 15 64
// These are implemented in PointerToVoid, but expose them here.
103
inline bool PointerToArrayBase< double >::operator ==(PointerToArrayBase< double > const &other) const;

665 11 operator != 0 4 1307 41 PointerToArrayBase< double >::operator != 0 1 16 0
103
inline bool PointerToArrayBase< double >::operator !=(PointerToArrayBase< double > const &other) const;

666 19 ConstPointerToArray 0 260 1306 50 ConstPointerToArray< double >::ConstPointerToArray 0 2 1 2 0
198
inline ConstPointerToArray< double >::ConstPointerToArray(PointerToArray< double > const &copy);
inline ConstPointerToArray< double >::ConstPointerToArray(ConstPointerToArray< double > const &copy);

667 5 clear 0 4 1306 36 ConstPointerToArray< double >::clear 0 1 3 0
55
inline void ConstPointerToArray< double >::clear(void);

668 4 size 0 4 1306 35 ConstPointerToArray< double >::size 0 1 4 0
78
inline unsigned long long int ConstPointerToArray< double >::size(void) const;

669 11 get_element 0 4 1306 42 ConstPointerToArray< double >::get_element 0 1 5 0
96
inline double const &ConstPointerToArray< double >::get_element(unsigned long long int n) const;

670 11 __getitem__ 0 4 1306 42 ConstPointerToArray< double >::__getitem__ 0 1 6 0
89
double const &ConstPointerToArray< double >::__getitem__(unsigned long long int n) const;

671 8 get_data 0 4 1306 39 ConstPointerToArray< double >::get_data 0 1 7 0
62
PyObject *ConstPointerToArray< double >::get_data(void) const;

672 11 get_subdata 0 4 1306 42 ConstPointerToArray< double >::get_subdata 0 1 8 0
115
PyObject *ConstPointerToArray< double >::get_subdata(unsigned long long int n, unsigned long long int count) const;

673 13 get_ref_count 0 4 1306 44 ConstPointerToArray< double >::get_ref_count 0 1 9 0
68
inline int ConstPointerToArray< double >::get_ref_count(void) const;

674 18 get_node_ref_count 0 4 1306 49 ConstPointerToArray< double >::get_node_ref_count 0 1 10 0
73
inline int ConstPointerToArray< double >::get_node_ref_count(void) const;

675 5 count 0 4 1306 36 ConstPointerToArray< double >::count 0 1 11 0
89
inline unsigned long long int ConstPointerToArray< double >::count(double const &) const;

676 10 __reduce__ 0 4 1306 41 ConstPointerToArray< double >::__reduce__ 0 1 12 0
74
PyObject *ConstPointerToArray< double >::__reduce__(PyObject *self) const;

677 13 __getbuffer__ 0 4 1306 44 ConstPointerToArray< double >::__getbuffer__ 0 1 13 0
99
int ConstPointerToArray< double >::__getbuffer__(PyObject *self, Py_buffer *view, int flags) const;

678 17 __releasebuffer__ 0 4 1306 48 ConstPointerToArray< double >::__releasebuffer__ 0 1 14 0
93
void ConstPointerToArray< double >::__releasebuffer__(PyObject *self, Py_buffer *view) const;

679 20 ~ConstPointerToArray 0 516 1306 51 ConstPointerToArray< double >::~ConstPointerToArray 0 0 0
58
ConstPointerToArray< double >::~ConstPointerToArray(void);

680 5 clear 0 4 1314 55 PointerToBase< ReferenceCountedVector< float > >::clear 0 1 37 0
74
inline void PointerToBase< ReferenceCountedVector< float > >::clear(void);

681 6 output 0 4 1314 56 PointerToBase< ReferenceCountedVector< float > >::output 0 1 38 0
87
void PointerToBase< ReferenceCountedVector< float > >::output(std::ostream &out) const;

682 19 ~PointerToArrayBase 0 516 1313 48 PointerToArrayBase< float >::~PointerToArrayBase 0 0 0
62
inline PointerToArrayBase< float >::~PointerToArrayBase(void);

683 11 operator == 0 4 1313 40 PointerToArrayBase< float >::operator == 0 1 35 64
// These are implemented in PointerToVoid, but expose them here.
101
inline bool PointerToArrayBase< float >::operator ==(PointerToArrayBase< float > const &other) const;

684 11 operator != 0 4 1313 40 PointerToArrayBase< float >::operator != 0 1 36 0
101
inline bool PointerToArrayBase< float >::operator !=(PointerToArrayBase< float > const &other) const;

685 19 ConstPointerToArray 0 260 1312 49 ConstPointerToArray< float >::ConstPointerToArray 0 2 21 22 0
194
inline ConstPointerToArray< float >::ConstPointerToArray(PointerToArray< float > const &copy);
inline ConstPointerToArray< float >::ConstPointerToArray(ConstPointerToArray< float > const &copy);

686 5 clear 0 4 1312 35 ConstPointerToArray< float >::clear 0 1 23 0
54
inline void ConstPointerToArray< float >::clear(void);

687 4 size 0 4 1312 34 ConstPointerToArray< float >::size 0 1 24 0
77
inline unsigned long long int ConstPointerToArray< float >::size(void) const;

688 11 get_element 0 4 1312 41 ConstPointerToArray< float >::get_element 0 1 25 0
94
inline float const &ConstPointerToArray< float >::get_element(unsigned long long int n) const;

689 11 __getitem__ 0 4 1312 41 ConstPointerToArray< float >::__getitem__ 0 1 26 0
87
float const &ConstPointerToArray< float >::__getitem__(unsigned long long int n) const;

690 8 get_data 0 4 1312 38 ConstPointerToArray< float >::get_data 0 1 27 0
61
PyObject *ConstPointerToArray< float >::get_data(void) const;

691 11 get_subdata 0 4 1312 41 ConstPointerToArray< float >::get_subdata 0 1 28 0
114
PyObject *ConstPointerToArray< float >::get_subdata(unsigned long long int n, unsigned long long int count) const;

692 13 get_ref_count 0 4 1312 43 ConstPointerToArray< float >::get_ref_count 0 1 29 0
67
inline int ConstPointerToArray< float >::get_ref_count(void) const;

693 18 get_node_ref_count 0 4 1312 48 ConstPointerToArray< float >::get_node_ref_count 0 1 30 0
72
inline int ConstPointerToArray< float >::get_node_ref_count(void) const;

694 5 count 0 4 1312 35 ConstPointerToArray< float >::count 0 1 31 0
87
inline unsigned long long int ConstPointerToArray< float >::count(float const &) const;

695 10 __reduce__ 0 4 1312 40 ConstPointerToArray< float >::__reduce__ 0 1 32 0
73
PyObject *ConstPointerToArray< float >::__reduce__(PyObject *self) const;

696 13 __getbuffer__ 0 4 1312 43 ConstPointerToArray< float >::__getbuffer__ 0 1 33 0
98
int ConstPointerToArray< float >::__getbuffer__(PyObject *self, Py_buffer *view, int flags) const;

697 17 __releasebuffer__ 0 4 1312 47 ConstPointerToArray< float >::__releasebuffer__ 0 1 34 0
92
void ConstPointerToArray< float >::__releasebuffer__(PyObject *self, Py_buffer *view) const;

698 20 ~ConstPointerToArray 0 516 1312 50 ConstPointerToArray< float >::~ConstPointerToArray 0 0 0
57
ConstPointerToArray< float >::~ConstPointerToArray(void);

699 5 clear 0 4 1318 53 PointerToBase< ReferenceCountedVector< int > >::clear 0 1 55 0
72
inline void PointerToBase< ReferenceCountedVector< int > >::clear(void);

700 6 output 0 4 1318 54 PointerToBase< ReferenceCountedVector< int > >::output 0 1 56 0
85
void PointerToBase< ReferenceCountedVector< int > >::output(std::ostream &out) const;

701 19 ~PointerToArrayBase 0 516 1317 46 PointerToArrayBase< int >::~PointerToArrayBase 0 0 0
60
inline PointerToArrayBase< int >::~PointerToArrayBase(void);

702 11 operator == 0 4 1317 38 PointerToArrayBase< int >::operator == 0 1 53 64
// These are implemented in PointerToVoid, but expose them here.
97
inline bool PointerToArrayBase< int >::operator ==(PointerToArrayBase< int > const &other) const;

703 11 operator != 0 4 1317 38 PointerToArrayBase< int >::operator != 0 1 54 0
97
inline bool PointerToArrayBase< int >::operator !=(PointerToArrayBase< int > const &other) const;

704 19 ConstPointerToArray 0 260 1316 47 ConstPointerToArray< int >::ConstPointerToArray 0 2 39 40 0
186
inline ConstPointerToArray< int >::ConstPointerToArray(PointerToArray< int > const &copy);
inline ConstPointerToArray< int >::ConstPointerToArray(ConstPointerToArray< int > const &copy);

705 5 clear 0 4 1316 33 ConstPointerToArray< int >::clear 0 1 41 0
52
inline void ConstPointerToArray< int >::clear(void);

706 4 size 0 4 1316 32 ConstPointerToArray< int >::size 0 1 42 0
75
inline unsigned long long int ConstPointerToArray< int >::size(void) const;

707 11 get_element 0 4 1316 39 ConstPointerToArray< int >::get_element 0 1 43 0
90
inline int const &ConstPointerToArray< int >::get_element(unsigned long long int n) const;

708 11 __getitem__ 0 4 1316 39 ConstPointerToArray< int >::__getitem__ 0 1 44 0
83
int const &ConstPointerToArray< int >::__getitem__(unsigned long long int n) const;

709 8 get_data 0 4 1316 36 ConstPointerToArray< int >::get_data 0 1 45 0
59
PyObject *ConstPointerToArray< int >::get_data(void) const;

710 11 get_subdata 0 4 1316 39 ConstPointerToArray< int >::get_subdata 0 1 46 0
112
PyObject *ConstPointerToArray< int >::get_subdata(unsigned long long int n, unsigned long long int count) const;

711 13 get_ref_count 0 4 1316 41 ConstPointerToArray< int >::get_ref_count 0 1 47 0
65
inline int ConstPointerToArray< int >::get_ref_count(void) const;

712 18 get_node_ref_count 0 4 1316 46 ConstPointerToArray< int >::get_node_ref_count 0 1 48 0
70
inline int ConstPointerToArray< int >::get_node_ref_count(void) const;

713 5 count 0 4 1316 33 ConstPointerToArray< int >::count 0 1 49 0
83
inline unsigned long long int ConstPointerToArray< int >::count(int const &) const;

714 10 __reduce__ 0 4 1316 38 ConstPointerToArray< int >::__reduce__ 0 1 50 0
71
PyObject *ConstPointerToArray< int >::__reduce__(PyObject *self) const;

715 13 __getbuffer__ 0 4 1316 41 ConstPointerToArray< int >::__getbuffer__ 0 1 51 0
96
int ConstPointerToArray< int >::__getbuffer__(PyObject *self, Py_buffer *view, int flags) const;

716 17 __releasebuffer__ 0 4 1316 45 ConstPointerToArray< int >::__releasebuffer__ 0 1 52 0
90
void ConstPointerToArray< int >::__releasebuffer__(PyObject *self, Py_buffer *view) const;

717 20 ~ConstPointerToArray 0 516 1316 48 ConstPointerToArray< int >::~ConstPointerToArray 0 0 0
55
ConstPointerToArray< int >::~ConstPointerToArray(void);

718 5 clear 0 4 1322 63 PointerToBase< ReferenceCountedVector< unsigned char > >::clear 0 1 73 0
82
inline void PointerToBase< ReferenceCountedVector< unsigned char > >::clear(void);

719 6 output 0 4 1322 64 PointerToBase< ReferenceCountedVector< unsigned char > >::output 0 1 74 0
95
void PointerToBase< ReferenceCountedVector< unsigned char > >::output(std::ostream &out) const;

720 19 ~PointerToArrayBase 0 516 1321 56 PointerToArrayBase< unsigned char >::~PointerToArrayBase 0 0 0
70
inline PointerToArrayBase< unsigned char >::~PointerToArrayBase(void);

721 11 operator == 0 4 1321 48 PointerToArrayBase< unsigned char >::operator == 0 1 71 64
// These are implemented in PointerToVoid, but expose them here.
117
inline bool PointerToArrayBase< unsigned char >::operator ==(PointerToArrayBase< unsigned char > const &other) const;

722 11 operator != 0 4 1321 48 PointerToArrayBase< unsigned char >::operator != 0 1 72 0
117
inline bool PointerToArrayBase< unsigned char >::operator !=(PointerToArrayBase< unsigned char > const &other) const;

723 19 ConstPointerToArray 0 260 1320 57 ConstPointerToArray< unsigned char >::ConstPointerToArray 0 2 57 58 0
226
inline ConstPointerToArray< unsigned char >::ConstPointerToArray(PointerToArray< unsigned char > const &copy);
inline ConstPointerToArray< unsigned char >::ConstPointerToArray(ConstPointerToArray< unsigned char > const &copy);

724 5 clear 0 4 1320 43 ConstPointerToArray< unsigned char >::clear 0 1 59 0
62
inline void ConstPointerToArray< unsigned char >::clear(void);

725 4 size 0 4 1320 42 ConstPointerToArray< unsigned char >::size 0 1 60 0
85
inline unsigned long long int ConstPointerToArray< unsigned char >::size(void) const;

726 11 get_element 0 4 1320 49 ConstPointerToArray< unsigned char >::get_element 0 1 61 0
110
inline unsigned char const &ConstPointerToArray< unsigned char >::get_element(unsigned long long int n) const;

727 11 __getitem__ 0 4 1320 49 ConstPointerToArray< unsigned char >::__getitem__ 0 1 62 0
103
unsigned char const &ConstPointerToArray< unsigned char >::__getitem__(unsigned long long int n) const;

728 8 get_data 0 4 1320 46 ConstPointerToArray< unsigned char >::get_data 0 1 63 0
69
PyObject *ConstPointerToArray< unsigned char >::get_data(void) const;

729 11 get_subdata 0 4 1320 49 ConstPointerToArray< unsigned char >::get_subdata 0 1 64 0
122
PyObject *ConstPointerToArray< unsigned char >::get_subdata(unsigned long long int n, unsigned long long int count) const;

730 13 get_ref_count 0 4 1320 51 ConstPointerToArray< unsigned char >::get_ref_count 0 1 65 0
75
inline int ConstPointerToArray< unsigned char >::get_ref_count(void) const;

731 18 get_node_ref_count 0 4 1320 56 ConstPointerToArray< unsigned char >::get_node_ref_count 0 1 66 0
80
inline int ConstPointerToArray< unsigned char >::get_node_ref_count(void) const;

732 5 count 0 4 1320 43 ConstPointerToArray< unsigned char >::count 0 1 67 0
103
inline unsigned long long int ConstPointerToArray< unsigned char >::count(unsigned char const &) const;

733 10 __reduce__ 0 4 1320 48 ConstPointerToArray< unsigned char >::__reduce__ 0 1 68 0
81
PyObject *ConstPointerToArray< unsigned char >::__reduce__(PyObject *self) const;

734 13 __getbuffer__ 0 4 1320 51 ConstPointerToArray< unsigned char >::__getbuffer__ 0 1 69 0
106
int ConstPointerToArray< unsigned char >::__getbuffer__(PyObject *self, Py_buffer *view, int flags) const;

735 17 __releasebuffer__ 0 4 1320 55 ConstPointerToArray< unsigned char >::__releasebuffer__ 0 1 70 0
100
void ConstPointerToArray< unsigned char >::__releasebuffer__(PyObject *self, Py_buffer *view) const;

736 20 ~ConstPointerToArray 0 516 1320 58 ConstPointerToArray< unsigned char >::~ConstPointerToArray 0 0 0
65
ConstPointerToArray< unsigned char >::~ConstPointerToArray(void);

737 14 PointerToArray 0 260 1324 40 PointerToArray< double >::PointerToArray 0 3 75 76 77 0
279
inline PointerToArray< double >::PointerToArray(TypeHandle type_handle = (::_get_type_handle((double const *)(0))));
inline PointerToArray< double >::PointerToArray(PointerToArray< double > const &copy);
PointerToArray< double >::PointerToArray(PyObject *self, PyObject *source);

738 11 empty_array 0 4 1324 37 PointerToArray< double >::empty_array 0 1 78 0
171
static inline PointerToArray< double > PointerToArray< double >::empty_array(unsigned long long int n, TypeHandle type_handle = (::_get_type_handle((double const *)(0))));

739 5 clear 0 4 1324 31 PointerToArray< double >::clear 0 1 79 0
50
inline void PointerToArray< double >::clear(void);

740 4 size 0 4 1324 30 PointerToArray< double >::size 0 1 80 0
73
inline unsigned long long int PointerToArray< double >::size(void) const;

741 9 push_back 0 4 1324 35 PointerToArray< double >::push_back 0 1 81 0
65
inline void PointerToArray< double >::push_back(double const &x);

742 8 pop_back 0 4 1324 34 PointerToArray< double >::pop_back 0 1 82 0
53
inline void PointerToArray< double >::pop_back(void);

743 11 get_element 0 4 1324 37 PointerToArray< double >::get_element 0 1 83 0
91
inline double const &PointerToArray< double >::get_element(unsigned long long int n) const;

744 11 set_element 0 4 1324 37 PointerToArray< double >::set_element 0 1 84 0
97
inline void PointerToArray< double >::set_element(unsigned long long int n, double const &value);

745 11 __getitem__ 0 4 1324 37 PointerToArray< double >::__getitem__ 0 1 85 0
84
double const &PointerToArray< double >::__getitem__(unsigned long long int n) const;

746 11 __setitem__ 0 4 1324 37 PointerToArray< double >::__setitem__ 0 1 86 0
90
void PointerToArray< double >::__setitem__(unsigned long long int n, double const &value);

747 8 get_data 0 4 1324 34 PointerToArray< double >::get_data 0 1 87 0
57
PyObject *PointerToArray< double >::get_data(void) const;

748 8 set_data 0 4 1324 34 PointerToArray< double >::set_data 0 1 88 0
56
void PointerToArray< double >::set_data(PyObject *data);

749 11 get_subdata 0 4 1324 37 PointerToArray< double >::get_subdata 0 1 89 0
110
PyObject *PointerToArray< double >::get_subdata(unsigned long long int n, unsigned long long int count) const;

750 11 set_subdata 0 4 1324 37 PointerToArray< double >::set_subdata 0 1 90 0
145
inline void PointerToArray< double >::set_subdata(unsigned long long int n, unsigned long long int count, std::basic_string< char > const &data);

751 13 get_ref_count 0 4 1324 39 PointerToArray< double >::get_ref_count 0 1 91 0
63
inline int PointerToArray< double >::get_ref_count(void) const;

752 18 get_node_ref_count 0 4 1324 44 PointerToArray< double >::get_node_ref_count 0 1 92 0
68
inline int PointerToArray< double >::get_node_ref_count(void) const;

753 5 count 0 4 1324 31 PointerToArray< double >::count 0 1 93 0
84
inline unsigned long long int PointerToArray< double >::count(double const &) const;

754 10 __reduce__ 0 4 1324 36 PointerToArray< double >::__reduce__ 0 1 94 0
69
PyObject *PointerToArray< double >::__reduce__(PyObject *self) const;

755 13 __getbuffer__ 0 4 1324 39 PointerToArray< double >::__getbuffer__ 0 1 95 0
88
int PointerToArray< double >::__getbuffer__(PyObject *self, Py_buffer *view, int flags);

756 17 __releasebuffer__ 0 4 1324 43 PointerToArray< double >::__releasebuffer__ 0 1 96 0
88
void PointerToArray< double >::__releasebuffer__(PyObject *self, Py_buffer *view) const;

757 15 ~PointerToArray 0 516 1324 41 PointerToArray< double >::~PointerToArray 0 0 0
48
PointerToArray< double >::~PointerToArray(void);

758 14 PointerToArray 0 260 1326 39 PointerToArray< float >::PointerToArray 0 3 97 98 99 0
274
inline PointerToArray< float >::PointerToArray(TypeHandle type_handle = (::_get_type_handle((float const *)(0))));
inline PointerToArray< float >::PointerToArray(PointerToArray< float > const &copy);
PointerToArray< float >::PointerToArray(PyObject *self, PyObject *source);

759 11 empty_array 0 4 1326 36 PointerToArray< float >::empty_array 0 1 100 0
168
static inline PointerToArray< float > PointerToArray< float >::empty_array(unsigned long long int n, TypeHandle type_handle = (::_get_type_handle((float const *)(0))));

760 5 clear 0 4 1326 30 PointerToArray< float >::clear 0 1 101 0
49
inline void PointerToArray< float >::clear(void);

761 4 size 0 4 1326 29 PointerToArray< float >::size 0 1 102 0
72
inline unsigned long long int PointerToArray< float >::size(void) const;

762 9 push_back 0 4 1326 34 PointerToArray< float >::push_back 0 1 103 0
63
inline void PointerToArray< float >::push_back(float const &x);

763 8 pop_back 0 4 1326 33 PointerToArray< float >::pop_back 0 1 104 0
52
inline void PointerToArray< float >::pop_back(void);

764 11 get_element 0 4 1326 36 PointerToArray< float >::get_element 0 1 105 0
89
inline float const &PointerToArray< float >::get_element(unsigned long long int n) const;

765 11 set_element 0 4 1326 36 PointerToArray< float >::set_element 0 1 106 0
95
inline void PointerToArray< float >::set_element(unsigned long long int n, float const &value);

766 11 __getitem__ 0 4 1326 36 PointerToArray< float >::__getitem__ 0 1 107 0
82
float const &PointerToArray< float >::__getitem__(unsigned long long int n) const;

767 11 __setitem__ 0 4 1326 36 PointerToArray< float >::__setitem__ 0 1 108 0
88
void PointerToArray< float >::__setitem__(unsigned long long int n, float const &value);

768 8 get_data 0 4 1326 33 PointerToArray< float >::get_data 0 1 109 0
56
PyObject *PointerToArray< float >::get_data(void) const;

769 8 set_data 0 4 1326 33 PointerToArray< float >::set_data 0 1 110 0
55
void PointerToArray< float >::set_data(PyObject *data);

770 11 get_subdata 0 4 1326 36 PointerToArray< float >::get_subdata 0 1 111 0
109
PyObject *PointerToArray< float >::get_subdata(unsigned long long int n, unsigned long long int count) const;

771 11 set_subdata 0 4 1326 36 PointerToArray< float >::set_subdata 0 1 112 0
144
inline void PointerToArray< float >::set_subdata(unsigned long long int n, unsigned long long int count, std::basic_string< char > const &data);

772 13 get_ref_count 0 4 1326 38 PointerToArray< float >::get_ref_count 0 1 113 0
62
inline int PointerToArray< float >::get_ref_count(void) const;

773 18 get_node_ref_count 0 4 1326 43 PointerToArray< float >::get_node_ref_count 0 1 114 0
67
inline int PointerToArray< float >::get_node_ref_count(void) const;

774 5 count 0 4 1326 30 PointerToArray< float >::count 0 1 115 0
82
inline unsigned long long int PointerToArray< float >::count(float const &) const;

775 10 __reduce__ 0 4 1326 35 PointerToArray< float >::__reduce__ 0 1 116 0
68
PyObject *PointerToArray< float >::__reduce__(PyObject *self) const;

776 13 __getbuffer__ 0 4 1326 38 PointerToArray< float >::__getbuffer__ 0 1 117 0
87
int PointerToArray< float >::__getbuffer__(PyObject *self, Py_buffer *view, int flags);

777 17 __releasebuffer__ 0 4 1326 42 PointerToArray< float >::__releasebuffer__ 0 1 118 0
87
void PointerToArray< float >::__releasebuffer__(PyObject *self, Py_buffer *view) const;

778 15 ~PointerToArray 0 516 1326 40 PointerToArray< float >::~PointerToArray 0 0 0
47
PointerToArray< float >::~PointerToArray(void);

779 14 PointerToArray 0 260 1328 37 PointerToArray< int >::PointerToArray 0 3 119 120 121 0
264
inline PointerToArray< int >::PointerToArray(TypeHandle type_handle = (::_get_type_handle((int const *)(0))));
inline PointerToArray< int >::PointerToArray(PointerToArray< int > const &copy);
PointerToArray< int >::PointerToArray(PyObject *self, PyObject *source);

780 11 empty_array 0 4 1328 34 PointerToArray< int >::empty_array 0 1 122 0
162
static inline PointerToArray< int > PointerToArray< int >::empty_array(unsigned long long int n, TypeHandle type_handle = (::_get_type_handle((int const *)(0))));

781 5 clear 0 4 1328 28 PointerToArray< int >::clear 0 1 123 0
47
inline void PointerToArray< int >::clear(void);

782 4 size 0 4 1328 27 PointerToArray< int >::size 0 1 124 0
70
inline unsigned long long int PointerToArray< int >::size(void) const;

783 9 push_back 0 4 1328 32 PointerToArray< int >::push_back 0 1 125 0
59
inline void PointerToArray< int >::push_back(int const &x);

784 8 pop_back 0 4 1328 31 PointerToArray< int >::pop_back 0 1 126 0
50
inline void PointerToArray< int >::pop_back(void);

785 11 get_element 0 4 1328 34 PointerToArray< int >::get_element 0 1 127 0
85
inline int const &PointerToArray< int >::get_element(unsigned long long int n) const;

786 11 set_element 0 4 1328 34 PointerToArray< int >::set_element 0 1 128 0
91
inline void PointerToArray< int >::set_element(unsigned long long int n, int const &value);

787 11 __getitem__ 0 4 1328 34 PointerToArray< int >::__getitem__ 0 1 129 0
78
int const &PointerToArray< int >::__getitem__(unsigned long long int n) const;

788 11 __setitem__ 0 4 1328 34 PointerToArray< int >::__setitem__ 0 1 130 0
84
void PointerToArray< int >::__setitem__(unsigned long long int n, int const &value);

789 8 get_data 0 4 1328 31 PointerToArray< int >::get_data 0 1 131 0
54
PyObject *PointerToArray< int >::get_data(void) const;

790 8 set_data 0 4 1328 31 PointerToArray< int >::set_data 0 1 132 0
53
void PointerToArray< int >::set_data(PyObject *data);

791 11 get_subdata 0 4 1328 34 PointerToArray< int >::get_subdata 0 1 133 0
107
PyObject *PointerToArray< int >::get_subdata(unsigned long long int n, unsigned long long int count) const;

792 11 set_subdata 0 4 1328 34 PointerToArray< int >::set_subdata 0 1 134 0
142
inline void PointerToArray< int >::set_subdata(unsigned long long int n, unsigned long long int count, std::basic_string< char > const &data);

793 13 get_ref_count 0 4 1328 36 PointerToArray< int >::get_ref_count 0 1 135 0
60
inline int PointerToArray< int >::get_ref_count(void) const;

794 18 get_node_ref_count 0 4 1328 41 PointerToArray< int >::get_node_ref_count 0 1 136 0
65
inline int PointerToArray< int >::get_node_ref_count(void) const;

795 5 count 0 4 1328 28 PointerToArray< int >::count 0 1 137 0
78
inline unsigned long long int PointerToArray< int >::count(int const &) const;

796 10 __reduce__ 0 4 1328 33 PointerToArray< int >::__reduce__ 0 1 138 0
66
PyObject *PointerToArray< int >::__reduce__(PyObject *self) const;

797 13 __getbuffer__ 0 4 1328 36 PointerToArray< int >::__getbuffer__ 0 1 139 0
85
int PointerToArray< int >::__getbuffer__(PyObject *self, Py_buffer *view, int flags);

798 17 __releasebuffer__ 0 4 1328 40 PointerToArray< int >::__releasebuffer__ 0 1 140 0
85
void PointerToArray< int >::__releasebuffer__(PyObject *self, Py_buffer *view) const;

799 15 ~PointerToArray 0 516 1328 38 PointerToArray< int >::~PointerToArray 0 0 0
45
PointerToArray< int >::~PointerToArray(void);

800 14 PointerToArray 0 260 1330 47 PointerToArray< unsigned char >::PointerToArray 0 3 141 142 143 0
314
inline PointerToArray< unsigned char >::PointerToArray(TypeHandle type_handle = (::_get_type_handle((unsigned char const *)(0))));
inline PointerToArray< unsigned char >::PointerToArray(PointerToArray< unsigned char > const &copy);
PointerToArray< unsigned char >::PointerToArray(PyObject *self, PyObject *source);

801 11 empty_array 0 4 1330 44 PointerToArray< unsigned char >::empty_array 0 1 144 0
192
static inline PointerToArray< unsigned char > PointerToArray< unsigned char >::empty_array(unsigned long long int n, TypeHandle type_handle = (::_get_type_handle((unsigned char const *)(0))));

802 5 clear 0 4 1330 38 PointerToArray< unsigned char >::clear 0 1 145 0
57
inline void PointerToArray< unsigned char >::clear(void);

803 4 size 0 4 1330 37 PointerToArray< unsigned char >::size 0 1 146 0
80
inline unsigned long long int PointerToArray< unsigned char >::size(void) const;

804 9 push_back 0 4 1330 42 PointerToArray< unsigned char >::push_back 0 1 147 0
79
inline void PointerToArray< unsigned char >::push_back(unsigned char const &x);

805 8 pop_back 0 4 1330 41 PointerToArray< unsigned char >::pop_back 0 1 148 0
60
inline void PointerToArray< unsigned char >::pop_back(void);

806 11 get_element 0 4 1330 44 PointerToArray< unsigned char >::get_element 0 1 149 0
105
inline unsigned char const &PointerToArray< unsigned char >::get_element(unsigned long long int n) const;

807 11 set_element 0 4 1330 44 PointerToArray< unsigned char >::set_element 0 1 150 0
111
inline void PointerToArray< unsigned char >::set_element(unsigned long long int n, unsigned char const &value);

808 11 __getitem__ 0 4 1330 44 PointerToArray< unsigned char >::__getitem__ 0 1 151 0
98
unsigned char const &PointerToArray< unsigned char >::__getitem__(unsigned long long int n) const;

809 11 __setitem__ 0 4 1330 44 PointerToArray< unsigned char >::__setitem__ 0 1 152 0
104
void PointerToArray< unsigned char >::__setitem__(unsigned long long int n, unsigned char const &value);

810 8 get_data 0 4 1330 41 PointerToArray< unsigned char >::get_data 0 1 153 0
64
PyObject *PointerToArray< unsigned char >::get_data(void) const;

811 8 set_data 0 4 1330 41 PointerToArray< unsigned char >::set_data 0 1 154 0
63
void PointerToArray< unsigned char >::set_data(PyObject *data);

812 11 get_subdata 0 4 1330 44 PointerToArray< unsigned char >::get_subdata 0 1 155 0
117
PyObject *PointerToArray< unsigned char >::get_subdata(unsigned long long int n, unsigned long long int count) const;

813 11 set_subdata 0 4 1330 44 PointerToArray< unsigned char >::set_subdata 0 1 156 0
152
inline void PointerToArray< unsigned char >::set_subdata(unsigned long long int n, unsigned long long int count, std::basic_string< char > const &data);

814 13 get_ref_count 0 4 1330 46 PointerToArray< unsigned char >::get_ref_count 0 1 157 0
70
inline int PointerToArray< unsigned char >::get_ref_count(void) const;

815 18 get_node_ref_count 0 4 1330 51 PointerToArray< unsigned char >::get_node_ref_count 0 1 158 0
75
inline int PointerToArray< unsigned char >::get_node_ref_count(void) const;

816 5 count 0 4 1330 38 PointerToArray< unsigned char >::count 0 1 159 0
98
inline unsigned long long int PointerToArray< unsigned char >::count(unsigned char const &) const;

817 10 __reduce__ 0 4 1330 43 PointerToArray< unsigned char >::__reduce__ 0 1 160 0
76
PyObject *PointerToArray< unsigned char >::__reduce__(PyObject *self) const;

818 13 __getbuffer__ 0 4 1330 46 PointerToArray< unsigned char >::__getbuffer__ 0 1 161 0
95
int PointerToArray< unsigned char >::__getbuffer__(PyObject *self, Py_buffer *view, int flags);

819 17 __releasebuffer__ 0 4 1330 50 PointerToArray< unsigned char >::__releasebuffer__ 0 1 162 0
95
void PointerToArray< unsigned char >::__releasebuffer__(PyObject *self, Py_buffer *view) const;

820 15 ~PointerToArray 0 516 1330 48 PointerToArray< unsigned char >::~PointerToArray 0 0 0
55
PointerToArray< unsigned char >::~PointerToArray(void);

821 11 is_tracking 0 4 1331 24 MemoryUsage::is_tracking 0 1 164 125
/**
 * Returns true if the MemoryUsage object is currently tracking memory (e.g.
 * track-memory-usage is configured #t).
 */
50
static inline bool MemoryUsage::is_tracking(void);

822 11 is_counting 0 4 1331 24 MemoryUsage::is_counting 0 1 165 168
/**
 * Returns true if the MemoryUsage object is currently at least counting
 * memory (e.g.  this is a Windows debug build), even if it's not fully
 * tracking it.
 */
50
static inline bool MemoryUsage::is_counting(void);

823 20 get_current_cpp_size 0 4 1331 33 MemoryUsage::get_current_cpp_size 0 1 166 136
/**
 * Returns the total number of bytes of allocated memory consumed by C++
 * objects, not including the memory previously frozen.
 */
66
static inline std::size_t MemoryUsage::get_current_cpp_size(void);

824 18 get_total_cpp_size 0 4 1331 31 MemoryUsage::get_total_cpp_size 0 1 167 132
/**
 * Returns the total number of bytes of allocated memory consumed by C++
 * objects, including the memory previously frozen.
 */
64
static inline std::size_t MemoryUsage::get_total_cpp_size(void);

825 26 get_panda_heap_single_size 0 4 1331 39 MemoryUsage::get_panda_heap_single_size 0 1 168 119
/**
 * Returns the total number of bytes allocated from the heap from code within
 * Panda, for individual objects.
 */
72
static inline std::size_t MemoryUsage::get_panda_heap_single_size(void);

826 25 get_panda_heap_array_size 0 4 1331 38 MemoryUsage::get_panda_heap_array_size 0 1 169 107
/**
 * Returns the total number of bytes allocated from the heap from code within
 * Panda, for arrays.
 */
71
static inline std::size_t MemoryUsage::get_panda_heap_array_size(void);

827 23 get_panda_heap_overhead 0 4 1331 36 MemoryUsage::get_panda_heap_overhead 0 1 170 190
/**
 * Returns the extra bytes allocated from the system that are not immediately
 * used for holding allocated objects.  This can only be determined if
 * ALTERNATIVE_MALLOC is enabled.
 */
69
static inline std::size_t MemoryUsage::get_panda_heap_overhead(void);

828 19 get_panda_mmap_size 0 4 1331 32 MemoryUsage::get_panda_mmap_size 0 1 171 110
/**
 * Returns the total number of bytes allocated from the virtual memory pool
 * from code within Panda.
 */
65
static inline std::size_t MemoryUsage::get_panda_mmap_size(void);

829 17 get_external_size 0 4 1331 30 MemoryUsage::get_external_size 0 1 172 496
/**
 * Returns the total number of bytes of allocated memory in the heap that
 * Panda didn't seem to be responsible for.  This includes a few bytes for
 * very low-level objects (like ConfigVariables) that cannot use Panda memory
 * tracking because they are so very low-level.
 *
 * This also includes all of the memory that might have been allocated by a
 * high-level interpreter, like Python.
 *
 * This number is only available if Panda is able to hook into the actual heap
 * callback.
 */
63
static inline std::size_t MemoryUsage::get_external_size(void);

830 14 get_total_size 0 4 1331 27 MemoryUsage::get_total_size 0 1 173 113
/**
 * Returns the total size of allocated memory consumed by the process, as
 * nearly as can be determined.
 */
60
static inline std::size_t MemoryUsage::get_total_size(void);

831 16 get_num_pointers 0 4 1331 29 MemoryUsage::get_num_pointers 0 1 174 59
/**
 * Returns the number of pointers currently active.
 */
54
static inline int MemoryUsage::get_num_pointers(void);

832 12 get_pointers 0 4 1331 25 MemoryUsage::get_pointers 0 1 175 100
/**
 * Fills the indicated MemoryUsagePointers with the set of all pointers
 * currently active.
 */
74
static inline void MemoryUsage::get_pointers(MemoryUsagePointers &result);

833 20 get_pointers_of_type 0 4 1331 33 MemoryUsage::get_pointers_of_type 0 1 176 122
/**
 * Fills the indicated MemoryUsagePointers with the set of all pointers of the
 * indicated type currently active.
 */
99
static inline void MemoryUsage::get_pointers_of_type(MemoryUsagePointers &result, TypeHandle type);

834 19 get_pointers_of_age 0 4 1331 32 MemoryUsage::get_pointers_of_age 0 1 177 159
/**
 * Fills the indicated MemoryUsagePointers with the set of all pointers that
 * were allocated within the range of the indicated number of seconds ago.
 */
105
static inline void MemoryUsage::get_pointers_of_age(MemoryUsagePointers &result, double from, double to);

835 28 get_pointers_with_zero_count 0 4 1331 41 MemoryUsage::get_pointers_with_zero_count 0 1 178 852
/**
 * Fills the indicated MemoryUsagePointers with the set of all currently
 * active pointers (that is, pointers allocated since the last call to
 * freeze(), and not yet freed) that have a zero reference count.
 *
 * Generally, an undeleted pointer with a zero reference count means its
 * reference count has never been incremented beyond zero (since once it has
 * been incremented, the only way it can return to zero would free the
 * pointer).  This may include objects that are allocated statically or on the
 * stack, which are never intended to be deleted.  Or, it might represent a
 * programmer or compiler error.
 *
 * This function has the side-effect of incrementing each of their reference
 * counts by one, thus preventing them from ever being freed--but since they
 * hadn't been freed anyway, probably no additional harm is done.
 */
90
static inline void MemoryUsage::get_pointers_with_zero_count(MemoryUsagePointers &result);

836 6 freeze 0 4 1331 19 MemoryUsage::freeze 0 1 179 285
/**
 * 'Freezes' all pointers currently stored so that they are no longer
 * reported; only newly allocate pointers from this point on will appear in
 * future information requests.  This makes it easier to differentiate between
 * continuous leaks and one-time memory allocations.
 */
45
static inline void MemoryUsage::freeze(void);

837 18 show_current_types 0 4 1331 31 MemoryUsage::show_current_types 0 1 180 70
/**
 * Shows the breakdown of types of all of the active pointers.
 */
57
static inline void MemoryUsage::show_current_types(void);

838 16 show_trend_types 0 4 1331 29 MemoryUsage::show_trend_types 0 1 181 118
/**
 * Shows the breakdown of types of all of the pointers allocated and freed
 * since the last call to freeze().
 */
55
static inline void MemoryUsage::show_trend_types(void);

839 17 show_current_ages 0 4 1331 30 MemoryUsage::show_current_ages 0 1 182 69
/**
 * Shows the breakdown of ages of all of the active pointers.
 */
56
static inline void MemoryUsage::show_current_ages(void);

840 15 show_trend_ages 0 4 1331 28 MemoryUsage::show_trend_ages 0 1 183 117
/**
 * Shows the breakdown of ages of all of the pointers allocated and freed
 * since the last call to freeze().
 */
54
static inline void MemoryUsage::show_trend_ages(void);

841 11 MemoryUsage 0 260 1331 24 MemoryUsage::MemoryUsage 0 1 163 10
/**
 *
 */
63
inline MemoryUsage::MemoryUsage(MemoryUsage const &) = default;

842 12 ~MemoryUsage 0 516 1331 25 MemoryUsage::~MemoryUsage 0 0 0
32
MemoryUsage::~MemoryUsage(void);

843 20 upcast_to_MemoryBase 0 12 1336 36 ReferenceCount::upcast_to_MemoryBase 0 1 190 40
upcast from ReferenceCount to MemoryBase
55
MemoryBase *ReferenceCount::upcast_to_MemoryBase(void);

844 26 downcast_to_ReferenceCount 0 12 1310 38 MemoryBase::downcast_to_ReferenceCount 0 0 42
downcast from MemoryBase to ReferenceCount
61
ReferenceCount *MemoryBase::downcast_to_ReferenceCount(void);

845 15 ~ReferenceCount 0 518 1336 31 ReferenceCount::~ReferenceCount 0 0 10
/**
 *
 */
53
virtual inline ReferenceCount::~ReferenceCount(void);

846 13 get_ref_count 0 4 1336 29 ReferenceCount::get_ref_count 0 1 184 47
/**
 * Returns the current reference count.
 */
53
inline int ReferenceCount::get_ref_count(void) const;

847 3 ref 0 4 1336 19 ReferenceCount::ref 0 1 185 538
/**
 * Explicitly increments the reference count.  User code should avoid using
 * ref() and unref() directly, which can result in missed reference counts.
 * Instead, let a PointerTo object manage the reference counting
 * automatically.
 *
 * This function is const, even though it changes the object, because
 * generally fiddling with an object's reference count isn't considered part
 * of fiddling with the object.  An object might be const in other ways, but
 * we still need to accurately count the number of references to it.
 */
44
inline void ReferenceCount::ref(void) const;

848 5 unref 0 6 1336 21 ReferenceCount::unref 0 1 186 865
/**
 * Explicitly decrements the reference count.  Note that the object will not
 * be implicitly deleted by unref() simply because the reference count drops
 * to zero.  (Having a member function delete itself is problematic.) However,
 * see the helper function unref_delete().
 *
 * User code should avoid using ref() and unref() directly, which can result
 * in missed reference counts.  Instead, let a PointerTo object manage the
 * reference counting automatically.
 *
 * This function is const, even though it changes the object, because
 * generally fiddling with an object's reference count isn't considered part
 * of fiddling with the object.  An object might be const in other ways, but
 * we still need to accurately count the number of references to it.
 *
 * The return value is true if the new reference count is nonzero, false if it
 * is zero.
 */
54
virtual inline bool ReferenceCount::unref(void) const;

849 24 test_ref_count_integrity 0 4 1336 40 ReferenceCount::test_ref_count_integrity 0 1 187 135
/**
 * Does some easy checks to make sure that the reference count isn't
 * completely bogus.  Returns true if ok, false otherwise.
 */
65
inline bool ReferenceCount::test_ref_count_integrity(void) const;

850 22 test_ref_count_nonzero 0 4 1336 38 ReferenceCount::test_ref_count_nonzero 0 1 188 144
/**
 * Does some easy checks to make sure that the reference count isn't zero, or
 * completely bogus.  Returns true if ok, false otherwise.
 */
63
inline bool ReferenceCount::test_ref_count_nonzero(void) const;

851 14 get_class_type 0 4 1336 30 ReferenceCount::get_class_type 0 1 189 0
55
static TypeHandle ReferenceCount::get_class_type(void);

852 10 get_length 0 4 1338 18 Buffer::get_length 0 1 192 10
/**
 *
 */
42
inline int Buffer::get_length(void) const;

853 6 Buffer 0 260 1338 14 Buffer::Buffer 0 1 191 10
/**
 *
 */
48
inline Buffer::Buffer(Buffer const &) = default;

854 15 compress_string 0 1 0 15 compress_string 0 1 640 0
78
std::string compress_string(std::string const &source, int compression_level);

855 17 decompress_string 0 1 0 17 decompress_string 0 1 641 0
57
std::string decompress_string(std::string const &source);

856 13 compress_file 0 1 0 13 compress_file 0 1 642 0
88
bool compress_file(Filename const &source, Filename const &dest, int compression_level);

857 15 decompress_file 0 1 0 15 decompress_file 0 1 643 0
67
bool decompress_file(Filename const &source, Filename const &dest);

858 15 compress_stream 0 1 0 15 compress_stream 0 1 644 0
86
bool compress_stream(std::istream &source, std::ostream &dest, int compression_level);

859 17 decompress_stream 0 1 0 17 decompress_stream 0 1 645 0
65
bool decompress_stream(std::istream &source, std::ostream &dest);

860 11 copy_stream 0 1 0 11 copy_stream 0 1 646 0
59
bool copy_stream(std::istream &source, std::ostream &dest);

861 9 add_level 0 6 1339 36 PStatCollectorForwardBase::add_level 0 1 193 0
68
virtual void PStatCollectorForwardBase::add_level(double level) = 0;

862 18 get_node_ref_count 0 4 1340 38 NodeReferenceCount::get_node_ref_count 0 1 194 47
/**
 * Returns the current reference count.
 */
62
inline int NodeReferenceCount::get_node_ref_count(void) const;

863 8 node_ref 0 4 1340 28 NodeReferenceCount::node_ref 0 1 195 107
/**
 * Explicitly increments the node reference count and the normal reference
 * count simultaneously.
 */
53
inline void NodeReferenceCount::node_ref(void) const;

864 10 node_unref 0 4 1340 30 NodeReferenceCount::node_unref 0 1 196 201
/**
 * Explicitly decrements the node reference count and the normal reference
 * count simultaneously.
 *
 * The return value is true if the new reference count is nonzero, false if it
 * is zero.
 */
55
inline bool NodeReferenceCount::node_unref(void) const;

865 24 test_ref_count_integrity 0 4 1340 44 NodeReferenceCount::test_ref_count_integrity 0 1 197 97
/**
 * Does some easy checks to make sure that the reference count isn't
 * completely bogus.
 */
69
inline bool NodeReferenceCount::test_ref_count_integrity(void) const;

866 15 node_unref_only 0 4 1340 35 NodeReferenceCount::node_unref_only 0 1 198 186
/**
 * Decrements the node reference count without affecting the normal reference
 * count.  Intended to be called by derived classes only, presumably to
 * reimplement node_unref().
 */
60
inline void NodeReferenceCount::node_unref_only(void) const;

867 14 get_class_type 0 4 1340 34 NodeReferenceCount::get_class_type 0 1 199 0
59
static TypeHandle NodeReferenceCount::get_class_type(void);

868 8 Datagram 0 260 1341 18 Datagram::Datagram 0 3 200 201 202 130
/**
 * Constructs a datagram from an existing block of data.
 */

/**
 * Constructs a datagram from an existing block of data.
 */
212
inline Datagram::Datagram(void) = default;
inline Datagram::Datagram(void const *data, std::size_t size);
inline explicit Datagram::Datagram(vector_uchar data);
Datagram::Datagram(Datagram const &copy) = default;

869 10 operator = 0 4 1341 20 Datagram::operator = 0 1 203 0
58
void Datagram::operator =(Datagram const &copy) = default;

870 5 clear 0 6 1341 15 Datagram::clear 0 1 204 90
/**
 * Resets the datagram to empty, in preparation for building up a new
 * datagram.
 */
35
virtual void Datagram::clear(void);

871 8 dump_hex 0 4 1341 18 Datagram::dump_hex 0 1 205 111
/**
 * Writes a representation of the entire datagram contents, as a sequence of
 * hex (and ASCII) values.
 */
74
void Datagram::dump_hex(std::ostream &out, unsigned int indent = 0) const;

872 8 add_bool 0 4 1341 18 Datagram::add_bool 0 1 206 48
/**
 * Adds a boolean value to the datagram.
 */
43
inline void Datagram::add_bool(bool value);

873 8 add_int8 0 4 1341 18 Datagram::add_int8 0 1 207 55
/**
 * Adds a signed 8-bit integer to the datagram.
 */
45
inline void Datagram::add_int8(int8_t value);

874 9 add_uint8 0 4 1341 19 Datagram::add_uint8 0 1 208 58
/**
 * Adds an unsigned 8-bit integer to the datagram.
 */
47
inline void Datagram::add_uint8(uint8_t value);

875 9 add_int16 0 4 1341 19 Datagram::add_int16 0 1 209 106
// The default numeric packing is little-endian.

/**
 * Adds a signed 16-bit integer to the datagram.
 */
47
inline void Datagram::add_int16(int16_t value);

876 9 add_int32 0 4 1341 19 Datagram::add_int32 0 1 210 56
/**
 * Adds a signed 32-bit integer to the datagram.
 */
47
inline void Datagram::add_int32(int32_t value);

877 9 add_int64 0 4 1341 19 Datagram::add_int64 0 1 211 56
/**
 * Adds a signed 64-bit integer to the datagram.
 */
47
inline void Datagram::add_int64(int64_t value);

878 10 add_uint16 0 4 1341 20 Datagram::add_uint16 0 1 212 59
/**
 * Adds an unsigned 16-bit integer to the datagram.
 */
49
inline void Datagram::add_uint16(uint16_t value);

879 10 add_uint32 0 4 1341 20 Datagram::add_uint32 0 1 213 59
/**
 * Adds an unsigned 32-bit integer to the datagram.
 */
49
inline void Datagram::add_uint32(uint32_t value);

880 10 add_uint64 0 4 1341 20 Datagram::add_uint64 0 1 214 59
/**
 * Adds an unsigned 64-bit integer to the datagram.
 */
49
inline void Datagram::add_uint64(uint64_t value);

881 11 add_float32 0 4 1341 21 Datagram::add_float32 0 1 215 197
/**
 * Adds a 32-bit single-precision floating-point number to the datagram.
 * Since this kind of float is not necessarily portable across different
 * architectures, special care is required.
 */
52
inline void Datagram::add_float32(PN_float32 value);

882 11 add_float64 0 4 1341 21 Datagram::add_float64 0 1 216 63
/**
 * Adds a 64-bit floating-point number to the datagram.
 */
52
inline void Datagram::add_float64(PN_float64 value);

883 12 add_stdfloat 0 4 1341 22 Datagram::add_stdfloat 0 1 217 105
/**
 * Adds either a 32-bit or a 64-bit floating-point number, according to
 * set_stdfloat_double().
 */
54
inline void Datagram::add_stdfloat(PN_stdfloat value);

884 12 add_be_int16 0 4 1341 22 Datagram::add_be_int16 0 1 218 136
// These functions pack numbers big-endian, in case that's desired.

/**
 * Adds a signed 16-bit big-endian integer to the datagram.
 */
50
inline void Datagram::add_be_int16(int16_t value);

885 12 add_be_int32 0 4 1341 22 Datagram::add_be_int32 0 1 219 67
/**
 * Adds a signed 32-bit big-endian integer to the datagram.
 */
50
inline void Datagram::add_be_int32(int32_t value);

886 12 add_be_int64 0 4 1341 22 Datagram::add_be_int64 0 1 220 67
/**
 * Adds a signed 64-bit big-endian integer to the datagram.
 */
50
inline void Datagram::add_be_int64(int64_t value);

887 13 add_be_uint16 0 4 1341 23 Datagram::add_be_uint16 0 1 221 70
/**
 * Adds an unsigned 16-bit big-endian integer to the datagram.
 */
52
inline void Datagram::add_be_uint16(uint16_t value);

888 13 add_be_uint32 0 4 1341 23 Datagram::add_be_uint32 0 1 222 70
/**
 * Adds an unsigned 32-bit big-endian integer to the datagram.
 */
52
inline void Datagram::add_be_uint32(uint32_t value);

889 13 add_be_uint64 0 4 1341 23 Datagram::add_be_uint64 0 1 223 70
/**
 * Adds an unsigned 64-bit big-endian integer to the datagram.
 */
52
inline void Datagram::add_be_uint64(uint64_t value);

890 14 add_be_float32 0 4 1341 24 Datagram::add_be_float32 0 1 224 94
/**
 * Adds a 32-bit single-precision big-endian floating-point number to the
 * datagram.
 */
55
inline void Datagram::add_be_float32(PN_float32 value);

891 14 add_be_float64 0 4 1341 24 Datagram::add_be_float64 0 1 225 74
/**
 * Adds a 64-bit big-endian floating-point number to the datagram.
 */
55
inline void Datagram::add_be_float64(PN_float64 value);

892 10 add_string 0 4 1341 20 Datagram::add_string 0 1 226 109
/**
 * Adds a variable-length string to the datagram.  This actually adds a count
 * followed by n bytes.
 */
57
inline void Datagram::add_string(std::string const &str);

893 12 add_string32 0 4 1341 22 Datagram::add_string32 0 1 227 116
/**
 * Adds a variable-length string to the datagram, using a 32-bit length field
 * to allow very long strings.
 */
59
inline void Datagram::add_string32(std::string const &str);

894 12 add_z_string 0 4 1341 22 Datagram::add_z_string 0 1 228 86
/**
 * Adds a variable-length string to the datagram, as a NULL-terminated string.
 */
59
inline void Datagram::add_z_string(std::string const &str);

895 16 add_fixed_string 0 4 1341 26 Datagram::add_fixed_string 0 1 229 238
/**
 * Adds a fixed-length string to the datagram.  If the string given is less
 * than the requested size, this will pad the string out with zeroes; if it is
 * greater than the requested size, this will silently truncate the string.
 */
81
inline void Datagram::add_fixed_string(std::string const &str, std::size_t size);

896 11 add_wstring 0 4 1341 21 Datagram::add_wstring 0 1 230 58
/**
 * Adds a variable-length wstring to the datagram.
 */
52
void Datagram::add_wstring(std::wstring const &str);

897 8 add_blob 0 4 1341 18 Datagram::add_blob 0 1 231 114
/**
 * Adds a variable-length binary blob to the datagram.  This actually adds a
 * count followed by n bytes.
 */
53
inline void Datagram::add_blob(vector_uchar const &);

898 10 add_blob32 0 4 1341 20 Datagram::add_blob32 0 1 232 119
/**
 * Adds a variable-length binary blob to the datagram, using a 32-bit length
 * field to allow very long blobs.
 */
55
inline void Datagram::add_blob32(vector_uchar const &);

899 9 pad_bytes 0 4 1341 19 Datagram::pad_bytes 0 1 233 67
/**
 * Adds the indicated number of zero bytes to the datagram.
 */
43
void Datagram::pad_bytes(std::size_t size);

900 11 append_data 0 4 1341 21 Datagram::append_data 0 1 234 132
/**
 * Appends some more raw data to the end of the datagram.
 */

/**
 * Appends some more raw data to the end of the datagram.
 */
124
void Datagram::append_data(void const *data, std::size_t size);
inline void Datagram::append_data(vector_uchar const &data);

901 11 get_message 0 4 1341 21 Datagram::get_message 0 1 235 51
/**
 * Returns the datagram's data as a string.
 */
51
inline PyObject *Datagram::get_message(void) const;

902 9 __bytes__ 0 4 1341 19 Datagram::__bytes__ 0 1 236 0
49
inline PyObject *Datagram::__bytes__(void) const;

903 10 __reduce__ 0 4 1341 20 Datagram::__reduce__ 0 1 237 0
43
PyObject *Datagram::__reduce__(void) const;

904 10 get_length 0 4 1341 20 Datagram::get_length 0 1 238 55
/**
 * Returns the number of bytes in the datagram.
 */
52
inline std::size_t Datagram::get_length(void) const;

905 9 set_array 0 4 1341 19 Datagram::set_array 0 1 239 199
/**
 * Replaces the data in the Datagram with the data in the indicated PTA_uchar.
 * This is assignment by reference: subsequent changes to the Datagram will
 * also change the source PTA_uchar.
 */
48
inline void Datagram::set_array(PTA_uchar data);

906 10 copy_array 0 4 1341 20 Datagram::copy_array 0 1 240 237
/**
 * Replaces the data in the Datagram with a copy of the data in the indicated
 * CPTA_uchar.  Unlike set_array(), a complete copy is made of the data;
 * subsequent changes to the Datagram will *not* change the source CPTA_uchar.
 */
50
inline void Datagram::copy_array(CPTA_uchar data);

907 9 get_array 0 4 1341 19 Datagram::get_array 0 1 241 70
/**
 * Returns a const pointer to the actual data in the Datagram.
 */
50
inline CPTA_uchar Datagram::get_array(void) const;

908 12 modify_array 0 4 1341 22 Datagram::modify_array 0 1 242 75
/**
 * Returns a modifiable pointer to the actual data in the Datagram.
 */
46
inline PTA_uchar Datagram::modify_array(void);

909 19 set_stdfloat_double 0 4 1341 29 Datagram::set_stdfloat_double 0 1 243 343
/**
 * Changes the stdfloat_double flag, which defines the operation performed by
 * add_stdfloat() and DatagramIterator::get_stdfloat().  When this is true,
 * add_stdfloat() adds a 64-bit floating-point number; when it is false, it
 * adds a 32-bit floating-point number.  The default is based on the
 * STDFLOAT_DOUBLE compilation flag.
 */
64
inline void Datagram::set_stdfloat_double(bool stdfloat_double);

910 19 get_stdfloat_double 0 4 1341 29 Datagram::get_stdfloat_double 0 1 244 72
/**
 * Returns the stdfloat_double flag.  See set_stdfloat_double().
 */
54
inline bool Datagram::get_stdfloat_double(void) const;

911 11 operator == 0 4 1341 21 Datagram::operator == 0 1 245 0
63
inline bool Datagram::operator ==(Datagram const &other) const;

912 11 operator != 0 4 1341 21 Datagram::operator != 0 1 246 0
63
inline bool Datagram::operator !=(Datagram const &other) const;

913 10 operator < 0 4 1341 20 Datagram::operator < 0 1 247 0
62
inline bool Datagram::operator <(Datagram const &other) const;

914 6 output 0 4 1341 16 Datagram::output 0 1 248 67
/**
 * Write a string representation of this instance to <out>.
 */
47
void Datagram::output(std::ostream &out) const;

915 5 write 0 4 1341 15 Datagram::write 0 1 249 67
/**
 * Write a string representation of this instance to <out>.
 */
71
void Datagram::write(std::ostream &out, unsigned int indent = 0) const;

916 14 get_class_type 0 4 1341 24 Datagram::get_class_type 0 1 250 0
49
static TypeHandle Datagram::get_class_type(void);

917 18 ~DatagramGenerator 0 518 1343 37 DatagramGenerator::~DatagramGenerator 0 0 82
/**
 * Does nothing since this is class is just the definition of an interface
 */
52
virtual DatagramGenerator::~DatagramGenerator(void);

918 12 get_datagram 0 6 1343 31 DatagramGenerator::get_datagram 0 1 251 0
65
virtual bool DatagramGenerator::get_datagram(Datagram &data) = 0;

919 13 save_datagram 0 6 1343 32 DatagramGenerator::save_datagram 0 1 252 391
/**
 * Skips over the next datagram without extracting it, but saves the relevant
 * file information in the SubfileInfo object so that its data may be read
 * later.  For non-file-based datagram generators, this may mean creating a
 * temporary file and copying the contents of the datagram to disk.
 *
 * Returns true on success, false on failure or if this method is
 * unimplemented.
 */
65
virtual bool DatagramGenerator::save_datagram(SubfileInfo &info);

920 6 is_eof 0 6 1343 25 DatagramGenerator::is_eof 0 1 253 0
49
virtual bool DatagramGenerator::is_eof(void) = 0;

921 8 is_error 0 6 1343 27 DatagramGenerator::is_error 0 1 254 0
51
virtual bool DatagramGenerator::is_error(void) = 0;

922 12 get_filename 0 6 1343 31 DatagramGenerator::get_filename 0 1 255 159
/**
 * Returns the filename that provides the source for these datagrams, if any,
 * or empty string if the datagrams do not originate from a file on disk.
 */
62
virtual Filename const &DatagramGenerator::get_filename(void);

923 13 get_timestamp 0 6 1343 32 DatagramGenerator::get_timestamp 0 1 256 138
/**
 * Returns the on-disk timestamp of the file that was read, at the time it was
 * opened, if that is available, or 0 if it is not.
 */
60
virtual time_t DatagramGenerator::get_timestamp(void) const;

924 8 get_file 0 6 1343 27 DatagramGenerator::get_file 0 1 257 156
/**
 * Returns the FileReference that provides the source for these datagrams, if
 * any, or NULL if the datagrams do not originate from a file on disk.
 */
63
virtual FileReference const *DatagramGenerator::get_file(void);

925 9 get_vfile 0 6 1343 28 DatagramGenerator::get_vfile 0 1 258 153
/**
 * Returns the VirtualFile that provides the source for these datagrams, if
 * any, or NULL if the datagrams do not originate from a VirtualFile.
 */
56
virtual VirtualFile *DatagramGenerator::get_vfile(void);

926 12 get_file_pos 0 6 1343 31 DatagramGenerator::get_file_pos 0 1 259 327
/**
 * Returns the current file position within the data stream, if any, or 0 if
 * the file position is not meaningful or cannot be determined.
 *
 * For DatagramGenerators that return a meaningful file position, this will be
 * pointing to the first byte following the datagram returned after a call to
 * get_datagram().
 */
61
virtual std::streamoff DatagramGenerator::get_file_pos(void);

927 16 DatagramIterator 0 260 1344 34 DatagramIterator::DatagramIterator 0 3 260 261 262 22
/**
 *
 */

/**
 *
 */
220
inline DatagramIterator::DatagramIterator(void);
inline DatagramIterator::DatagramIterator(Datagram const &datagram, std::size_t offset = 0);
inline DatagramIterator::DatagramIterator(DatagramIterator const &) = default;

928 8 get_bool 0 4 1344 26 DatagramIterator::get_bool 0 1 263 36
/**
 * Extracts a boolean value.
 */
45
inline bool DatagramIterator::get_bool(void);

929 8 get_int8 0 4 1344 26 DatagramIterator::get_int8 0 1 264 43
/**
 * Extracts a signed 8-bit integer.
 */
47
inline int8_t DatagramIterator::get_int8(void);

930 9 get_uint8 0 4 1344 27 DatagramIterator::get_uint8 0 1 265 46
/**
 * Extracts an unsigned 8-bit integer.
 */
49
inline uint8_t DatagramIterator::get_uint8(void);

931 9 get_int16 0 4 1344 27 DatagramIterator::get_int16 0 1 266 44
/**
 * Extracts a signed 16-bit integer.
 */
49
inline int16_t DatagramIterator::get_int16(void);

932 9 get_int32 0 4 1344 27 DatagramIterator::get_int32 0 1 267 44
/**
 * Extracts a signed 32-bit integer.
 */
49
inline int32_t DatagramIterator::get_int32(void);

933 9 get_int64 0 4 1344 27 DatagramIterator::get_int64 0 1 268 44
/**
 * Extracts a signed 64-bit integer.
 */
49
inline int64_t DatagramIterator::get_int64(void);

934 10 get_uint16 0 4 1344 28 DatagramIterator::get_uint16 0 1 269 47
/**
 * Extracts an unsigned 16-bit integer.
 */
51
inline uint16_t DatagramIterator::get_uint16(void);

935 10 get_uint32 0 4 1344 28 DatagramIterator::get_uint32 0 1 270 47
/**
 * Extracts an unsigned 32-bit integer.
 */
51
inline uint32_t DatagramIterator::get_uint32(void);

936 10 get_uint64 0 4 1344 28 DatagramIterator::get_uint64 0 1 271 47
/**
 * Extracts an unsigned 64-bit integer.
 */
51
inline uint64_t DatagramIterator::get_uint64(void);

937 11 get_float32 0 4 1344 29 DatagramIterator::get_float32 0 1 272 68
/**
 * Extracts a 32-bit single-precision floating-point number.
 */
54
inline PN_float32 DatagramIterator::get_float32(void);

938 11 get_float64 0 4 1344 29 DatagramIterator::get_float64 0 1 273 51
/**
 * Extracts a 64-bit floating-point number.
 */
54
inline PN_float64 DatagramIterator::get_float64(void);

939 12 get_stdfloat 0 4 1344 30 DatagramIterator::get_stdfloat 0 1 274 119
/**
 * Extracts either a 32-bit or a 64-bit floating-point number, according to
 * Datagram::set_stdfloat_double().
 */
56
inline PN_stdfloat DatagramIterator::get_stdfloat(void);

940 12 get_be_int16 0 4 1344 30 DatagramIterator::get_be_int16 0 1 275 55
/**
 * Extracts a signed 16-bit big-endian integer.
 */
52
inline int16_t DatagramIterator::get_be_int16(void);

941 12 get_be_int32 0 4 1344 30 DatagramIterator::get_be_int32 0 1 276 55
/**
 * Extracts a signed 32-bit big-endian integer.
 */
52
inline int32_t DatagramIterator::get_be_int32(void);

942 12 get_be_int64 0 4 1344 30 DatagramIterator::get_be_int64 0 1 277 55
/**
 * Extracts a signed 64-bit big-endian integer.
 */
52
inline int64_t DatagramIterator::get_be_int64(void);

943 13 get_be_uint16 0 4 1344 31 DatagramIterator::get_be_uint16 0 1 278 58
/**
 * Extracts an unsigned 16-bit big-endian integer.
 */
54
inline uint16_t DatagramIterator::get_be_uint16(void);

944 13 get_be_uint32 0 4 1344 31 DatagramIterator::get_be_uint32 0 1 279 58
/**
 * Extracts an unsigned 32-bit big-endian integer.
 */
54
inline uint32_t DatagramIterator::get_be_uint32(void);

945 13 get_be_uint64 0 4 1344 31 DatagramIterator::get_be_uint64 0 1 280 58
/**
 * Extracts an unsigned 64-bit big-endian integer.
 */
54
inline uint64_t DatagramIterator::get_be_uint64(void);

946 14 get_be_float32 0 4 1344 32 DatagramIterator::get_be_float32 0 1 281 79
/**
 * Extracts a 32-bit big-endian single-precision floating-point number.
 */
57
inline PN_float32 DatagramIterator::get_be_float32(void);

947 14 get_be_float64 0 4 1344 32 DatagramIterator::get_be_float64 0 1 282 62
/**
 * Extracts a 64-bit big-endian floating-point number.
 */
57
inline PN_float64 DatagramIterator::get_be_float64(void);

948 10 get_string 0 4 1344 28 DatagramIterator::get_string 0 1 283 45
/**
 * Extracts a variable-length string.
 */
47
std::string DatagramIterator::get_string(void);

949 12 get_string32 0 4 1344 30 DatagramIterator::get_string32 0 1 284 72
/**
 * Extracts a variable-length string with a 32-bit length field.
 */
49
std::string DatagramIterator::get_string32(void);

950 12 get_z_string 0 4 1344 30 DatagramIterator::get_z_string 0 1 285 74
/**
 * Extracts a variable-length string, as a NULL-terminated string.
 */
49
std::string DatagramIterator::get_z_string(void);

951 16 get_fixed_string 0 4 1344 34 DatagramIterator::get_fixed_string 0 1 286 128
/**
 * Extracts a fixed-length string.  However, if a zero byte occurs within the
 * string, it marks the end of the string.
 */
65
std::string DatagramIterator::get_fixed_string(std::size_t size);

952 11 get_wstring 0 4 1344 29 DatagramIterator::get_wstring 0 1 287 75
/**
 * Extracts a variable-length wstring (with a 32-bit length field).
 */
49
std::wstring DatagramIterator::get_wstring(void);

953 8 get_blob 0 4 1344 26 DatagramIterator::get_blob 0 1 288 50
/**
 * Extracts a variable-length binary blob.
 */
53
inline vector_uchar DatagramIterator::get_blob(void);

954 10 get_blob32 0 4 1344 28 DatagramIterator::get_blob32 0 1 289 75
/**
 * Extracts a variable-length binary blob with a 32-bit size field.
 */
55
inline vector_uchar DatagramIterator::get_blob32(void);

955 10 skip_bytes 0 4 1344 28 DatagramIterator::skip_bytes 0 1 290 68
/**
 * Skips over the indicated number of bytes in the datagram.
 */
59
inline void DatagramIterator::skip_bytes(std::size_t size);

956 13 extract_bytes 0 4 1344 31 DatagramIterator::extract_bytes 0 1 291 346
/**
 * Extracts the indicated number of bytes in the datagram and returns them as
 * a string.
 */

/**
 * Extracts the indicated number of bytes in the datagram into the given
 * character buffer.  Assumes that the buffer is big enough to hold the
 * requested number of bytes.  Returns the number of bytes that were
 * successfully written.
 */
147
vector_uchar DatagramIterator::extract_bytes(std::size_t size);
std::size_t DatagramIterator::extract_bytes(unsigned char *into, std::size_t size);

957 19 get_remaining_bytes 0 4 1344 37 DatagramIterator::get_remaining_bytes 0 1 292 115
/**
 * Returns the remaining bytes in the datagram as a string, but does not
 * extract them from the iterator.
 */
70
inline vector_uchar DatagramIterator::get_remaining_bytes(void) const;

958 18 get_remaining_size 0 4 1344 36 DatagramIterator::get_remaining_size 0 1 293 49
/**
 * Return the bytes left in the datagram.
 */
68
inline std::size_t DatagramIterator::get_remaining_size(void) const;

959 12 get_datagram 0 4 1344 30 DatagramIterator::get_datagram 0 1 294 48
/**
 * Return the datagram of this iterator.
 */
66
inline Datagram const &DatagramIterator::get_datagram(void) const;

960 17 get_current_index 0 4 1344 35 DatagramIterator::get_current_index 0 1 295 100
/**
 * Returns the current position within the datagram of the next piece of data
 * to extract.
 */
67
inline std::size_t DatagramIterator::get_current_index(void) const;

961 6 output 0 4 1344 24 DatagramIterator::output 0 1 296 67
/**
 * Write a string representation of this instance to <out>.
 */
55
void DatagramIterator::output(std::ostream &out) const;

962 5 write 0 4 1344 23 DatagramIterator::write 0 1 297 67
/**
 * Write a string representation of this instance to <out>.
 */
79
void DatagramIterator::write(std::ostream &out, unsigned int indent = 0) const;

963 14 get_class_type 0 4 1344 32 DatagramIterator::get_class_type 0 1 298 0
57
static TypeHandle DatagramIterator::get_class_type(void);

964 17 ~DatagramIterator 0 516 1344 35 DatagramIterator::~DatagramIterator 0 0 0
42
DatagramIterator::~DatagramIterator(void);

965 13 ~DatagramSink 0 518 1345 27 DatagramSink::~DatagramSink 0 0 82
/**
 * Does nothing since this is class is just the definition of an interface
 */
42
virtual DatagramSink::~DatagramSink(void);

966 12 put_datagram 0 6 1345 26 DatagramSink::put_datagram 0 1 299 0
66
virtual bool DatagramSink::put_datagram(Datagram const &data) = 0;

967 13 copy_datagram 0 6 1345 27 DatagramSink::copy_datagram 0 2 300 301 713
/**
 * Copies the file data from the entire indicated file (via the vfs) as the
 * next datagram.  This is intended to support potentially very large
 * datagrams.
 *
 * Returns true on success, false on failure or if this method is
 * unimplemented.  On true, fills "result" with the information that
 * references the copied file, if possible.
 */

/**
 * Copies the file data from the range of the indicated file (outside of the
 * vfs) as the next datagram.  This is intended to support potentially very
 * large datagrams.
 *
 * Returns true on success, false on failure or if this method is
 * unimplemented.  On true, fills "result" with the information that
 * references the copied file, if possible.
 */
178
virtual bool DatagramSink::copy_datagram(SubfileInfo &result, Filename const &filename);
virtual bool DatagramSink::copy_datagram(SubfileInfo &result, SubfileInfo const &source);

968 8 is_error 0 6 1345 22 DatagramSink::is_error 0 1 302 0
46
virtual bool DatagramSink::is_error(void) = 0;

969 5 flush 0 6 1345 19 DatagramSink::flush 0 1 303 0
43
virtual void DatagramSink::flush(void) = 0;

970 12 get_filename 0 6 1345 26 DatagramSink::get_filename 0 1 304 159
/**
 * Returns the filename that provides the target for these datagrams, if any,
 * or empty string if the datagrams do not get written to a file on disk.
 */
57
virtual Filename const &DatagramSink::get_filename(void);

971 8 get_file 0 6 1345 22 DatagramSink::get_file 0 1 305 152
/**
 * Returns the FileReference that provides the target for these datagrams, if
 * any, or NULL if the datagrams do not written to a file on disk.
 */
58
virtual FileReference const *DatagramSink::get_file(void);

972 12 get_file_pos 0 6 1345 26 DatagramSink::get_file_pos 0 1 306 322
/**
 * Returns the current file position within the data stream, if any, or 0 if
 * the file position is not meaningful or cannot be determined.
 *
 * For DatagramSinks that return a meaningful file position, this will be
 * pointing to the first byte following the datagram returned after a call to
 * put_datagram().
 */
56
virtual std::streamoff DatagramSink::get_file_pos(void);

973 21 upcast_to_TypedObject 0 12 1351 42 TypedReferenceCount::upcast_to_TypedObject 0 1 312 46
upcast from TypedReferenceCount to TypedObject
62
TypedObject *TypedReferenceCount::upcast_to_TypedObject(void);

974 31 downcast_to_TypedReferenceCount 0 12 1342 44 TypedObject::downcast_to_TypedReferenceCount 0 0 48
downcast from TypedObject to TypedReferenceCount
72
TypedReferenceCount *TypedObject::downcast_to_TypedReferenceCount(void);

975 24 upcast_to_ReferenceCount 0 12 1351 45 TypedReferenceCount::upcast_to_ReferenceCount 0 1 313 49
upcast from TypedReferenceCount to ReferenceCount
68
ReferenceCount *TypedReferenceCount::upcast_to_ReferenceCount(void);

976 31 downcast_to_TypedReferenceCount 0 12 1336 47 ReferenceCount::downcast_to_TypedReferenceCount 0 0 51
downcast from ReferenceCount to TypedReferenceCount
75
TypedReferenceCount *ReferenceCount::downcast_to_TypedReferenceCount(void);

977 14 get_class_type 0 4 1351 35 TypedReferenceCount::get_class_type 0 1 311 0
60
static TypeHandle TypedReferenceCount::get_class_type(void);

978 20 ~TypedReferenceCount 0 516 1351 41 TypedReferenceCount::~TypedReferenceCount 0 0 0
48
TypedReferenceCount::~TypedReferenceCount(void);

979 13 FileReference 0 260 1350 28 FileReference::FileReference 0 2 307 308 10
/**
 *
 */
132
inline FileReference::FileReference(Filename const &filename);
inline FileReference::FileReference(FileReference const &) = default;

980 12 get_filename 0 4 1350 27 FileReference::get_filename 0 1 309 49
/**
 * Returns the filename of the reference.
 */
63
inline Filename const &FileReference::get_filename(void) const;

981 14 get_class_type 0 4 1350 29 FileReference::get_class_type 0 1 310 0
54
static TypeHandle FileReference::get_class_type(void);

982 14 ~FileReference 0 516 1350 29 FileReference::~FileReference 0 0 0
36
FileReference::~FileReference(void);

983 14 encrypt_string 0 1 0 14 encrypt_string 0 1 647 0
171
std::string encrypt_string(std::string const &source, std::string const &password, std::string const &algorithm = string(), int key_length = -1, int iteration_count = -1);

984 14 decrypt_string 0 1 0 14 decrypt_string 0 1 648 0
83
std::string decrypt_string(std::string const &source, std::string const &password);

985 12 encrypt_file 0 1 0 12 encrypt_file 0 1 649 0
181
bool encrypt_file(Filename const &source, Filename const &dest, std::string const &password, std::string const &algorithm = string(), int key_length = -1, int iteration_count = -1);

986 12 decrypt_file 0 1 0 12 decrypt_file 0 1 650 0
93
bool decrypt_file(Filename const &source, Filename const &dest, std::string const &password);

987 14 encrypt_stream 0 1 0 14 encrypt_stream 0 1 651 0
179
bool encrypt_stream(std::istream &source, std::ostream &dest, std::string const &password, std::string const &algorithm = string(), int key_length = -1, int iteration_count = -1);

988 14 decrypt_stream 0 1 0 14 decrypt_stream 0 1 652 0
91
bool decrypt_stream(std::istream &source, std::ostream &dest, std::string const &password);

989 13 error_to_text 0 1 0 13 error_to_text 0 1 653 10
/**
 *
 */
45
std::string error_to_text(ErrorUtilCode err);

990 15 get_write_error 0 1 0 15 get_write_error 0 1 654 0
26
int get_write_error(void);

991 19 handle_socket_error 0 1 0 19 handle_socket_error 0 1 655 10
/**
 *
 */
38
std::string handle_socket_error(void);

992 17 get_network_error 0 1 0 17 get_network_error 0 1 656 0
28
int get_network_error(void);

993 7 Ramfile 0 260 1355 16 Ramfile::Ramfile 0 2 314 315 10
/**
 *
 */
82
inline Ramfile::Ramfile(void);
inline Ramfile::Ramfile(Ramfile const &) = default;

994 4 seek 0 4 1355 13 Ramfile::seek 0 1 316 130
/**
 * Moves the data pointer to the indicated byte position.  It is not an error
 * to move the pointer past the end of data.
 */
43
inline void Ramfile::seek(std::size_t pos);

995 4 tell 0 4 1355 13 Ramfile::tell 0 1 317 106
/**
 * Returns the current data pointer position as a byte offset from the
 * beginning of the stream.
 */
45
inline std::size_t Ramfile::tell(void) const;

996 4 read 0 4 1355 13 Ramfile::read 0 1 318 319
/**
 * Extracts and returns the indicated number of characters from the current
 * data pointer, and advances the data pointer.  If the data pointer exceeds
 * the end of the buffer, returns empty string.
 *
 * The interface here is intentionally designed to be similar to that for
 * Python's file.read() function.
 */
44
PyObject *Ramfile::read(std::size_t length);

997 8 readline 0 4 1355 17 Ramfile::readline 0 1 319 303
/**
 * Assumes the stream represents a text file, and extracts one line up to and
 * including the trailing newline character.  Returns empty string when the
 * end of file is reached.
 *
 * The interface here is intentionally designed to be similar to that for
 * Python's file.readline() function.
 */
34
PyObject *Ramfile::readline(void);

998 9 readlines 0 4 1355 18 Ramfile::readlines 0 1 320 0
35
PyObject *Ramfile::readlines(void);

999 8 get_data 0 4 1355 17 Ramfile::get_data 0 1 321 101
/**
 * Returns the entire buffer contents as a string, regardless of the current
 * data pointer.
 */
40
PyObject *Ramfile::get_data(void) const;

1000 13 get_data_size 0 4 1355 22 Ramfile::get_data_size 0 1 322 58
/**
 * Returns the size of the entire buffer contents.
 */
54
inline std::size_t Ramfile::get_data_size(void) const;

1001 5 clear 0 4 1355 14 Ramfile::clear 0 1 323 47
/**
 * Empties the current buffer contents.
 */
33
inline void Ramfile::clear(void);

1002 8 ~Ramfile 0 516 1355 17 Ramfile::~Ramfile 0 0 0
24
Ramfile::~Ramfile(void);

1003 7 HashVal 0 260 1356 16 HashVal::HashVal 0 2 324 325 22
/**
 *
 */

/**
 *
 */
76
inline HashVal::HashVal(void);
inline HashVal::HashVal(HashVal const &copy);

1004 10 operator = 0 4 1356 19 HashVal::operator = 0 1 326 0
53
inline void HashVal::operator =(HashVal const &copy);

1005 11 operator == 0 4 1356 20 HashVal::operator == 0 1 327 0
61
inline bool HashVal::operator ==(HashVal const &other) const;

1006 11 operator != 0 4 1356 20 HashVal::operator != 0 1 328 0
61
inline bool HashVal::operator !=(HashVal const &other) const;

1007 10 operator < 0 4 1356 19 HashVal::operator < 0 1 329 0
60
inline bool HashVal::operator <(HashVal const &other) const;

1008 10 compare_to 0 4 1356 19 HashVal::compare_to 0 1 330 10
/**
 *
 */
59
inline int HashVal::compare_to(HashVal const &other) const;

1009 10 merge_with 0 4 1356 19 HashVal::merge_with 0 1 331 86
/**
 * Generates a new HashVal representing the xor of this one and the other one.
 */
54
inline void HashVal::merge_with(HashVal const &other);

1010 10 output_dec 0 4 1356 19 HashVal::output_dec 0 1 332 65
/**
 * Outputs the HashVal as four unsigned decimal integers.
 */
57
inline void HashVal::output_dec(std::ostream &out) const;

1011 9 input_dec 0 4 1356 18 HashVal::input_dec 0 1 333 64
/**
 * Inputs the HashVal as four unsigned decimal integers.
 */
49
inline void HashVal::input_dec(std::istream &in);

1012 10 output_hex 0 4 1356 19 HashVal::output_hex 0 1 334 64
/**
 * Outputs the HashVal as a 32-digit hexadecimal number.
 */
50
void HashVal::output_hex(std::ostream &out) const;

1013 9 input_hex 0 4 1356 18 HashVal::input_hex 0 1 335 63
/**
 * Inputs the HashVal as a 32-digit hexadecimal number.
 */
42
void HashVal::input_hex(std::istream &in);

1014 13 output_binary 0 4 1356 22 HashVal::output_binary 0 1 336 128
/**
 * Outputs the HashVal as a binary stream of bytes in order.  This is not the
 * same order generated by write_stream().
 */
53
void HashVal::output_binary(std::ostream &out) const;

1015 12 input_binary 0 4 1356 21 HashVal::input_binary 0 1 337 125
/**
 * Inputs the HashVal as a binary stream of bytes in order.  This is not the
 * same order expected by read_stream().
 */
45
void HashVal::input_binary(std::istream &in);

1016 6 output 0 4 1356 15 HashVal::output 0 1 338 10
/**
 *
 */
53
inline void HashVal::output(std::ostream &out) const;

1017 6 as_dec 0 4 1356 15 HashVal::as_dec 0 1 339 69
/**
 * Returns the HashVal as a string with four decimal numbers.
 */
40
std::string HashVal::as_dec(void) const;

1018 12 set_from_dec 0 4 1356 21 HashVal::set_from_dec 0 1 340 112
/**
 * Sets the HashVal from a string with four decimal numbers.  Returns true if
 * valid, false otherwise.
 */
52
bool HashVal::set_from_dec(std::string const &text);

1019 6 as_hex 0 4 1356 15 HashVal::as_hex 0 1 341 63
/**
 * Returns the HashVal as a 32-byte hexadecimal string.
 */
40
std::string HashVal::as_hex(void) const;

1020 12 set_from_hex 0 4 1356 21 HashVal::set_from_hex 0 1 342 111
/**
 * Sets the HashVal from a 32-byte hexademical string.  Returns true if
 * successful, false otherwise.
 */
52
bool HashVal::set_from_hex(std::string const &text);

1021 6 as_bin 0 4 1356 15 HashVal::as_bin 0 1 343 58
/**
 * Returns the HashVal as a 16-byte binary string.
 */
41
vector_uchar HashVal::as_bin(void) const;

1022 12 set_from_bin 0 4 1356 21 HashVal::set_from_bin 0 1 344 106
/**
 * Sets the HashVal from a 16-byte binary string.  Returns true if successful,
 * false otherwise.
 */
53
bool HashVal::set_from_bin(vector_uchar const &text);

1023 14 write_datagram 0 4 1356 23 HashVal::write_datagram 0 1 345 10
/**
 *
 */
65
inline void HashVal::write_datagram(Datagram &destination) const;

1024 13 read_datagram 0 4 1356 22 HashVal::read_datagram 0 1 346 10
/**
 *
 */
61
inline void HashVal::read_datagram(DatagramIterator &source);

1025 12 write_stream 0 4 1356 21 HashVal::write_stream 0 1 347 10
/**
 *
 */
67
inline void HashVal::write_stream(StreamWriter &destination) const;

1026 11 read_stream 0 4 1356 20 HashVal::read_stream 0 1 348 10
/**
 *
 */
55
inline void HashVal::read_stream(StreamReader &source);

1027 9 hash_file 0 4 1356 18 HashVal::hash_file 0 1 349 232
/**
 * Generates the hash value from the indicated file.  Returns true on success,
 * false if the file cannot be read.  This method is only defined if we have
 * the OpenSSL library (which provides md5 functionality) available.
 */
50
bool HashVal::hash_file(Filename const &filename);

1028 11 hash_stream 0 4 1356 20 HashVal::hash_stream 0 1 350 232
/**
 * Generates the hash value from the indicated file.  Returns true on success,
 * false if the file cannot be read.  This method is only defined if we have
 * the OpenSSL library (which provides md5 functionality) available.
 */
48
bool HashVal::hash_stream(std::istream &stream);

1029 12 hash_ramfile 0 4 1356 21 HashVal::hash_ramfile 0 1 351 178
/**
 * Generates the hash value by hashing the indicated data.  This method is
 * only defined if we have the OpenSSL library (which provides md5
 * functionality) available.
 */
58
inline void HashVal::hash_ramfile(Ramfile const &ramfile);

1030 11 hash_string 0 4 1356 20 HashVal::hash_string 0 1 352 178
/**
 * Generates the hash value by hashing the indicated data.  This method is
 * only defined if we have the OpenSSL library (which provides md5
 * functionality) available.
 */
58
inline void HashVal::hash_string(std::string const &data);

1031 10 hash_bytes 0 4 1356 19 HashVal::hash_bytes 0 1 353 178
/**
 * Generates the hash value by hashing the indicated data.  This method is
 * only defined if we have the OpenSSL library (which provides md5
 * functionality) available.
 */
58
inline void HashVal::hash_bytes(vector_uchar const &data);

1032 11 hash_buffer 0 4 1356 20 HashVal::hash_buffer 0 1 354 178
/**
 * Generates the hash value by hashing the indicated data.  This method is
 * only defined if we have the OpenSSL library (which provides md5
 * functionality) available.
 */
58
void HashVal::hash_buffer(char const *buffer, int length);

1033 8 ~HashVal 0 516 1356 17 HashVal::~HashVal 0 0 0
24
HashVal::~HashVal(void);

1034 19 MemoryUsagePointers 0 260 1357 40 MemoryUsagePointers::MemoryUsagePointers 0 2 355 356 10
/**
 *
 */
135
MemoryUsagePointers::MemoryUsagePointers(void);
inline MemoryUsagePointers::MemoryUsagePointers(MemoryUsagePointers const &) = default;

1035 20 ~MemoryUsagePointers 0 516 1357 41 MemoryUsagePointers::~MemoryUsagePointers 0 0 10
/**
 *
 */
48
MemoryUsagePointers::~MemoryUsagePointers(void);

1036 16 get_num_pointers 0 4 1357 37 MemoryUsagePointers::get_num_pointers 0 1 357 53
/**
 * Returns the number of pointers in the set.
 */
62
std::size_t MemoryUsagePointers::get_num_pointers(void) const;

1037 11 get_pointer 0 4 1357 32 MemoryUsagePointers::get_pointer 0 1 358 46
/**
 * Returns the nth pointer of the set.
 */
70
ReferenceCount *MemoryUsagePointers::get_pointer(std::size_t n) const;

1038 17 get_typed_pointer 0 4 1357 38 MemoryUsagePointers::get_typed_pointer 0 1 359 175
/**
 * Returns the nth pointer of the set, typecast to a TypedObject if possible.
 * If the pointer is not a TypedObject or if the cast cannot be made, returns
 * nullptr.
 */
73
TypedObject *MemoryUsagePointers::get_typed_pointer(std::size_t n) const;

1039 8 get_type 0 4 1357 29 MemoryUsagePointers::get_type 0 1 360 70
/**
 * Returns the actual type of the nth pointer, if it is known.
 */
62
TypeHandle MemoryUsagePointers::get_type(std::size_t n) const;

1040 13 get_type_name 0 4 1357 34 MemoryUsagePointers::get_type_name 0 1 361 68
/**
 * Returns the type name of the nth pointer, if it is known.
 */
68
std::string MemoryUsagePointers::get_type_name(std::size_t n) const;

1041 7 get_age 0 4 1357 28 MemoryUsagePointers::get_age 0 1 362 197
/**
 * Returns the age of the nth pointer: the number of seconds elapsed between
 * the time it was allocated and the time it was added to this set via a call
 * to MemoryUsage::get_pointers().
 */
57
double MemoryUsagePointers::get_age(std::size_t n) const;

1042 18 get_python_pointer 0 4 1357 39 MemoryUsagePointers::get_python_pointer 0 1 363 0
71
PyObject *MemoryUsagePointers::get_python_pointer(std::size_t n) const;

1043 5 clear 0 4 1357 26 MemoryUsagePointers::clear 0 1 364 39
/**
 * Empties the set of pointers.
 */
38
void MemoryUsagePointers::clear(void);

1044 6 output 0 4 1357 27 MemoryUsagePointers::output 0 1 365 10
/**
 *
 */
58
void MemoryUsagePointers::output(std::ostream &out) const;

1045 10 ISubStream 0 260 1358 22 ISubStream::ISubStream 0 2 366 367 22
/**
 *
 */

/**
 *
 */
142
inline ISubStream::ISubStream(void);
inline explicit ISubStream::ISubStream(IStreamWrapper *source, std::streamoff start, std::streamoff end);

1046 4 open 0 4 1358 16 ISubStream::open 0 1 368 391
/**
 * Starts the SubStream reading from the indicated source, with the first
 * character being the character at position "start" within the source, for
 * end - start total characters.  The character at "end" within the source
 * will never be read; this will appear to be EOF.
 *
 * If end is zero, it indicates that the ISubStream will continue until the
 * end of the source stream.
 */
102
inline ISubStream &ISubStream::open(IStreamWrapper *source, std::streamoff start, std::streamoff end);

1047 5 close 0 4 1358 17 ISubStream::close 0 1 369 92
/**
 * Resets the SubStream to empty, but does not actually close the source
 * istream.
 */
43
inline ISubStream &ISubStream::close(void);

1048 11 ~ISubStream 0 516 1358 23 ISubStream::~ISubStream 0 0 0
30
ISubStream::~ISubStream(void);

1049 10 OSubStream 0 260 1360 22 OSubStream::OSubStream 0 2 370 371 22
/**
 *
 */

/**
 *
 */
161
inline OSubStream::OSubStream(void);
inline explicit OSubStream::OSubStream(OStreamWrapper *dest, std::streamoff start, std::streamoff end, bool append = false);

1050 4 open 0 4 1360 16 OSubStream::open 0 1 372 383
/**
 * Starts the SubStream reading from the indicated dest, with the first
 * character being the character at position "start" within the dest, for end
 * - start total characters.  The character at "end" within the dest will
 * never be read; this will appear to be EOF.
 *
 * If end is zero, it indicates that the OSubStream will continue until the
 * end of the dest stream.
 */
121
inline OSubStream &OSubStream::open(OStreamWrapper *dest, std::streamoff start, std::streamoff end, bool append = false);

1051 5 close 0 4 1360 17 OSubStream::close 0 1 373 90
/**
 * Resets the SubStream to empty, but does not actually close the dest
 * ostream.
 */
43
inline OSubStream &OSubStream::close(void);

1052 11 ~OSubStream 0 516 1360 23 OSubStream::~OSubStream 0 0 0
30
OSubStream::~OSubStream(void);

1053 9 SubStream 0 260 1362 20 SubStream::SubStream 0 2 374 375 22
/**
 *
 */

/**
 *
 */
158
inline SubStream::SubStream(void);
inline explicit SubStream::SubStream(StreamWrapper *nested, std::streamoff start, std::streamoff end, bool append = false);

1054 4 open 0 4 1362 15 SubStream::open 0 1 376 278
/**
 * Starts the SubStream reading and writing from the indicated nested stream,
 * within the indicated range.  "end" is the first character outside of the
 * range.
 *
 * If end is zero, it indicates that the SubStream will continue until the end
 * of the nested stream.
 */
120
inline SubStream &SubStream::open(StreamWrapper *nested, std::streamoff start, std::streamoff end, bool append = false);

1055 5 close 0 4 1362 16 SubStream::close 0 1 377 92
/**
 * Resets the SubStream to empty, but does not actually close the nested
 * ostream.
 */
41
inline SubStream &SubStream::close(void);

1056 10 ~SubStream 0 516 1362 21 SubStream::~SubStream 0 0 0
28
SubStream::~SubStream(void);

1057 9 Multifile 0 260 1364 20 Multifile::Multifile 0 1 378 10
/**
 *
 */
27
Multifile::Multifile(void);

1058 9 open_read 0 4 1364 20 Multifile::open_read 0 2 379 380 687
/**
 * Opens the named Multifile on disk for reading.  The Multifile index is read
 * in, and the list of subfiles becomes available; individual subfiles may
 * then be extracted or read, but the list of subfiles may not be modified.
 *
 * Also see the version of open_read() which accepts an istream.  Returns true
 * on success, false on failure.
 */

/**
 * Opens an anonymous Multifile for reading using an istream.  There must be
 * seek functionality via seekg() and tellg() on the istream.
 *
 * If owns_pointer is true, then the Multifile assumes ownership of the stream
 * pointer and will delete it when the multifile is closed, including if this
 * function returns false.
 */
214
bool Multifile::open_read(Filename const &multifile_name, std::streamoff const &offset = 0);
bool Multifile::open_read(IStreamWrapper *multifile_stream, bool owns_pointer = false, std::streamoff const &offset = 0);

1059 10 open_write 0 4 1364 21 Multifile::open_write 0 2 381 382 755
/**
 * Opens the named Multifile on disk for writing.  If there already exists a
 * file by that name, it is truncated.  The Multifile is then prepared for
 * accepting a brand new set of subfiles, which will be written to the
 * indicated filename.  Individual subfiles may not be extracted or read.
 *
 * Also see the version of open_write() which accepts an ostream.  Returns
 * true on success, false on failure.
 */

/**
 * Opens an anonymous Multifile for writing using an ostream.  There must be
 * seek functionality via seekp() and tellp() on the pstream.
 *
 * If owns_pointer is true, then the Multifile assumes ownership of the stream
 * pointer and will delete it when the multifile is closed, including if this
 * function returns false.
 */
146
bool Multifile::open_write(Filename const &multifile_name);
bool Multifile::open_write(std::ostream *multifile_stream, bool owns_pointer = false);

1060 15 open_read_write 0 4 1364 26 Multifile::open_read_write 0 2 383 384 727
/**
 * Opens the named Multifile on disk for reading and writing.  If there
 * already exists a file by that name, its index is read.  Subfiles may be
 * added or removed, and the resulting changes will be written to the named
 * file.
 *
 * Also see the version of open_read_write() which accepts an iostream.
 * Returns true on success, false on failure.
 */

/**
 * Opens an anonymous Multifile for reading and writing using an iostream.
 * There must be seek functionality via seekg()/seekp() and tellg()/tellp() on
 * the iostream.
 *
 * If owns_pointer is true, then the Multifile assumes ownership of the stream
 * pointer and will delete it when the multifile is closed, including if this
 * function returns false.
 */
157
bool Multifile::open_read_write(Filename const &multifile_name);
bool Multifile::open_read_write(std::iostream *multifile_stream, bool owns_pointer = false);

1061 5 close 0 4 1364 16 Multifile::close 0 1 385 169
/**
 * Closes the Multifile if it is open.  All changes are flushed to disk, and
 * the file becomes invalid for further operations until the next call to
 * open().
 */
28
void Multifile::close(void);

1062 18 get_multifile_name 0 4 1364 29 Multifile::get_multifile_name 0 1 386 69
/**
 * Returns the filename of the Multifile, if it is available.
 */
65
inline Filename const &Multifile::get_multifile_name(void) const;

1063 18 set_multifile_name 0 4 1364 29 Multifile::set_multifile_name 0 1 387 209
/**
 * Replaces the filename of the Multifile.  This is primarily used for
 * documentation purposes only; changing this name does not open the indicated
 * file.  See open_read() or open_write() for that.
 */
74
inline void Multifile::set_multifile_name(Filename const &multifile_name);

1064 13 is_read_valid 0 4 1364 24 Multifile::is_read_valid 0 1 388 154
/**
 * Returns true if the Multifile has been opened for read mode and there have
 * been no errors, and individual Subfile contents may be extracted.
 */
49
inline bool Multifile::is_read_valid(void) const;

1065 14 is_write_valid 0 4 1364 25 Multifile::is_write_valid 0 1 389 162
/**
 * Returns true if the Multifile has been opened for write mode and there have
 * been no errors, and Subfiles may be added or removed from the Multifile.
 */
50
inline bool Multifile::is_write_valid(void) const;

1066 12 needs_repack 0 4 1364 23 Multifile::needs_repack 0 1 390 118
/**
 * Returns true if the Multifile index is suboptimal and should be repacked.
 * Call repack() to achieve this.
 */
48
inline bool Multifile::needs_repack(void) const;

1067 13 get_timestamp 0 4 1364 24 Multifile::get_timestamp 0 1 391 299
/**
 * Returns the modification timestamp of the overall Multifile.  This
 * indicates the most recent date at which subfiles were added or removed from
 * the Multifile.  Note that it is logically possible for an individual
 * subfile to have a more recent timestamp than the overall timestamp.
 */
51
inline time_t Multifile::get_timestamp(void) const;

1068 13 set_timestamp 0 4 1364 24 Multifile::set_timestamp 0 1 392 206
/**
 * Changes the overall mudification timestamp of the multifile.  Note that this
 * will be reset to the current time every time you modify a subfile.
 * Only set this if you know what you are doing!
 */
55
inline void Multifile::set_timestamp(time_t timestamp);

1069 20 set_record_timestamp 0 4 1364 31 Multifile::set_record_timestamp 0 1 393 529
/**
 * Sets the flag indicating whether timestamps should be recorded within the
 * Multifile or not.  The default is true, indicating the Multifile will
 * record timestamps for the overall file and also for each subfile.
 *
 * If this is false, the Multifile will not record timestamps internally.  In
 * this case, the return value from get_timestamp() or get_subfile_timestamp()
 * will be estimations.
 *
 * You may want to set this false to minimize the bitwise difference between
 * independently-generated Multifiles.
 */
67
inline void Multifile::set_record_timestamp(bool record_timestamp);

1070 20 get_record_timestamp 0 4 1364 31 Multifile::get_record_timestamp 0 1 394 137
/**
 * Returns the flag indicating whether timestamps should be recorded within
 * the Multifile or not.  See set_record_timestamp().
 */
56
inline bool Multifile::get_record_timestamp(void) const;

1071 16 set_scale_factor 0 4 1364 27 Multifile::set_scale_factor 0 1 395 782
/**
 * Changes the internal scale factor for this Multifile.
 *
 * This is normally 1, but it may be set to any arbitrary value (greater than
 * zero) to support Multifile archives that exceed 4GB, if necessary.
 * (Individual subfiles may still not exceed 4GB.)
 *
 * All addresses within the file are rounded up to the next multiple of
 * _scale_factor, and zeros are written to the file to fill the resulting
 * gaps.  Then the address is divided by _scale_factor and written out as a
 * 32-bit integer.  Thus, setting a scale factor of 2 supports up to 8GB
 * files, 3 supports 12GB files, etc.
 *
 * Calling this function on an already-existing Multifile will have no
 * immediate effect until a future call to repack() or close() (or until the
 * Multifile is destructed).
 */
59
void Multifile::set_scale_factor(std::size_t scale_factor);

1072 16 get_scale_factor 0 4 1364 27 Multifile::get_scale_factor 0 1 396 92
/**
 * Returns the internal scale factor for this Multifile.  See
 * set_scale_factor().
 */
59
inline std::size_t Multifile::get_scale_factor(void) const;

1073 19 set_encryption_flag 0 4 1364 30 Multifile::set_encryption_flag 0 1 397 461
/**
 * Sets the flag indicating whether subsequently-added subfiles should be
 * encrypted before writing them to the multifile.  If true, subfiles will be
 * encrypted; if false (the default), they will be written without encryption.
 *
 * When true, subfiles will be encrypted with the password specified by
 * set_encryption_password().  It is possible to apply a different password to
 * different files, but the resulting file can't be mounted via VFS.
 */
54
inline void Multifile::set_encryption_flag(bool flag);

1074 19 get_encryption_flag 0 4 1364 30 Multifile::get_encryption_flag 0 1 398 163
/**
 * Returns the flag indicating whether subsequently-added subfiles should be
 * encrypted before writing them to the multifile.  See set_encryption_flag().
 */
55
inline bool Multifile::get_encryption_flag(void) const;

1075 23 set_encryption_password 0 4 1364 34 Multifile::set_encryption_password 0 1 399 369
/**
 * Specifies the password that will be used to encrypt subfiles subsequently
 * added to the multifile, if the encryption flag is also set true (see
 * set_encryption_flag()).
 *
 * It is possible to apply a different password to different files, but the
 * resulting file can't be mounted via VFS.  Changing this value may cause an
 * implicit call to flush().
 */
87
inline void Multifile::set_encryption_password(std::string const &encryption_password);

1076 23 get_encryption_password 0 4 1364 34 Multifile::get_encryption_password 0 1 400 141
/**
 * Returns the password that will be used to encrypt subfiles subsequently
 * added to the multifile.  See set_encryption_password().
 */
73
inline std::string const &Multifile::get_encryption_password(void) const;

1077 24 set_encryption_algorithm 0 4 1364 35 Multifile::set_encryption_algorithm 0 1 401 659
/**
 * Specifies the encryption algorithm that should be used for future calls to
 * add_subfile().  The default is whatever is specified by the encryption-
 * algorithm config variable.  The complete set of available algorithms is
 * defined by the current version of OpenSSL.
 *
 * If an invalid algorithm is specified, there is no immediate error return
 * code, but flush() will fail and the file will be invalid.
 *
 * It is possible to apply a different encryption algorithm to different
 * files, and unlike the password, this does not interfere with mounting the
 * multifile via VFS.  Changing this value may cause an implicit call to
 * flush().
 */
89
inline void Multifile::set_encryption_algorithm(std::string const &encryption_algorithm);

1078 24 get_encryption_algorithm 0 4 1364 35 Multifile::get_encryption_algorithm 0 1 402 96
/**
 * Returns the encryption algorithm that was specified by
 * set_encryption_algorithm().
 */
74
inline std::string const &Multifile::get_encryption_algorithm(void) const;

1079 25 set_encryption_key_length 0 4 1364 36 Multifile::set_encryption_key_length 0 1 403 611
/**
 * Specifies the length of the key, in bits, that should be used to encrypt
 * the stream in future calls to add_subfile().  The default is whatever is
 * specified by the encryption-key-length config variable.
 *
 * If an invalid key_length for the chosen algorithm is specified, there is no
 * immediate error return code, but flush() will fail and the file will be
 * invalid.
 *
 * It is possible to apply a different key length to different files, and
 * unlike the password, this does not interfere with mounting the multifile
 * via VFS. Changing this value may cause an implicit call to flush().
 */
76
inline void Multifile::set_encryption_key_length(int encryption_key_length);

1080 25 get_encryption_key_length 0 4 1364 36 Multifile::get_encryption_key_length 0 1 404 108
/**
 * Returns the encryption key length, in bits, that was specified by
 * set_encryption_key_length().
 */
60
inline int Multifile::get_encryption_key_length(void) const;

1081 30 set_encryption_iteration_count 0 4 1364 41 Multifile::set_encryption_iteration_count 0 1 405 740
/**
 * Specifies the number of times to repeatedly hash the key before writing it
 * to the stream in future calls to add_subfile().  Its purpose is to make it
 * computationally more expensive for an attacker to search the key space
 * exhaustively.  This should be a multiple of 1,000 and should not exceed
 * about 65 million; the value 0 indicates just one application of the hashing
 * algorithm.
 *
 * The default is whatever is specified by the multifile-encryption-iteration-
 * count config variable.
 *
 * It is possible to apply a different iteration count to different files, and
 * unlike the password, this does not interfere with mounting the multifile
 * via VFS.  Changing this value causes an implicit call to flush().
 */
86
inline void Multifile::set_encryption_iteration_count(int encryption_iteration_count);

1082 30 get_encryption_iteration_count 0 4 1364 41 Multifile::get_encryption_iteration_count 0 1 406 84
/**
 * Returns the value that was specified by set_encryption_iteration_count().
 */
65
inline int Multifile::get_encryption_iteration_count(void) const;

1083 11 add_subfile 0 4 1364 22 Multifile::add_subfile 0 2 407 408 1397
/**
 * Adds a file on disk as a subfile to the Multifile.  The file named by
 * filename will be read and added to the Multifile at the next call to
 * flush().  If there already exists a subfile with the indicated name, it is
 * replaced without examining its contents (but see also update_subfile).
 *
 * Either Filename:::set_binary() or set_text() must have been called
 * previously to specify the nature of the source file.  If set_text() was
 * called, the text flag will be set on the subfile.
 *
 * Returns the subfile name on success (it might have been modified slightly),
 * or empty string on failure.
 */

/**
 * Adds a file from a stream as a subfile to the Multifile.  The indicated
 * istream will be read and its contents added to the Multifile at the next
 * call to flush(). The file will be added as a binary subfile.
 *
 * Note that the istream must remain untouched and unused by any other code
 * until flush() is called.  At that time, the Multifile will read the entire
 * contents of the istream from the current file position to the end of the
 * file.  Subsequently, the Multifile will *not* close or delete the istream.
 * It is the caller's responsibility to ensure that the istream pointer does
 * not destruct during the lifetime of the Multifile.
 *
 * Returns the subfile name on success (it might have been modified slightly),
 * or empty string on failure.
 */
237
std::string Multifile::add_subfile(std::string const &subfile_name, Filename const &filename, int compression_level);
std::string Multifile::add_subfile(std::string const &subfile_name, std::istream *subfile_data, int compression_level);

1084 14 update_subfile 0 4 1364 25 Multifile::update_subfile 0 1 409 451
/**
 * Adds a file on disk to the subfile.  If a subfile already exists with the
 * same name, its contents are compared byte-for-byte to the disk file, and it
 * is replaced only if it is different; otherwise, the multifile is left
 * unchanged.
 *
 * Either Filename:::set_binary() or set_text() must have been called
 * previously to specify the nature of the source file.  If set_text() was
 * called, the text flag will be set on the subfile.
 */
120
std::string Multifile::update_subfile(std::string const &subfile_name, Filename const &filename, int compression_level);

1085 13 add_signature 0 4 1364 24 Multifile::add_signature 0 2 410 411 3062
/**
 * Adds a new signature to the Multifile.  This signature associates the
 * indicated certificate with the current contents of the Multifile.  When the
 * Multifile is read later, the signature will still be present only if the
 * Multifile is unchanged; any subsequent changes to the Multifile will
 * automatically invalidate and remove the signature.
 *
 * The chain filename may be empty if the certificate does not require an
 * authenticating certificate chain (e.g.  because it is self-signed).
 *
 * The specified private key must match the certificate, and the Multifile
 * must be open in read-write mode.  The private key is only used for
 * generating the signature; it is not written to the Multifile and cannot be
 * retrieved from the Multifile later.  (However, the certificate *can* be
 * retrieved from the Multifile later, to identify the entity that created the
 * signature.)
 *
 * This implicitly causes a repack() operation if one is needed.  Returns true
 * on success, false on failure.
 *
 * This flavor of add_signature() reads the certificate and private key from a
 * PEM-formatted file, for instance as generated by the openssl command.  If
 * the private key file is password-encrypted, the third parameter will be
 * used as the password to decrypt it.
 */

/**
 * Adds a new signature to the Multifile.  This signature associates the
 * indicated certificate with the current contents of the Multifile.  When the
 * Multifile is read later, the signature will still be present only if the
 * Multifile is unchanged; any subsequent changes to the Multifile will
 * automatically invalidate and remove the signature.
 *
 * This flavor of add_signature() reads the certificate, private key, and
 * certificate chain from the same PEM-formatted file.  It takes the first
 * private key found as the intended key, and then uses the first certificate
 * found that matches that key as the signing certificate.  Any other
 * certificates in the file are taken to be part of the chain.
 */

/**
 * Adds a new signature to the Multifile.  This signature associates the
 * indicated certificate with the current contents of the Multifile.  When the
 * Multifile is read later, the signature will still be present only if the
 * Multifile is unchanged; any subsequent changes to the Multifile will
 * automatically invalidate and remove the signature.
 *
 * The signature certificate is the first certificate on the CertChain object.
 * Any remaining certificates are support certificates to authenticate the
 * first one.
 *
 * The specified private key must match the certificate, and the Multifile
 * must be open in read-write mode.  The private key is only used for
 * generating the signature; it is not written to the Multifile and cannot be
 * retrieved from the Multifile later.  (However, the certificate *can* be
 * retrieved from the Multifile later, to identify the entity that created the
 * signature.)
 *
 * This implicitly causes a repack() operation if one is needed.  Returns true
 * on success, false on failure.
 */
230
bool Multifile::add_signature(Filename const &certificate, Filename const &chain, Filename const &pkey, std::string const &password = "");
bool Multifile::add_signature(Filename const &composite, std::string const &password = "");

1086 18 get_num_signatures 0 4 1364 29 Multifile::get_num_signatures 0 1 412 555
/**
 * Returns the number of matching signatures found on the Multifile.  These
 * signatures may be iterated via get_signature() and related methods.
 *
 * A signature on this list is guaranteed to match the Multifile contents,
 * proving that the Multifile has been unmodified since the signature was
 * applied.  However, this does not guarantee that the certificate itself is
 * actually from who it says it is from; only that it matches the Multifile
 * contents.  See validate_signature_certificate() to authenticate a
 * particular certificate.
 */
46
int Multifile::get_num_signatures(void) const;

1087 26 get_signature_subject_name 0 4 1364 37 Multifile::get_signature_subject_name 0 1 413 352
/**
 * Returns the "subject name" for the nth signature found on the Multifile.
 * This is a string formatted according to RFC2253 that should more-or-less
 * identify a particular certificate; when paired with the public key (see
 * get_signature_public_key()), it can uniquely identify a certificate.  See
 * the comments in get_num_signatures().
 */
63
std::string Multifile::get_signature_subject_name(int n) const;

1088 27 get_signature_friendly_name 0 4 1364 38 Multifile::get_signature_friendly_name 0 1 414 299
/**
 * Returns a "friendly name" for the nth signature found on the Multifile.
 * This attempts to extract out the most meaningful part of the subject name.
 * It returns the emailAddress, if it is defined; otherwise, it returns the
 * commonName.
 *
 * See the comments in get_num_signatures().
 */
64
std::string Multifile::get_signature_friendly_name(int n) const;

1089 24 get_signature_public_key 0 4 1364 35 Multifile::get_signature_public_key 0 1 415 379
/**
 * Returns the public key used for the nth signature found on the Multifile.
 * This is encoded in DER form and returned as a string of hex digits.
 *
 * This can be used, in conjunction with the subject name (see
 * get_signature_subject_name()), to uniquely identify a particular
 * certificate and its subsequent reissues.  See the comments in
 * get_num_signatures().
 */
61
std::string Multifile::get_signature_public_key(int n) const;

1090 27 print_signature_certificate 0 4 1364 38 Multifile::print_signature_certificate 0 1 416 158
/**
 * Writes the certificate for the nth signature, in user-readable verbose
 * form, to the indicated stream.  See the comments in get_num_signatures().
 */
76
void Multifile::print_signature_certificate(int n, std::ostream &out) const;

1091 27 write_signature_certificate 0 4 1364 38 Multifile::write_signature_certificate 0 1 417 140
/**
 * Writes the certificate for the nth signature, in PEM form, to the indicated
 * stream.  See the comments in get_num_signatures().
 */
76
void Multifile::write_signature_certificate(int n, std::ostream &out) const;

1092 30 validate_signature_certificate 0 4 1364 41 Multifile::validate_signature_certificate 0 1 418 289
/**
 * Checks that the certificate used for the nth signature is a valid,
 * authorized certificate with some known certificate authority.  Returns 0 if
 * it is valid, -1 if there is some error, or the corresponding OpenSSL error
 * code if it is invalid, out-of-date, or self-signed.
 */
59
int Multifile::validate_signature_certificate(int n) const;

1093 5 flush 0 4 1364 16 Multifile::flush 0 1 419 691
/**
 * Writes all contents of the Multifile to disk.  Until flush() is called,
 * add_subfile() and remove_subfile() do not actually do anything to disk.  At
 * this point, all of the recently-added subfiles are read and their contents
 * are added to the end of the Multifile, and the recently-removed subfiles
 * are marked gone from the Multifile.
 *
 * This may result in a suboptimal index.  To guarantee that the index is
 * written at the beginning of the file, call repack() instead of flush().
 *
 * It is not necessary to call flush() explicitly unless you are concerned
 * about reading the recently-added subfiles immediately.
 *
 * Returns true on success, false on failure.
 */
28
bool Multifile::flush(void);

1094 6 repack 0 4 1364 17 Multifile::repack 0 1 420 587
/**
 * Forces a complete rewrite of the Multifile and all of its contents, so that
 * its index will appear at the beginning of the file with all of the subfiles
 * listed in alphabetical order.  This is considered optimal for reading, and
 * is the standard configuration; but it is not essential to do this.
 *
 * It is only valid to call this if the Multifile was opened using
 * open_read_write() and an explicit filename, rather than an iostream.  Also,
 * we must have write permission to the directory containing the Multifile.
 *
 * Returns true on success, false on failure.
 */
29
bool Multifile::repack(void);

1095 16 get_num_subfiles 0 4 1364 27 Multifile::get_num_subfiles 0 1 421 169
/**
 * Returns the number of subfiles within the Multifile.  The subfiles may be
 * accessed in alphabetical order by iterating through [0 ..
 * get_num_subfiles()).
 */
44
int Multifile::get_num_subfiles(void) const;

1096 12 find_subfile 0 4 1364 23 Multifile::find_subfile 0 1 422 127
/**
 * Returns the index of the subfile with the indicated name, or -1 if the
 * named subfile is not within the Multifile.
 */
67
int Multifile::find_subfile(std::string const &subfile_name) const;

1097 13 has_directory 0 4 1364 24 Multifile::has_directory 0 1 423 203
/**
 * Returns true if the indicated subfile name is the directory prefix to one
 * or more files within the Multifile.  That is, the Multifile contains at
 * least one file named "subfile_name/...".
 */
69
bool Multifile::has_directory(std::string const &subfile_name) const;

1098 14 scan_directory 0 4 1364 25 Multifile::scan_directory 0 1 424 420
/**
 * Considers subfile_name to be the name of a subdirectory within the
 * Multifile, but not a file itself; fills the given vector up with the sorted
 * list of subdirectories or files within the named directory.
 *
 * Note that directories do not exist explicitly within a Multifile; this just
 * checks for the existence of files with the given initial prefix.
 *
 * Returns true if successful, false otherwise.
 */
95
bool Multifile::scan_directory(vector_string &contents, std::string const &subfile_name) const;

1099 14 remove_subfile 0 4 1364 25 Multifile::remove_subfile 0 2 425 426 912
/**
 * Removes the named subfile from the Multifile, if it exists; returns true if
 * successfully removed, or false if it did not exist in the first place.  The
 * file will not actually be removed from the disk until the next call to
 * flush().
 *
 * Note that this does not actually remove the data from the indicated
 * subfile; it simply removes it from the index.  The Multifile will not be
 * reduced in size after this operation, until the next call to repack().
 */

/**
 * Removes the nth subfile from the Multifile.  This will cause all subsequent
 * index numbers to decrease by one.  The file will not actually be removed
 * from the disk until the next call to flush().
 *
 * Note that this does not actually remove the data from the indicated
 * subfile; it simply removes it from the index.  The Multifile will not be
 * reduced in size after this operation, until the next call to repack().
 */
114
void Multifile::remove_subfile(int index);
inline bool Multifile::remove_subfile(std::string const &subfile_name);

1100 16 get_subfile_name 0 4 1364 27 Multifile::get_subfile_name 0 1 427 47
/**
 * Returns the name of the nth subfile.
 */
64
std::string const &Multifile::get_subfile_name(int index) const;

1101 18 get_subfile_length 0 4 1364 29 Multifile::get_subfile_length 0 1 428 170
/**
 * Returns the uncompressed data length of the nth subfile.  This might return
 * 0 if the subfile has recently been added and flush() has not yet been
 * called.
 */
59
std::size_t Multifile::get_subfile_length(int index) const;

1102 21 get_subfile_timestamp 0 4 1364 32 Multifile::get_subfile_timestamp 0 1 429 270
/**
 * Returns the modification time of the nth subfile.  If this is called on an
 * older .mf file, which did not store individual timestamps in the file (or
 * if get_record_timestamp() is false), this will return the modification time
 * of the overall multifile.
 */
57
time_t Multifile::get_subfile_timestamp(int index) const;

1103 21 is_subfile_compressed 0 4 1364 32 Multifile::is_subfile_compressed 0 1 430 120
/**
 * Returns true if the indicated subfile has been compressed when stored
 * within the archive, false otherwise.
 */
55
bool Multifile::is_subfile_compressed(int index) const;

1104 20 is_subfile_encrypted 0 4 1364 31 Multifile::is_subfile_encrypted 0 1 431 119
/**
 * Returns true if the indicated subfile has been encrypted when stored within
 * the archive, false otherwise.
 */
54
bool Multifile::is_subfile_encrypted(int index) const;

1105 15 is_subfile_text 0 4 1364 26 Multifile::is_subfile_text 0 1 432 343
/**
 * Returns true if the indicated subfile represents text data, or false if it
 * represents binary data.  If the file is text data, it may have been
 * processed by end-of-line conversion when it was added.  (But the actual
 * bits in the multifile will represent the standard Unix end-of-line
 * convention, e.g.  \n instead of \r\n.)
 */
49
bool Multifile::is_subfile_text(int index) const;

1106 13 get_index_end 0 4 1364 24 Multifile::get_index_end 0 1 433 371
/**
 * Returns the first byte that is guaranteed to follow any index byte already
 * written to disk in the Multifile.
 *
 * This number is largely meaningless in many cases, but if needs_repack() is
 * false, and the file is flushed, this will indicate the number of bytes in
 * the header + index.  Everything at this byte position and later will be
 * actual data.
 */
52
std::streamoff Multifile::get_index_end(void) const;

1107 26 get_subfile_internal_start 0 4 1364 37 Multifile::get_subfile_internal_start 0 1 434 338
/**
 * Returns the starting byte position within the Multifile at which the
 * indicated subfile begins.  This may be used, with
 * get_subfile_internal_length(), for low-level access to the subfile, but
 * usually it is better to use open_read_subfile() instead (which
 * automatically decrypts and/or uncompresses the subfile data).
 */
70
std::streamoff Multifile::get_subfile_internal_start(int index) const;

1108 27 get_subfile_internal_length 0 4 1364 38 Multifile::get_subfile_internal_length 0 1 435 322
/**
 * Returns the number of bytes the indicated subfile consumes within the
 * archive.  For compressed subfiles, this will generally be smaller than
 * get_subfile_length(); for encrypted (but noncompressed) subfiles, it may be
 * slightly different, for noncompressed and nonencrypted subfiles, it will be
 * equal.
 */
68
std::size_t Multifile::get_subfile_internal_length(int index) const;

1109 12 read_subfile 0 4 1364 23 Multifile::read_subfile 0 1 436 253
/**
 * Returns a vector_uchar that contains the entire contents of the indicated
 * subfile.
 */

/**
 * Fills a string with the entire contents of the indicated subfile.
 */

/**
 * Fills a pvector with the entire contents of the indicated subfile.
 */
55
inline vector_uchar Multifile::read_subfile(int index);

1110 17 open_read_subfile 0 4 1364 28 Multifile::open_read_subfile 0 1 437 937
/**
 * Returns an istream that may be used to read the indicated subfile.  You may
 * seek() within this istream to your heart's content; even though it will be
 * a reference to the already-opened pfstream of the Multifile itself, byte 0
 * appears to be the beginning of the subfile and EOF appears to be the end of
 * the subfile.
 *
 * The returned istream will have been allocated via new; you should pass the
 * pointer to close_read_subfile() when you are finished with it to delete it
 * and release its resources.
 *
 * Any future calls to repack() or close() (or the Multifile destructor) will
 * invalidate all currently open subfile pointers.
 *
 * The return value will be NULL if the stream cannot be opened for some
 * reason.
 */

/**
 * This variant of open_read_subfile() is used internally only, and accepts a
 * pointer to the internal Subfile object, which is assumed to be valid and
 * written to the multifile.
 */
54
std::istream *Multifile::open_read_subfile(int index);

1111 18 close_read_subfile 0 4 1364 29 Multifile::close_read_subfile 0 1 438 246
/**
 * Closes a file opened by a previous call to open_read_subfile().  This
 * really just deletes the istream pointer, but it is recommended to use this
 * interface instead of deleting it explicitly, to help work around compiler
 * issues.
 */
64
static void Multifile::close_read_subfile(std::istream *stream);

1112 15 extract_subfile 0 4 1364 26 Multifile::extract_subfile 0 1 439 68
/**
 * Extracts the nth subfile into a file with the given name.
 */
69
bool Multifile::extract_subfile(int index, Filename const &filename);

1113 18 extract_subfile_to 0 4 1364 29 Multifile::extract_subfile_to 0 1 440 61
/**
 * Extracts the nth subfile to the indicated ostream.
 */
65
bool Multifile::extract_subfile_to(int index, std::ostream &out);

1114 15 compare_subfile 0 4 1364 26 Multifile::compare_subfile 0 1 441 509
/**
 * Performs a byte-for-byte comparison of the indicated file on disk with the
 * nth subfile.  Returns true if the files are equivalent, or false if they
 * are different (or the file is missing).
 *
 * If Filename::set_binary() or set_text() has already been called, it
 * specifies the nature of the source file.  If this is different from the
 * text flag of the subfile, the comparison will always return false.  If this
 * has not been specified, it will be set from the text flag of the subfile.
 */
69
bool Multifile::compare_subfile(int index, Filename const &filename);

1115 6 output 0 4 1364 17 Multifile::output 0 1 442 10
/**
 *
 */
48
void Multifile::output(std::ostream &out) const;

1116 2 ls 0 4 1364 13 Multifile::ls 0 1 443 61
/**
 * Shows a list of all subfiles within the Multifile.
 */
58
void Multifile::ls(std::ostream &out = ::std::cout) const;

1117 16 get_magic_number 0 4 1364 27 Multifile::get_magic_number 0 1 444 108
/**
 * Returns a string with the first n bytes written to a Multifile, to identify
 * it as a Multifile.
 */
60
static inline std::string Multifile::get_magic_number(void);

1118 17 set_header_prefix 0 4 1364 28 Multifile::set_header_prefix 0 1 445 644
/**
 * Sets the string which is written to the Multifile before the Multifile
 * header.  This string must begin with a hash mark and end with a newline
 * character; and if it includes embedded newline characters, each one must be
 * followed by a hash mark.  If these conditions are not initially true, the
 * string will be modified as necessary to make it so.
 *
 * This is primarily useful as a simple hack to allow p3d applications to be
 * run directly from the command line on Unix-like systems.
 *
 * The return value is true if successful, or false on failure (for instance,
 * because the header prefix violates the above rules).
 */
68
void Multifile::set_header_prefix(std::string const &header_prefix);

1119 17 get_header_prefix 0 4 1364 28 Multifile::get_header_prefix 0 1 446 113
/**
 * Returns the string that preceded the Multifile header on the file, if any.
 * See set_header_prefix().
 */
67
inline std::string const &Multifile::get_header_prefix(void) const;

1120 7 Namable 0 260 1367 16 Namable::Namable 0 2 447 448 10
/**
 *
 */
123
inline explicit Namable::Namable(std::string const &initial_name = "");
inline Namable::Namable(Namable const &) = default;

1121 8 set_name 0 4 1367 17 Namable::set_name 0 1 449 10
/**
 *
 */
55
inline void Namable::set_name(std::string const &name);

1122 10 clear_name 0 4 1367 19 Namable::clear_name 0 1 450 46
/**
 * Resets the Namable's name to empty.
 */
38
inline void Namable::clear_name(void);

1123 8 has_name 0 4 1367 17 Namable::has_name 0 1 451 94
/**
 * Returns true if the Namable has a nonempty name set, false if the name is
 * empty.
 */
42
inline bool Namable::has_name(void) const;

1124 8 get_name 0 4 1367 17 Namable::get_name 0 1 452 10
/**
 *
 */
56
inline std::string const &Namable::get_name(void) const;

1125 6 output 0 4 1367 15 Namable::output 0 1 453 251
// In the absence of any definition to the contrary, outputting a Namable
// will write out its name.

/**
 * Outputs the Namable.  This function simply writes the name to the output
 * stream; most Namable derivatives will probably redefine this.
 */
53
inline void Namable::output(std::ostream &out) const;

1126 14 get_class_type 0 4 1367 23 Namable::get_class_type 0 1 454 0
48
static TypeHandle Namable::get_class_type(void);

1127 8 ~Namable 0 516 1367 17 Namable::~Namable 0 0 0
24
Namable::~Namable(void);

1128 18 clear_certificates 0 4 1369 34 OpenSSLWrapper::clear_certificates 0 1 455 200
/**
 * Removes all the certificates from the global store, including the compiled-
 * in certificates loaded from ca_bundle_data.c.  You can add new certificates
 * by calling load_certificates().
 */
46
void OpenSSLWrapper::clear_certificates(void);

1129 17 load_certificates 0 4 1369 33 OpenSSLWrapper::load_certificates 0 1 456 436
/**
 * Reads the PEM-formatted certificate(s) (delimited by -----BEGIN
 * CERTIFICATE----- and -----END CERTIFICATE-----) from the indicated file and
 * adds them to the global store object, retrieved via get_x509_store().
 *
 * Returns the number of certificates read on success, or 0 on failure.
 *
 * You should call this only with trusted, locally-stored certificates; not
 * with certificates received from an untrusted source.
 */
64
int OpenSSLWrapper::load_certificates(Filename const &filename);

1130 30 load_certificates_from_pem_ram 0 4 1369 46 OpenSSLWrapper::load_certificates_from_pem_ram 0 2 457 458 754
/**
 * Reads a chain of trusted certificates from the indicated data buffer and
 * adds them to the X509_STORE object.  The data buffer should be PEM-
 * formatted.  Returns the number of certificates read on success, or 0 on
 * failure.
 *
 * You should call this only with trusted, locally-stored certificates; not
 * with certificates received from an untrusted source.
 */

/**
 * Reads a chain of trusted certificates from the indicated data buffer and
 * adds them to the X509_STORE object.  The data buffer should be PEM-
 * formatted.  Returns the number of certificates read on success, or 0 on
 * failure.
 *
 * You should call this only with trusted, locally-stored certificates; not
 * with certificates received from an untrusted source.
 */
176
int OpenSSLWrapper::load_certificates_from_pem_ram(char const *data, std::size_t data_size);
inline int OpenSSLWrapper::load_certificates_from_pem_ram(std::string const &data);

1131 30 load_certificates_from_der_ram 0 4 1369 46 OpenSSLWrapper::load_certificates_from_der_ram 0 2 459 460 754
/**
 * Reads a chain of trusted certificates from the indicated data buffer and
 * adds them to the X509_STORE object.  The data buffer should be DER-
 * formatted.  Returns the number of certificates read on success, or 0 on
 * failure.
 *
 * You should call this only with trusted, locally-stored certificates; not
 * with certificates received from an untrusted source.
 */

/**
 * Reads a chain of trusted certificates from the indicated data buffer and
 * adds them to the X509_STORE object.  The data buffer should be DER-
 * formatted.  Returns the number of certificates read on success, or 0 on
 * failure.
 *
 * You should call this only with trusted, locally-stored certificates; not
 * with certificates received from an untrusted source.
 */
176
int OpenSSLWrapper::load_certificates_from_der_ram(char const *data, std::size_t data_size);
inline int OpenSSLWrapper::load_certificates_from_der_ram(std::string const &data);

1132 14 get_x509_store 0 4 1369 30 OpenSSLWrapper::get_x509_store 0 1 461 378
/**
 * Returns the global X509_STORE object.
 *
 * It has to be a global object, because OpenSSL seems to store some global
 * pointers associated with this object whether you want it to or not, and
 * keeping independent copies of a local X509_STORE object doesn't seem to
 * work that well.  So, we have one store that keeps all certificates the
 * application might need.
 */
49
X509_STORE *OpenSSLWrapper::get_x509_store(void);

1133 17 notify_ssl_errors 0 4 1369 33 OpenSSLWrapper::notify_ssl_errors 0 1 462 277
/**
 * A convenience function that is itself a wrapper around the OpenSSL
 * convenience function to output the recent OpenSSL errors.  This function
 * sends the error string to express_cat.warning().  If REPORT_OPENSSL_ERRORS
 * is not defined, the function does nothing.
 */
45
void OpenSSLWrapper::notify_ssl_errors(void);

1134 23 notify_debug_ssl_errors 0 4 1369 39 OpenSSLWrapper::notify_debug_ssl_errors 0 1 463 84
/**
 * As notify_ssl_errors(), but sends the output to debug instead of warning.
 */
51
void OpenSSLWrapper::notify_debug_ssl_errors(void);

1135 14 get_global_ptr 0 4 1369 30 OpenSSLWrapper::get_global_ptr 0 1 464 10
/**
 *
 */
60
static OpenSSLWrapper *OpenSSLWrapper::get_global_ptr(void);

1136 11 SubfileInfo 0 260 1370 24 SubfileInfo::SubfileInfo 0 4 465 466 467 468 46
/**
 *
 */

/**
 *
 */

/**
 *
 */

/**
 *
 */
321
inline SubfileInfo::SubfileInfo(void);
inline explicit SubfileInfo::SubfileInfo(FileReference const *file, std::streamoff start, std::streamsize size);
inline explicit SubfileInfo::SubfileInfo(Filename const &filename, std::streamoff start, std::streamsize size);
inline SubfileInfo::SubfileInfo(SubfileInfo const &copy);

1137 10 operator = 0 4 1370 23 SubfileInfo::operator = 0 1 469 0
61
inline void SubfileInfo::operator =(SubfileInfo const &copy);

1138 8 is_empty 0 4 1370 21 SubfileInfo::is_empty 0 1 470 98
/**
 * Returns true if this SubfileInfo doesn't define any file, false if it has
 * real data.
 */
46
inline bool SubfileInfo::is_empty(void) const;

1139 8 get_file 0 4 1370 21 SubfileInfo::get_file 0 1 471 63
/**
 * Returns the FileReference that represents this file.
 */
62
inline FileReference const *SubfileInfo::get_file(void) const;

1140 12 get_filename 0 4 1370 25 SubfileInfo::get_filename 0 1 472 38
/**
 * A shortcut to the filename.
 */
61
inline Filename const &SubfileInfo::get_filename(void) const;

1141 9 get_start 0 4 1370 22 SubfileInfo::get_start 0 1 473 77
/**
 * Returns the offset within the file at which this file data begins.
 */
57
inline std::streamoff SubfileInfo::get_start(void) const;

1142 8 get_size 0 4 1370 21 SubfileInfo::get_size 0 1 474 115
/**
 * Returns the number of consecutive bytes, beginning at get_start(), that
 * correspond to this file data.
 */
57
inline std::streamsize SubfileInfo::get_size(void) const;

1143 6 output 0 4 1370 19 SubfileInfo::output 0 1 475 10
/**
 *
 */
50
void SubfileInfo::output(std::ostream &out) const;

1144 12 ~SubfileInfo 0 516 1370 25 SubfileInfo::~SubfileInfo 0 0 0
32
SubfileInfo::~SubfileInfo(void);

1145 15 get_file_system 0 6 1371 28 VirtualFile::get_file_system 0 1 476 0
72
virtual VirtualFileSystem *VirtualFile::get_file_system(void) const = 0;

1146 12 get_filename 0 6 1371 25 VirtualFile::get_filename 0 1 477 0
59
virtual Filename VirtualFile::get_filename(void) const = 0;

1147 21 get_original_filename 0 4 1371 34 VirtualFile::get_original_filename 0 1 478 166
/**
 * Returns the original filename as it was used to locate this VirtualFile.
 * This is usually, but not always, the same string returned by
 * get_filename().
 */
70
inline Filename const &VirtualFile::get_original_filename(void) const;

1148 8 has_file 0 6 1371 21 VirtualFile::has_file 0 1 479 61
/**
 * Returns true if this file exists, false otherwise.
 */
47
virtual bool VirtualFile::has_file(void) const;

1149 12 is_directory 0 6 1371 25 VirtualFile::is_directory 0 1 480 117
/**
 * Returns true if this file represents a directory (and scan_directory() may
 * be called), false otherwise.
 */
51
virtual bool VirtualFile::is_directory(void) const;

1150 15 is_regular_file 0 6 1371 28 VirtualFile::is_regular_file 0 1 481 115
/**
 * Returns true if this file represents a regular file (and read_file() may be
 * called), false otherwise.
 */
54
virtual bool VirtualFile::is_regular_file(void) const;

1151 11 is_writable 0 6 1371 24 VirtualFile::is_writable 0 1 482 153
/**
 * Returns true if this file may be written to, which implies write_file() may
 * be called (unless it is a directory instead of a regular file).
 */
50
virtual bool VirtualFile::is_writable(void) const;

1152 11 delete_file 0 6 1371 24 VirtualFile::delete_file 0 1 483 199
/**
 * Attempts to delete this file or directory.  This can remove a single file
 * or an empty directory.  It will not remove a nonempty directory.  Returns
 * true on success, false on failure.
 */
44
virtual bool VirtualFile::delete_file(void);

1153 11 rename_file 0 6 1371 24 VirtualFile::rename_file 0 1 484 589
/**
 * Attempts to move or rename this file or directory.  If the original file is
 * an ordinary file, it will quietly replace any already-existing file in the
 * new filename (but not a directory).  If the original file is a directory,
 * the new filename must not already exist.
 *
 * If the file is a directory, the new filename must be within the same mount
 * point.  If the file is an ordinary file, the new filename may be anywhere;
 * but if it is not within the same mount point then the rename operation is
 * automatically performed as a two-step copy-and-delete operation.
 */
61
virtual bool VirtualFile::rename_file(VirtualFile *new_file);

1154 9 copy_file 0 6 1371 22 VirtualFile::copy_file 0 1 485 123
/**
 * Attempts to copy the contents of this file to the indicated file.  Returns
 * true on success, false on failure.
 */
59
virtual bool VirtualFile::copy_file(VirtualFile *new_file);

1155 14 scan_directory 0 4 1371 27 VirtualFile::scan_directory 0 1 486 247
/**
 * If the file represents a directory (that is, is_directory() returns true),
 * this returns the list of files within the directory at the current time.
 * Returns NULL if the file is not a directory or if the directory cannot be
 * read.
 */
69
PointerTo< VirtualFileList > VirtualFile::scan_directory(void) const;

1156 6 output 0 4 1371 19 VirtualFile::output 0 1 487 10
/**
 *
 */
50
void VirtualFile::output(std::ostream &out) const;

1157 2 ls 0 4 1371 15 VirtualFile::ls 0 1 488 66
/**
 * If the file represents a directory, lists its contents.
 */
60
void VirtualFile::ls(std::ostream &out = ::std::cout) const;

1158 6 ls_all 0 4 1371 19 VirtualFile::ls_all 0 1 489 113
/**
 * If the file represents a directory, recursively lists its contents and
 * those of all subdirectories.
 */
64
void VirtualFile::ls_all(std::ostream &out = ::std::cout) const;

1159 9 read_file 0 4 1371 22 VirtualFile::read_file 0 1 490 352
/**
 * Returns the entire contents of the file as a string.
 */

/**
 * Fills up the indicated string with the contents of the file, if it is a
 * regular file.  Returns true on success, false otherwise.
 */

/**
 * Fills up the indicated pvector with the contents of the file, if it is a
 * regular file.  Returns true on success, false otherwise.
 */
57
PyObject *VirtualFile::read_file(bool auto_unwrap) const;

1160 14 open_read_file 0 6 1371 27 VirtualFile::open_read_file 0 1 491 179
/**
 * Opens the file for reading.  Returns a newly allocated istream on success
 * (which you should eventually delete when you are done reading). Returns
 * NULL on failure.
 */
74
virtual std::istream *VirtualFile::open_read_file(bool auto_unwrap) const;

1161 15 close_read_file 0 6 1371 28 VirtualFile::close_read_file 0 1 492 243
/**
 * Closes a file opened by a previous call to open_read_file().  This really
 * just deletes the istream pointer, but it is recommended to use this
 * interface instead of deleting it explicitly, to help work around compiler
 * issues.
 */
70
virtual void VirtualFile::close_read_file(std::istream *stream) const;

1162 19 was_read_successful 0 6 1371 32 VirtualFile::was_read_successful 0 1 493 324
/**
 * Call this method after a reading the istream returned by open_read_file()
 * to completion.  If it returns true, the file was read completely and
 * without error; if it returns false, there may have been some errors or a
 * truncated file read.  This is particularly likely if the stream is a
 * VirtualFileHTTP.
 */
58
virtual bool VirtualFile::was_read_successful(void) const;

1163 10 write_file 0 4 1371 23 VirtualFile::write_file 0 1 494 197
/**
 * Writes the entire contents of the file as a string, if it is writable.
 */

/**
 * Writes the indicated data to the file, if it is writable.  Returns true on
 * success, false otherwise.
 */
66
PyObject *VirtualFile::write_file(PyObject *data, bool auto_wrap);

1164 15 open_write_file 0 6 1371 28 VirtualFile::open_write_file 0 1 495 179
/**
 * Opens the file for writing.  Returns a newly allocated ostream on success
 * (which you should eventually delete when you are done writing). Returns
 * NULL on failure.
 */
82
virtual std::ostream *VirtualFile::open_write_file(bool auto_wrap, bool truncate);

1165 16 open_append_file 0 6 1371 29 VirtualFile::open_append_file 0 1 496 180
/**
 * Works like open_write_file(), but the file is opened in append mode.  Like
 * open_write_file, the returned pointer should eventually be passed to
 * close_write_file().
 */
58
virtual std::ostream *VirtualFile::open_append_file(void);

1166 16 close_write_file 0 6 1371 29 VirtualFile::close_write_file 0 1 497 244
/**
 * Closes a file opened by a previous call to open_write_file().  This really
 * just deletes the ostream pointer, but it is recommended to use this
 * interface instead of deleting it explicitly, to help work around compiler
 * issues.
 */
65
virtual void VirtualFile::close_write_file(std::ostream *stream);

1167 20 open_read_write_file 0 6 1371 33 VirtualFile::open_read_write_file 0 1 498 180
/**
 * Opens the file for writing.  Returns a newly allocated iostream on success
 * (which you should eventually delete when you are done writing). Returns
 * NULL on failure.
 */
72
virtual std::iostream *VirtualFile::open_read_write_file(bool truncate);

1168 21 open_read_append_file 0 6 1371 34 VirtualFile::open_read_append_file 0 1 499 194
/**
 * Works like open_read_write_file(), but the file is opened in append mode.
 * Like open_read_write_file, the returned pointer should eventually be passed
 * to close_read_write_file().
 */
64
virtual std::iostream *VirtualFile::open_read_append_file(void);

1169 21 close_read_write_file 0 6 1371 34 VirtualFile::close_read_write_file 0 1 500 250
/**
 * Closes a file opened by a previous call to open_read_write_file().  This
 * really just deletes the iostream pointer, but it is recommended to use this
 * interface instead of deleting it explicitly, to help work around compiler
 * issues.
 */
71
virtual void VirtualFile::close_read_write_file(std::iostream *stream);

1170 13 get_file_size 0 6 1371 26 VirtualFile::get_file_size 0 2 501 502 329
/**
 * Returns the current size on disk (or wherever it is) of the already-open
 * file.  Pass in the stream that was returned by open_read_file(); some
 * implementations may require this stream to determine the size.
 */

/**
 * Returns the current size on disk (or wherever it is) of the file before it
 * has been opened.
 */
143
virtual std::streamsize VirtualFile::get_file_size(std::istream *stream) const;
virtual std::streamsize VirtualFile::get_file_size(void) const;

1171 13 get_timestamp 0 6 1371 26 VirtualFile::get_timestamp 0 1 503 434
/**
 * Returns a time_t value that represents the time the file was last modified,
 * to within whatever precision the operating system records this information
 * (on a Windows95 system, for instance, this may only be accurate to within 2
 * seconds).
 *
 * If the timestamp cannot be determined, either because it is not supported
 * by the operating system or because there is some error (such as file not
 * found), returns 0.
 */
54
virtual time_t VirtualFile::get_timestamp(void) const;

1172 15 get_system_info 0 6 1371 28 VirtualFile::get_system_info 0 1 504 330
/**
 * Populates the SubfileInfo structure with the data representing where the
 * file actually resides on disk, if this is knowable.  Returns true if the
 * file might reside on disk, and the info is populated, or false if it does
 * not (or it is not known where the file resides), in which case the info is
 * meaningless.
 */
61
virtual bool VirtualFile::get_system_info(SubfileInfo &info);

1173 14 get_class_type 0 4 1371 27 VirtualFile::get_class_type 0 1 505 0
52
static TypeHandle VirtualFile::get_class_type(void);

1174 12 ~VirtualFile 0 516 1371 25 VirtualFile::~VirtualFile 0 0 0
32
VirtualFile::~VirtualFile(void);

1175 14 get_class_type 0 4 1372 36 VirtualFileComposite::get_class_type 0 1 506 0
61
static TypeHandle VirtualFileComposite::get_class_type(void);

1176 21 ~VirtualFileComposite 0 516 1372 43 VirtualFileComposite::~VirtualFileComposite 0 0 0
50
VirtualFileComposite::~VirtualFileComposite(void);

1177 15 get_file_system 0 4 1373 33 VirtualFileMount::get_file_system 0 1 507 68
/**
 * Returns the file system this mount object is attached to.
 */
72
inline VirtualFileSystem *VirtualFileMount::get_file_system(void) const;

1178 15 get_mount_point 0 4 1373 33 VirtualFileMount::get_mount_point 0 1 508 161
/**
 * Returns the name of the directory within the virtual file system that this
 * mount object is attached to.  This directory name will end with a slash.
 */
69
inline Filename const &VirtualFileMount::get_mount_point(void) const;

1179 15 get_mount_flags 0 4 1373 33 VirtualFileMount::get_mount_flags 0 1 509 100
/**
 * Returns the set of flags passed by the user to the
 * VirtualFileSystem::mount() command.
 */
57
inline int VirtualFileMount::get_mount_flags(void) const;

1180 6 output 0 6 1373 24 VirtualFileMount::output 0 1 510 10
/**
 *
 */
63
virtual void VirtualFileMount::output(std::ostream &out) const;

1181 5 write 0 6 1373 23 VirtualFileMount::write 0 1 511 10
/**
 *
 */
62
virtual void VirtualFileMount::write(std::ostream &out) const;

1182 14 get_class_type 0 4 1373 32 VirtualFileMount::get_class_type 0 1 512 0
57
static TypeHandle VirtualFileMount::get_class_type(void);

1183 25 VirtualFileMountMultifile 0 260 1374 52 VirtualFileMountMultifile::VirtualFileMountMultifile 0 1 513 10
/**
 *
 */
82
inline VirtualFileMountMultifile::VirtualFileMountMultifile(Multifile *multifile);

1184 13 get_multifile 0 4 1374 40 VirtualFileMountMultifile::get_multifile 0 1 514 76
/**
 * Returns the Multifile pointer that this mount object is based on.
 */
71
inline Multifile *VirtualFileMountMultifile::get_multifile(void) const;

1185 14 get_class_type 0 4 1374 41 VirtualFileMountMultifile::get_class_type 0 1 515 0
66
static TypeHandle VirtualFileMountMultifile::get_class_type(void);

1186 23 VirtualFileMountRamdisk 0 260 1375 48 VirtualFileMountRamdisk::VirtualFileMountRamdisk 0 1 516 10
/**
 *
 */
55
VirtualFileMountRamdisk::VirtualFileMountRamdisk(void);

1187 14 get_class_type 0 4 1375 39 VirtualFileMountRamdisk::get_class_type 0 1 517 0
64
static TypeHandle VirtualFileMountRamdisk::get_class_type(void);

1188 24 ~VirtualFileMountRamdisk 0 516 1375 49 VirtualFileMountRamdisk::~VirtualFileMountRamdisk 0 0 0
56
VirtualFileMountRamdisk::~VirtualFileMountRamdisk(void);

1189 22 VirtualFileMountSystem 0 260 1376 46 VirtualFileMountSystem::VirtualFileMountSystem 0 1 518 10
/**
 *
 */
89
inline VirtualFileMountSystem::VirtualFileMountSystem(Filename const &physical_filename);

1190 21 get_physical_filename 0 4 1376 45 VirtualFileMountSystem::get_physical_filename 0 1 519 112
/**
 * Returns the name of the source file on the OS filesystem of the directory
 * or file that is mounted.
 */
81
inline Filename const &VirtualFileMountSystem::get_physical_filename(void) const;

1191 14 get_class_type 0 4 1376 38 VirtualFileMountSystem::get_class_type 0 1 520 0
63
static TypeHandle VirtualFileMountSystem::get_class_type(void);

1192 23 ~VirtualFileMountSystem 0 516 1376 47 VirtualFileMountSystem::~VirtualFileMountSystem 0 0 0
54
VirtualFileMountSystem::~VirtualFileMountSystem(void);

1193 9 get_mount 0 4 1377 28 VirtualFileSimple::get_mount 0 1 521 69
/**
 * Returns the VirtualFileMount this file is associated with.
 */
66
inline VirtualFileMount *VirtualFileSimple::get_mount(void) const;

1194 19 is_implicit_pz_file 0 4 1377 38 VirtualFileSimple::is_implicit_pz_file 0 1 522 174
/**
 * Returns true if this file is a .pz file that should be implicitly
 * decompressed on load, or false if it is not a .pz file or if it should not
 * be decompressed.
 */
63
inline bool VirtualFileSimple::is_implicit_pz_file(void) const;

1195 14 get_class_type 0 4 1377 33 VirtualFileSimple::get_class_type 0 1 523 0
58
static TypeHandle VirtualFileSimple::get_class_type(void);

1196 18 ~VirtualFileSimple 0 516 1377 37 VirtualFileSimple::~VirtualFileSimple 0 0 0
44
VirtualFileSimple::~VirtualFileSimple(void);

1197 13 TemporaryFile 0 260 1378 28 TemporaryFile::TemporaryFile 0 2 524 525 10
/**
 *
 */
141
inline explicit TemporaryFile::TemporaryFile(Filename const &filename);
inline TemporaryFile::TemporaryFile(TemporaryFile const &) = default;

1198 14 get_class_type 0 4 1378 29 TemporaryFile::get_class_type 0 1 526 0
54
static TypeHandle TemporaryFile::get_class_type(void);

1199 17 IDecompressStream 0 260 1379 36 IDecompressStream::IDecompressStream 0 2 527 528 22
/**
 *
 */

/**
 *
 */
144
inline IDecompressStream::IDecompressStream(void);
inline explicit IDecompressStream::IDecompressStream(std::istream *source, bool owns_source);

1200 4 open 0 4 1379 23 IDecompressStream::open 0 1 529 10
/**
 *
 */
90
inline IDecompressStream &IDecompressStream::open(std::istream *source, bool owns_source);

1201 5 close 0 4 1379 24 IDecompressStream::close 0 1 530 118
/**
 * Resets the ZStream to empty, but does not actually close the source istream
 * unless owns_source was true.
 */
57
inline IDecompressStream &IDecompressStream::close(void);

1202 18 ~IDecompressStream 0 516 1379 37 IDecompressStream::~IDecompressStream 0 0 0
44
IDecompressStream::~IDecompressStream(void);

1203 15 OCompressStream 0 260 1380 32 OCompressStream::OCompressStream 0 2 531 532 22
/**
 *
 */

/**
 *
 */
159
inline OCompressStream::OCompressStream(void);
inline explicit OCompressStream::OCompressStream(std::ostream *dest, bool owns_dest, int compression_level = 6);

1204 4 open 0 4 1380 21 OCompressStream::open 0 1 533 10
/**
 *
 */
109
inline OCompressStream &OCompressStream::open(std::ostream *dest, bool owns_dest, int compression_level = 6);

1205 5 close 0 4 1380 22 OCompressStream::close 0 1 534 114
/**
 * Resets the ZStream to empty, but does not actually close the dest ostream
 * unless owns_dest was true.
 */
53
inline OCompressStream &OCompressStream::close(void);

1206 16 ~OCompressStream 0 516 1380 33 OCompressStream::~OCompressStream 0 0 0
40
OCompressStream::~OCompressStream(void);

1207 13 get_num_files 0 4 1381 30 VirtualFileList::get_num_files 0 1 536 51
/**
 * Returns the number of files in the list.
 */
62
inline std::size_t VirtualFileList::get_num_files(void) const;

1208 8 get_file 0 4 1381 25 VirtualFileList::get_file 0 1 537 44
/**
 * Returns the nth file in the list.
 */
67
inline VirtualFile *VirtualFileList::get_file(std::size_t n) const;

1209 11 operator [] 0 4 1381 28 VirtualFileList::operator [] 0 1 538 44
/**
 * Returns the nth file in the list.
 */
70
inline VirtualFile *VirtualFileList::operator [](std::size_t n) const;

1210 4 size 0 4 1381 21 VirtualFileList::size 0 1 539 51
/**
 * Returns the number of files in the list.
 */
53
inline std::size_t VirtualFileList::size(void) const;

1211 11 operator += 0 4 1381 28 VirtualFileList::operator += 0 1 540 0
71
inline void VirtualFileList::operator +=(VirtualFileList const &other);

1212 10 operator + 0 4 1381 27 VirtualFileList::operator + 0 1 541 0
87
inline VirtualFileList VirtualFileList::operator +(VirtualFileList const &other) const;

1213 15 VirtualFileList 0 260 1381 32 VirtualFileList::VirtualFileList 0 1 535 10
/**
 *
 */
75
inline VirtualFileList::VirtualFileList(VirtualFileList const &) = default;

1214 17 VirtualFileSystem 0 260 1382 36 VirtualFileSystem::VirtualFileSystem 0 1 542 10
/**
 *
 */
43
VirtualFileSystem::VirtualFileSystem(void);

1215 18 ~VirtualFileSystem 0 516 1382 37 VirtualFileSystem::~VirtualFileSystem 0 0 10
/**
 *
 */
44
VirtualFileSystem::~VirtualFileSystem(void);

1216 5 mount 0 4 1382 24 VirtualFileSystem::mount 0 3 543 544 545 1288
/**
 * Mounts the indicated Multifile at the given mount point.
 */

/**
 * Mounts the indicated system file or directory at the given mount point.  If
 * the named file is a directory, mounts the directory.  If the named file is
 * a Multifile, mounts it as a Multifile.  Returns true on success, false on
 * failure.
 *
 * A given system directory may be mounted to multiple different mount point,
 * and the same mount point may share multiple system directories.  In the
 * case of ambiguities (that is, two different files with exactly the same
 * full pathname), the most-recently mounted system wins.
 *
 * The filename specified as the first parameter must refer to a real,
 * physical filename on disk; it cannot be a virtual file already appearing
 * within the vfs filespace.  However, it is possible to mount such a file;
 * see mount_loop() for this.
 *
 * Note that a mounted VirtualFileSystem directory is fully case-sensitive,
 * unlike the native Windows file system, so you must refer to files within
 * the virtual file system with exactly the right case.
 */

/**
 * Adds the given VirtualFileMount object to the mount list.  This is a lower-
 * level function than the other flavors of mount(); it requires you to create
 * a VirtualFileMount object specifically.
 */
328
bool VirtualFileSystem::mount(Multifile *multifile, Filename const &mount_point, int flags);
bool VirtualFileSystem::mount(Filename const &physical_filename, Filename const &mount_point, int flags, std::string const &password = "");
bool VirtualFileSystem::mount(VirtualFileMount *mount, Filename const &mount_point, int flags);

1217 10 mount_loop 0 4 1382 29 VirtualFileSystem::mount_loop 0 1 546 587
/**
 * This is similar to mount(), but it receives the name of a Multifile that
 * already appears within the virtual file system.  It can be used to mount a
 * Multifile that is itself hosted within a virtually-mounted Multifile.
 *
 * This interface can also be used to mount physical files (that appear within
 * the virtual filespace), but it cannot be used to mount directories.  Use
 * mount() if you need to mount a directory.
 *
 * Note that there is additional overhead, in the form of additional buffer
 * copies of the data, for recursively mounting a multifile like this.
 */
143
bool VirtualFileSystem::mount_loop(Filename const &virtual_filename, Filename const &mount_point, int flags, std::string const &password = "");

1218 7 unmount 0 4 1382 26 VirtualFileSystem::unmount 0 3 547 548 549 419
/**
 * Unmounts all appearances of the indicated Multifile from the file system.
 * Returns the number of appearances unmounted.
 */

/**
 * Unmounts all appearances of the indicated directory name or multifile name
 * from the file system.  Returns the number of appearances unmounted.
 */

/**
 * Unmounts the indicated VirtualFileMount object from the file system.
 * Returns the number of appearances unmounted.
 */
177
int VirtualFileSystem::unmount(Multifile *multifile);
int VirtualFileSystem::unmount(Filename const &physical_filename);
int VirtualFileSystem::unmount(VirtualFileMount *mount);

1219 13 unmount_point 0 4 1382 32 VirtualFileSystem::unmount_point 0 1 550 136
/**
 * Unmounts all systems attached to the given mount point from the file
 * system.  Returns the number of appearances unmounted.
 */
66
int VirtualFileSystem::unmount_point(Filename const &mount_point);

1220 11 unmount_all 0 4 1382 30 VirtualFileSystem::unmount_all 0 1 551 96
/**
 * Unmounts all files from the file system.  Returns the number of systems
 * unmounted.
 */
41
int VirtualFileSystem::unmount_all(void);

1221 14 get_num_mounts 0 4 1382 33 VirtualFileSystem::get_num_mounts 0 1 552 65
/**
 * Returns the number of individual mounts in the system.
 */
50
int VirtualFileSystem::get_num_mounts(void) const;

1222 9 get_mount 0 4 1382 28 VirtualFileSystem::get_mount 0 1 553 47
/**
 * Returns the nth mount in the system.
 */
72
PointerTo< VirtualFileMount > VirtualFileSystem::get_mount(int n) const;

1223 5 clear 0 4 1385 40 PointerToBase< VirtualFileMount >::clear 0 1 593 0
59
inline void PointerToBase< VirtualFileMount >::clear(void);

1224 6 output 0 4 1385 41 PointerToBase< VirtualFileMount >::output 0 1 594 0
72
void PointerToBase< VirtualFileMount >::output(std::ostream &out) const;

1225 9 PointerTo 0 260 1384 40 PointerTo< VirtualFileMount >::PointerTo 0 4 584 585 586 587 0
353
inline constexpr PointerTo< VirtualFileMount >::PointerTo(void) noexcept = default;
inline explicit constexpr PointerTo< VirtualFileMount >::PointerTo(decltype(nullptr) ) noexcept;
inline PointerTo< VirtualFileMount >::PointerTo(VirtualFileMount *ptr) noexcept;
inline PointerTo< VirtualFileMount >::PointerTo(PointerTo< VirtualFileMount > const &copy);

1226 1 p 0 4 1384 32 PointerTo< VirtualFileMount >::p 0 1 588 289
// If your base class is a derivative of TypedObject, you might want to use
// the DCAST macro defined in typedObject.h instead, e.g.  DCAST(MyType,
// ptr).  This provides a clean downcast that doesn't require .p() or any
// double-casting, and it can be run-time checked for correctness.
82
constexpr VirtualFileMount *PointerTo< VirtualFileMount >::p(void) const noexcept;

1227 10 operator = 0 4 1384 41 PointerTo< VirtualFileMount >::operator = 0 2 589 590 0
175
inline void PointerTo< VirtualFileMount >::operator =(VirtualFileMount *ptr);
inline void PointerTo< VirtualFileMount >::operator =(PointerTo< VirtualFileMount > const &copy);

1228 7 is_null 0 4 1384 38 PointerTo< VirtualFileMount >::is_null 0 1 591 0
63
inline bool PointerTo< VirtualFileMount >::is_null(void) const;

1229 5 clear 0 4 1384 36 PointerTo< VirtualFileMount >::clear 0 1 592 0
55
inline void PointerTo< VirtualFileMount >::clear(void);

1230 10 ~PointerTo 0 516 1384 41 PointerTo< VirtualFileMount >::~PointerTo 0 0 0
48
PointerTo< VirtualFileMount >::~PointerTo(void);

1231 5 chdir 0 4 1382 24 VirtualFileSystem::chdir 0 1 554 171
/**
 * Changes the current directory.  This is used to resolve relative pathnames
 * in get_file() and/or find_file().  Returns true if successful, false
 * otherwise.
 */
61
bool VirtualFileSystem::chdir(Filename const &new_directory);

1232 7 get_cwd 0 4 1382 26 VirtualFileSystem::get_cwd 0 1 555 60
/**
 * Returns the current directory name.  See chdir().
 */
48
Filename VirtualFileSystem::get_cwd(void) const;

1233 14 make_directory 0 4 1382 33 VirtualFileSystem::make_directory 0 1 556 263
/**
 * Attempts to create a directory within the file system.  Returns true on
 * success, false on failure (for instance, because the parent directory does
 * not exist, or is read-only).  If the directory already existed prior to
 * this call, returns true.
 */
65
bool VirtualFileSystem::make_directory(Filename const &filename);

1234 19 make_directory_full 0 4 1382 38 VirtualFileSystem::make_directory_full 0 1 557 169
/**
 * Attempts to create a directory within the file system.  Will also create
 * any intervening directories needed.  Returns true on success, false on
 * failure.
 */
70
bool VirtualFileSystem::make_directory_full(Filename const &filename);

1235 8 get_file 0 4 1382 27 VirtualFileSystem::get_file 0 1 558 537
/**
 * Looks up the file by the indicated name in the file system.  Returns a
 * VirtualFile pointer representing the file if it is found, or NULL if it is
 * not.
 *
 * If status_only is true, the file will be checked for existence and length
 * and so on, but the returned file's contents cannot be read.  This is an
 * optimization which is especially important for certain mount types, for
 * instance HTTP, for which opening a file to determine its status is
 * substantially less expensive than opening it to read its contents.
 */
111
PointerTo< VirtualFile > VirtualFileSystem::get_file(Filename const &filename, bool status_only = false) const;

1236 11 create_file 0 4 1382 30 VirtualFileSystem::create_file 0 1 559 298
/**
 * Attempts to create a file by the indicated name in the filesystem, if
 * possible, and returns it.  If a file by this name already exists, returns
 * the same thing as get_file().  If the filename is located within a read-
 * only directory, or the directory doesn't exist, returns NULL.
 */
82
PointerTo< VirtualFile > VirtualFileSystem::create_file(Filename const &filename);

1237 9 find_file 0 4 1382 28 VirtualFileSystem::find_file 0 1 560 173
/**
 * Uses the indicated search path to find the file within the file system.
 * Returns the first occurrence of the file found, or NULL if the file cannot
 * be found.
 */
143
PointerTo< VirtualFile > VirtualFileSystem::find_file(Filename const &filename, DSearchPath const &searchpath, bool status_only = false) const;

1238 11 delete_file 0 4 1382 30 VirtualFileSystem::delete_file 0 1 561 208
/**
 * Attempts to delete the indicated file or directory.  This can remove a
 * single file or an empty directory.  It will not remove a nonempty
 * directory.  Returns true on success, false on failure.
 */
62
bool VirtualFileSystem::delete_file(Filename const &filename);

1239 11 rename_file 0 4 1382 30 VirtualFileSystem::rename_file 0 1 562 599
/**
 * Attempts to move or rename the indicated file or directory.  If the
 * original file is an ordinary file, it will quietly replace any already-
 * existing file in the new filename (but not a directory).  If the original
 * file is a directory, the new filename must not already exist.
 *
 * If the file is a directory, the new filename must be within the same mount
 * point.  If the file is an ordinary file, the new filename may be anywhere;
 * but if it is not within the same mount point then the rename operation is
 * automatically performed as a two-step copy-and-delete operation.
 */
97
bool VirtualFileSystem::rename_file(Filename const &orig_filename, Filename const &new_filename);

1240 9 copy_file 0 4 1382 28 VirtualFileSystem::copy_file 0 1 563 131
/**
 * Attempts to copy the contents of the indicated file to the indicated file.
 * Returns true on success, false on failure.
 */
95
bool VirtualFileSystem::copy_file(Filename const &orig_filename, Filename const &new_filename);

1241 16 resolve_filename 0 4 1382 35 VirtualFileSystem::resolve_filename 0 1 564 174
/**
 * Searches the given search path for the filename.  If it is found, updates
 * the filename to the full pathname found and returns true; otherwise,
 * returns false.
 */
147
bool VirtualFileSystem::resolve_filename(Filename &filename, DSearchPath const &searchpath, std::string const &default_extension = string()) const;

1242 14 find_all_files 0 4 1382 33 VirtualFileSystem::find_all_files 0 1 565 363
/**
 * Searches all the directories in the search list for the indicated file, in
 * order.  Fills up the results list with *all* of the matching filenames
 * found, if any.  Returns the number of matches found.
 *
 * It is the responsibility of the the caller to clear the results list first;
 * otherwise, the newly-found files will be appended to the list.
 */
132
int VirtualFileSystem::find_all_files(Filename const &filename, DSearchPath const &searchpath, DSearchPath::Results &results) const;

1243 6 exists 0 4 1382 25 VirtualFileSystem::exists 0 1 566 71
/**
 * Convenience function; returns true if the named file exists.
 */
70
inline bool VirtualFileSystem::exists(Filename const &filename) const;

1244 12 is_directory 0 4 1382 31 VirtualFileSystem::is_directory 0 1 567 93
/**
 * Convenience function; returns true if the named file exists and is a
 * directory.
 */
76
inline bool VirtualFileSystem::is_directory(Filename const &filename) const;

1245 15 is_regular_file 0 4 1382 34 VirtualFileSystem::is_regular_file 0 1 568 96
/**
 * Convenience function; returns true if the named file exists and is a
 * regular file.
 */
79
inline bool VirtualFileSystem::is_regular_file(Filename const &filename) const;

1246 14 scan_directory 0 4 1382 33 VirtualFileSystem::scan_directory 0 1 569 247
/**
 * If the file represents a directory (that is, is_directory() returns true),
 * this returns the list of files within the directory at the current time.
 * Returns NULL if the file is not a directory or if the directory cannot be
 * read.
 */
102
inline PointerTo< VirtualFileList > VirtualFileSystem::scan_directory(Filename const &filename) const;

1247 2 ls 0 4 1382 21 VirtualFileSystem::ls 0 1 570 80
/**
 * Convenience function; lists the files within the indicated directory.
 */
66
inline void VirtualFileSystem::ls(Filename const &filename) const;

1248 6 ls_all 0 4 1382 25 VirtualFileSystem::ls_all 0 1 571 117
/**
 * Convenience function; lists the files within the indicated directory, and
 * all files below, recursively.
 */
70
inline void VirtualFileSystem::ls_all(Filename const &filename) const;

1249 5 write 0 4 1382 24 VirtualFileSystem::write 0 1 572 75
/**
 * Print debugging information.  (e.g.  from Python or gdb prompt).
 */
55
void VirtualFileSystem::write(std::ostream &out) const;

1250 14 get_global_ptr 0 4 1382 33 VirtualFileSystem::get_global_ptr 0 1 573 423
/**
 * Returns the default global VirtualFileSystem.  You may create your own
 * personal VirtualFileSystem objects and use them for whatever you like, but
 * Panda will attempt to load models and stuff from this default object.
 *
 * Initially, the global VirtualFileSystem is set up to mount the OS
 * filesystem to root; i.e.  it is equivalent to the OS filesystem.  This may
 * be subsequently adjusted by the user.
 */
66
static VirtualFileSystem *VirtualFileSystem::get_global_ptr(void);

1251 9 read_file 0 4 1382 28 VirtualFileSystem::read_file 0 1 574 1244
/**
 * Convenience function; returns the entire contents of the indicated file as
 * a string.
 *
 * If auto_unwrap is true, an explicitly-named .pz/.gz file is automatically
 * decompressed and the decompressed contents are returned.  This is different
 * than vfs-implicit-pz, which will automatically decompress a file if the
 * extension .pz is *not* given.
 */

/**
 * Convenience function; fills the string up with the data from the indicated
 * file, if it exists and can be read.  Returns true on success, false
 * otherwise.
 *
 * If auto_unwrap is true, an explicitly-named .pz/.gz file is automatically
 * decompressed and the decompressed contents are returned.  This is different
 * than vfs-implicit-pz, which will automatically decompress a file if the
 * extension .pz is *not* given.
 */

/**
 * Convenience function; fills the pvector up with the data from the indicated
 * file, if it exists and can be read.  Returns true on success, false
 * otherwise.
 *
 * If auto_unwrap is true, an explicitly-named .pz/.gz file is automatically
 * decompressed and the decompressed contents are returned.  This is different
 * than vfs-implicit-pz, which will automatically decompress a file if the
 * extension .pz is *not* given.
 */
89
PyObject *VirtualFileSystem::read_file(Filename const &filename, bool auto_unwrap) const;

1252 14 open_read_file 0 4 1382 33 VirtualFileSystem::open_read_file 0 1 575 424
/**
 * Convenience function; returns a newly allocated istream if the file exists
 * and can be read, or NULL otherwise.  Does not return an invalid istream.
 *
 * If auto_unwrap is true, an explicitly-named .pz file is automatically
 * decompressed and the decompressed contents are returned.  This is different
 * than vfs-implicit-pz, which will automatically decompress a file if the
 * extension .pz is *not* given.
 */
98
std::istream *VirtualFileSystem::open_read_file(Filename const &filename, bool auto_unwrap) const;

1253 15 close_read_file 0 4 1382 34 VirtualFileSystem::close_read_file 0 1 576 243
/**
 * Closes a file opened by a previous call to open_read_file().  This really
 * just deletes the istream pointer, but it is recommended to use this
 * interface instead of deleting it explicitly, to help work around compiler
 * issues.
 */
69
static void VirtualFileSystem::close_read_file(std::istream *stream);

1254 10 write_file 0 4 1382 29 VirtualFileSystem::write_file 0 1 577 409
/**
 * Convenience function; writes the entire contents of the indicated file as a
 * string.
 *
 * If auto_wrap is true, an explicitly-named .pz file is automatically
 * compressed while writing.
 */

/**
 * Convenience function; writes the entire contents of the indicated file as a
 * block of data.
 *
 * If auto_wrap is true, an explicitly-named .pz file is automatically
 * compressed while writing.
 */
98
PyObject *VirtualFileSystem::write_file(Filename const &filename, PyObject *data, bool auto_wrap);

1255 15 open_write_file 0 4 1382 34 VirtualFileSystem::open_write_file 0 1 578 345
/**
 * Convenience function; returns a newly allocated ostream if the file exists
 * and can be written, or NULL otherwise.  Does not return an invalid ostream.
 *
 * If auto_wrap is true, an explicitly-named .pz file is automatically
 * compressed while writing.  If truncate is true, the file is truncated to
 * zero length before writing.
 */
106
std::ostream *VirtualFileSystem::open_write_file(Filename const &filename, bool auto_wrap, bool truncate);

1256 16 open_append_file 0 4 1382 35 VirtualFileSystem::open_append_file 0 1 579 180
/**
 * Works like open_write_file(), but the file is opened in append mode.  Like
 * open_write_file, the returned pointer should eventually be passed to
 * close_write_file().
 */
76
std::ostream *VirtualFileSystem::open_append_file(Filename const &filename);

1257 16 close_write_file 0 4 1382 35 VirtualFileSystem::close_write_file 0 1 580 244
/**
 * Closes a file opened by a previous call to open_write_file().  This really
 * just deletes the ostream pointer, but it is recommended to use this
 * interface instead of deleting it explicitly, to help work around compiler
 * issues.
 */
70
static void VirtualFileSystem::close_write_file(std::ostream *stream);

1258 20 open_read_write_file 0 4 1382 39 VirtualFileSystem::open_read_write_file 0 1 581 169
/**
 * Convenience function; returns a newly allocated iostream if the file exists
 * and can be written, or NULL otherwise.  Does not return an invalid
 * iostream.
 */
96
std::iostream *VirtualFileSystem::open_read_write_file(Filename const &filename, bool truncate);

1259 21 open_read_append_file 0 4 1382 40 VirtualFileSystem::open_read_append_file 0 1 582 194
/**
 * Works like open_read_write_file(), but the file is opened in append mode.
 * Like open_read_write_file, the returned pointer should eventually be passed
 * to close_read_write_file().
 */
82
std::iostream *VirtualFileSystem::open_read_append_file(Filename const &filename);

1260 21 close_read_write_file 0 4 1382 40 VirtualFileSystem::close_read_write_file 0 1 583 250
/**
 * Closes a file opened by a previous call to open_read_write_file().  This
 * really just deletes the iostream pointer, but it is recommended to use this
 * interface instead of deleting it explicitly, to help work around compiler
 * issues.
 */
76
static void VirtualFileSystem::close_read_write_file(std::iostream *stream);

1261 13 get_long_time 0 4 1386 24 TrueClock::get_long_time 0 1 595 420
// get_long_time() returns the most accurate timer we have over a long
// interval.  It may not be very precise for measuring short intervals, but
// it should not drift substantially over the long haul.

// get_long_time() returns the most accurate timer we have over a long
// interval.  It may not be very precise for measuring short intervals, but
// it should not drift substantially over the long haul.

/**
 *
 */
38
double TrueClock::get_long_time(void);

1262 14 get_short_time 0 4 1386 25 TrueClock::get_short_time 0 1 596 426
// get_short_time() returns the most precise timer we have over a short
// interval.  It may tend to drift over the long haul, but it should have
// lots of digits to measure short intervals very precisely.

// get_short_time() returns the most precise timer we have over a short
// interval.  It may tend to drift over the long haul, but it should have
// lots of digits to measure short intervals very precisely.

/**
 *
 */
46
inline double TrueClock::get_short_time(void);

1263 18 get_short_raw_time 0 4 1386 29 TrueClock::get_short_raw_time 0 1 597 302
// get_short_raw_time() is like get_short_time(), but does not apply any
// corrections (e.g.  paranoid-clock) to the result returned by the OS.

// get_short_raw_time() is like get_short_time(), but does not apply any
// corrections (e.g.  paranoid-clock) to the result returned by the OS.

/**
 *
 */
43
double TrueClock::get_short_raw_time(void);

1264 15 get_error_count 0 4 1386 26 TrueClock::get_error_count 0 1 598 369
/**
 * Returns the number of clock errors that have been detected.  Each time a
 * clock error is detected, in which the value returned by either of the above
 * methods is suspect, the value returned by this method will be incremented.
 * Applications can monitor this value and react, for instance, by
 * resynchronizing their clocks each time this value changes.
 */
50
inline int TrueClock::get_error_count(void) const;

1265 14 get_global_ptr 0 4 1386 25 TrueClock::get_global_ptr 0 1 599 70
/**
 * Returns a pointer to the one TrueClock object in the world.
 */
57
static inline TrueClock *TrueClock::get_global_ptr(void);

1266 16 set_cpu_affinity 0 4 1386 27 TrueClock::set_cpu_affinity 0 1 600 0
54
bool TrueClock::set_cpu_affinity(uint32_t mask) const;

1267 9 Patchfile 0 260 1388 20 Patchfile::Patchfile 0 2 601 602 111
/**
 * Create a patch file and initializes internal data
 */

/**
 * Create patch file with buffer to patch
 */
86
Patchfile::Patchfile(void);
explicit Patchfile::Patchfile(PointerTo< Buffer > buffer);

1268 10 ~Patchfile 0 516 1388 21 Patchfile::~Patchfile 0 0 10
/**
 *
 */
28
Patchfile::~Patchfile(void);

1269 5 build 0 4 1388 16 Patchfile::build 0 1 603 359
/**
 *
 * This implementation uses the "greedy differencing algorithm" described in
 * the masters thesis "Differential Compression: A Generalized Solution for
 * Binary Files" by Randal C. Burns (p.13). For an original file of size M and
 * a new file of size N, this algorithm is O(M) in space and O(M*N) (worst-
 * case) in time.  return false on error
 */
82
bool Patchfile::build(Filename file_orig, Filename file_new, Filename patch_name);

1270 11 read_header 0 4 1388 22 Patchfile::read_header 0 1 604 193
/**
 * Opens the patch file for reading, and gets the header information from the
 * file but does not begin to do any real work.  This can be used to query the
 * data stored in the patch.
 */
55
int Patchfile::read_header(Filename const &patch_file);

1271 8 initiate 0 4 1388 19 Patchfile::initiate 0 2 605 606 236
/**
 * Set up to apply the patch to the file (original file and patch are
 * destroyed in the process).
 */

/**
 * Set up to apply the patch to the file.  In this form, neither the original
 * file nor the patch file are destroyed.
 */
183
int Patchfile::initiate(Filename const &patch_file, Filename const &file);
int Patchfile::initiate(Filename const &patch_file, Filename const &orig_file, Filename const &target_file);

1272 3 run 0 4 1388 14 Patchfile::run 0 1 607 390
/**
 * Perform one buffer's worth of patching.
 * Returns one of the following values:
 * @li @c EU_ok : while patching
 * @li @c EU_success : when done
 * @li @c EU_error_abort : Patching has not been initiated
 * @li @c EU_error_file_invalid : file is corrupted
 * @li @c EU_error_invalid_checksum : incompatible patch file
 * @li @c EU_error_write_file_rename : could not rename file
 */
25
int Patchfile::run(void);

1273 5 apply 0 4 1388 16 Patchfile::apply 0 2 608 609 311
/**
 * Patches the entire file in one call returns true on success and false on
 * error
 *
 * This version will delete the patch file and overwrite the original file.
 */

/**
 * Patches the entire file in one call returns true on success and false on
 * error
 *
 * This version will not delete any files.
 */
155
bool Patchfile::apply(Filename &patch_file, Filename &file);
bool Patchfile::apply(Filename &patch_file, Filename &orig_file, Filename const &target_file);

1274 12 get_progress 0 4 1388 23 Patchfile::get_progress 0 1 610 125
/**
 * Returns a value in the range 0..1, representing the amount of progress
 * through the patchfile, during a session.
 */
55
inline PN_stdfloat Patchfile::get_progress(void) const;

1275 19 set_allow_multifile 0 4 1388 30 Patchfile::set_allow_multifile 0 1 611 362
/**
 * If this flag is set true, the Patchfile will make a special case for
 * patching Panda Multifiles, if detected, and attempt to patch them on a
 * subfile-by-subfile basis.  If this flag is false, the Patchfile will always
 * patch the file on a full-file basis.
 *
 * This has effect only when building patches; it is not used for applying
 * patches.
 */
65
inline void Patchfile::set_allow_multifile(bool allow_multifile);

1276 19 get_allow_multifile 0 4 1388 30 Patchfile::get_allow_multifile 0 1 612 37
/**
 * See set_allow_multifile().
 */
49
inline bool Patchfile::get_allow_multifile(void);

1277 20 set_footprint_length 0 4 1388 31 Patchfile::set_footprint_length 0 1 613 10
/**
 *
 */
56
inline void Patchfile::set_footprint_length(int length);

1278 20 get_footprint_length 0 4 1388 31 Patchfile::get_footprint_length 0 1 614 10
/**
 *
 */
49
inline int Patchfile::get_footprint_length(void);

1279 22 reset_footprint_length 0 4 1388 33 Patchfile::reset_footprint_length 0 1 615 10
/**
 *
 */
52
inline void Patchfile::reset_footprint_length(void);

1280 15 has_source_hash 0 4 1388 26 Patchfile::has_source_hash 0 1 616 145
/**
 * Returns true if the MD5 hash for the source file is known.  (Some early
 * versions of the patch file did not store this information.)
 */
51
inline bool Patchfile::has_source_hash(void) const;

1281 15 get_source_hash 0 4 1388 26 Patchfile::get_source_hash 0 1 617 52
/**
 * Returns the MD5 hash for the source file.
 */
61
inline HashVal const &Patchfile::get_source_hash(void) const;

1282 15 get_result_hash 0 4 1388 26 Patchfile::get_result_hash 0 1 618 78
/**
 * Returns the MD5 hash for the file after the patch has been applied.
 */
61
inline HashVal const &Patchfile::get_result_hash(void) const;

1283 13 password_hash 0 1 0 13 password_hash 0 1 657 0
103
std::string password_hash(std::string const &password, std::string const &salt, int iters, int keylen);

1284 12 ProfileTimer 0 260 1392 26 ProfileTimer::ProfileTimer 0 2 619 620 0
136
explicit ProfileTimer::ProfileTimer(char const *name = 0, int maxEntries = 4096);
ProfileTimer::ProfileTimer(ProfileTimer const &other);

1285 13 ~ProfileTimer 0 516 1392 27 ProfileTimer::~ProfileTimer 0 0 0
34
ProfileTimer::~ProfileTimer(void);

1286 4 init 0 4 1392 18 ProfileTimer::init 0 1 621 0
65
void ProfileTimer::init(char const *name, int maxEntries = 4096);

1287 2 on 0 4 1392 16 ProfileTimer::on 0 1 622 0
28
void ProfileTimer::on(void);

1288 4 mark 0 4 1392 18 ProfileTimer::mark 0 1 623 0
41
void ProfileTimer::mark(char const *tag);

1289 3 off 0 4 1392 17 ProfileTimer::off 0 2 624 625 0
70
void ProfileTimer::off(void);
void ProfileTimer::off(char const *tag);

1290 12 getTotalTime 0 4 1392 26 ProfileTimer::getTotalTime 0 1 626 110
// Don't call any of the following during timing: (Because they are slow,
// not because anything will break).
46
double ProfileTimer::getTotalTime(void) const;

1291 16 consolidateAllTo 0 4 1392 30 ProfileTimer::consolidateAllTo 0 1 627 0
76
static void ProfileTimer::consolidateAllTo(std::ostream &out = ::std::cout);

1292 13 consolidateTo 0 4 1392 27 ProfileTimer::consolidateTo 0 1 628 0
72
void ProfileTimer::consolidateTo(std::ostream &out = ::std::cout) const;

1293 10 printAllTo 0 4 1392 24 ProfileTimer::printAllTo 0 1 629 0
70
static void ProfileTimer::printAllTo(std::ostream &out = ::std::cout);

1294 7 printTo 0 4 1392 21 ProfileTimer::printTo 0 1 630 0
66
void ProfileTimer::printTo(std::ostream &out = ::std::cout) const;

1295 11 was_deleted 0 4 1393 30 WeakPointerToVoid::was_deleted 0 1 631 384
/**
 * Returns true if the object we are pointing to has been deleted, false
 * otherwise.  If this returns true, it means that the pointer can not yet be
 * reused, but it does not guarantee that it can be safely accessed.  See the
 * lock() method for a safe way to access the underlying pointer.
 *
 * This will always return true for a null pointer, unlike is_valid_pointer().
 */
55
inline bool WeakPointerToVoid::was_deleted(void) const;

1296 16 is_valid_pointer 0 4 1393 35 WeakPointerToVoid::is_valid_pointer 0 1 632 122
/**
 * Returns true if the pointer is not null and the object has not been
 * deleted.  See was_deleted() for caveats.
 */
60
inline bool WeakPointerToVoid::is_valid_pointer(void) const;

1297 18 ~WeakPointerToVoid 0 516 1393 37 WeakPointerToVoid::~WeakPointerToVoid 0 0 0
44
WeakPointerToVoid::~WeakPointerToVoid(void);

1298 16 set_string_value 0 4 1394 33 WindowsRegistry::set_string_value 0 1 635 302
/**
 * Sets the registry key to the indicated value as a string.  The supplied
 * string value is automatically converted from whatever encoding is set by
 * TextEncoder::set_default_encoding() and written as a Unicode string.  The
 * registry key must already exist prior to calling this function.
 */
183
static bool WindowsRegistry::set_string_value(std::string const &key, std::string const &name, std::string const &value, WindowsRegistry::RegLevel rl = ::WindowsRegistry::rl_machine);

1299 13 set_int_value 0 4 1394 30 WindowsRegistry::set_int_value 0 1 636 142
/**
 * Sets the registry key to the indicated value as an integer.  The registry
 * key must already exist prior to calling this function.
 */
165
static bool WindowsRegistry::set_int_value(std::string const &key, std::string const &name, int value, WindowsRegistry::RegLevel rl = ::WindowsRegistry::rl_machine);

1300 12 get_key_type 0 4 1394 29 WindowsRegistry::get_key_type 0 1 637 115
/**
 * Returns the type of the indicated key, or T_none if the key is not known or
 * is some unsupported type.
 */
170
static WindowsRegistry::Type WindowsRegistry::get_key_type(std::string const &key, std::string const &name, WindowsRegistry::RegLevel rl = ::WindowsRegistry::rl_machine);

1301 16 get_string_value 0 4 1394 33 WindowsRegistry::get_string_value 0 1 638 291
/**
 * Returns the value associated with the indicated registry key, assuming it
 * is a string value.  The string value is automatically encoded using
 * TextEncoder::get_default_encoding().  If the key is not defined or is not a
 * string type value, default_value is returned instead.
 */
198
static std::string WindowsRegistry::get_string_value(std::string const &key, std::string const &name, std::string const &default_value, WindowsRegistry::RegLevel rl = ::WindowsRegistry::rl_machine);

1302 13 get_int_value 0 4 1394 30 WindowsRegistry::get_int_value 0 1 639 206
/**
 * Returns the value associated with the indicated registry key, assuming it
 * is an integer value.  If the key is not defined or is not an integer type
 * value, default_value is returned instead.
 */
172
static int WindowsRegistry::get_int_value(std::string const &key, std::string const &name, int default_value, WindowsRegistry::RegLevel rl = ::WindowsRegistry::rl_machine);

1303 15 WindowsRegistry 0 260 1394 32 WindowsRegistry::WindowsRegistry 0 2 633 634 0
132
inline WindowsRegistry::WindowsRegistry(void) = default;
inline WindowsRegistry::WindowsRegistry(WindowsRegistry const &) = default;

1304 16 ~WindowsRegistry 0 516 1394 33 WindowsRegistry::~WindowsRegistry 0 0 0
40
WindowsRegistry::~WindowsRegistry(void);

657
1 0 0 7 15 1401 679 0 0 1 4 copy 1 1399  
2 0 0 7 15 1401 679 0 0 1 4 copy 1 1402  
3 0 0 4 16 1404 0 0 0 1 4 this 3 1401  
4 0 0 6 17 1335 0 0 0 1 4 this 3 1399  
5 0 0 6 18 1387 0 0 0 2 4 this 3 1399  1 n 1 1335  
6 0 0 6 19 1387 0 0 0 2 4 this 3 1399  1 n 1 1335  
7 0 0 6 20 1405 0 0 0 1 4 this 3 1399  
8 0 0 6 21 1405 0 0 0 3 4 this 3 1399  1 n 1 1335  5 count 1 1335  
9 0 0 6 22 1337 0 0 0 1 4 this 3 1399  
10 0 0 6 23 1337 0 0 0 1 4 this 3 1399  
11 0 0 6 24 1335 0 0 0 2 4 this 3 1399  6 param0 0 1387  
12 0 0 6 25 1405 0 0 0 1 4 this 3 1399  
13 0 0 6 26 1337 0 0 0 3 4 this 3 1399  4 view 1 1408  5 flags 1 1337  
14 0 0 4 27 1404 0 0 0 2 4 this 3 1399  4 view 1 1408  
15 0 0 6 13 1333 0 0 64 // These are implemented in PointerToVoid, but expose them here. 2 4 this 3 1411  5 other 1 1411  
16 0 0 6 14 1333 0 0 0 2 4 this 3 1411  5 other 1 1411  
17 0 0 4 10 1404 0 0 0 1 4 this 3 1413  
18 0 0 4 11 1404 0 0 0 2 4 this 3 1414  3 out 1 1416  
19 0 0 6 7 1333 0 0 130 /**
 * Returns true if the PointerTo is a NULL pointer, false otherwise.  (Direct
 * comparison to a NULL pointer also works.)
 */ 1 4 this 3 1417  
20 0 0 6 8 1334 0 0 10 /**
 *
 */ 1 4 this 3 1417  
21 0 0 7 38 1421 698 0 0 1 4 copy 1 1419  
22 0 0 7 38 1421 698 0 0 1 4 copy 1 1422  
23 0 0 4 39 1404 0 0 0 1 4 this 3 1421  
24 0 0 6 40 1335 0 0 0 1 4 this 3 1419  
25 0 0 6 41 1390 0 0 0 2 4 this 3 1419  1 n 1 1335  
26 0 0 6 42 1390 0 0 0 2 4 this 3 1419  1 n 1 1335  
27 0 0 6 43 1405 0 0 0 1 4 this 3 1419  
28 0 0 6 44 1405 0 0 0 3 4 this 3 1419  1 n 1 1335  5 count 1 1335  
29 0 0 6 45 1337 0 0 0 1 4 this 3 1419  
30 0 0 6 46 1337 0 0 0 1 4 this 3 1419  
31 0 0 6 47 1335 0 0 0 2 4 this 3 1419  6 param0 0 1390  
32 0 0 6 48 1405 0 0 0 1 4 this 3 1419  
33 0 0 6 49 1337 0 0 0 3 4 this 3 1419  4 view 1 1408  5 flags 1 1337  
34 0 0 4 50 1404 0 0 0 2 4 this 3 1419  4 view 1 1408  
35 0 0 6 36 1333 0 0 64 // These are implemented in PointerToVoid, but expose them here. 2 4 this 3 1424  5 other 1 1424  
36 0 0 6 37 1333 0 0 0 2 4 this 3 1424  5 other 1 1424  
37 0 0 4 33 1404 0 0 0 1 4 this 3 1426  
38 0 0 4 34 1404 0 0 0 2 4 this 3 1427  3 out 1 1416  
39 0 0 7 61 1431 717 0 0 1 4 copy 1 1429  
40 0 0 7 61 1431 717 0 0 1 4 copy 1 1432  
41 0 0 4 62 1404 0 0 0 1 4 this 3 1431  
42 0 0 6 63 1335 0 0 0 1 4 this 3 1429  
43 0 0 6 64 1337 0 0 0 2 4 this 3 1429  1 n 1 1335  
44 0 0 6 65 1337 0 0 0 2 4 this 3 1429  1 n 1 1335  
45 0 0 6 66 1405 0 0 0 1 4 this 3 1429  
46 0 0 6 67 1405 0 0 0 3 4 this 3 1429  1 n 1 1335  5 count 1 1335  
47 0 0 6 68 1337 0 0 0 1 4 this 3 1429  
48 0 0 6 69 1337 0 0 0 1 4 this 3 1429  
49 0 0 6 70 1335 0 0 0 2 4 this 3 1429  6 param0 0 1337  
50 0 0 6 71 1405 0 0 0 1 4 this 3 1429  
51 0 0 6 72 1337 0 0 0 3 4 this 3 1429  4 view 1 1408  5 flags 1 1337  
52 0 0 4 73 1404 0 0 0 2 4 this 3 1429  4 view 1 1408  
53 0 0 6 59 1333 0 0 64 // These are implemented in PointerToVoid, but expose them here. 2 4 this 3 1434  5 other 1 1434  
54 0 0 6 60 1333 0 0 0 2 4 this 3 1434  5 other 1 1434  
55 0 0 4 56 1404 0 0 0 1 4 this 3 1436  
56 0 0 4 57 1404 0 0 0 2 4 this 3 1437  3 out 1 1416  
57 0 0 7 84 1441 736 0 0 1 4 copy 1 1439  
58 0 0 7 84 1441 736 0 0 1 4 copy 1 1442  
59 0 0 4 85 1404 0 0 0 1 4 this 3 1441  
60 0 0 6 86 1335 0 0 0 1 4 this 3 1439  
61 0 0 6 87 1444 0 0 0 2 4 this 3 1439  1 n 1 1335  
62 0 0 6 88 1444 0 0 0 2 4 this 3 1439  1 n 1 1335  
63 0 0 6 89 1405 0 0 0 1 4 this 3 1439  
64 0 0 6 90 1405 0 0 0 3 4 this 3 1439  1 n 1 1335  5 count 1 1335  
65 0 0 6 91 1337 0 0 0 1 4 this 3 1439  
66 0 0 6 92 1337 0 0 0 1 4 this 3 1439  
67 0 0 6 93 1335 0 0 0 2 4 this 3 1439  6 param0 0 1444  
68 0 0 6 94 1405 0 0 0 1 4 this 3 1439  
69 0 0 6 95 1337 0 0 0 3 4 this 3 1439  4 view 1 1408  5 flags 1 1337  
70 0 0 4 96 1404 0 0 0 2 4 this 3 1439  4 view 1 1408  
71 0 0 6 82 1333 0 0 64 // These are implemented in PointerToVoid, but expose them here. 2 4 this 3 1445  5 other 1 1445  
72 0 0 6 83 1333 0 0 0 2 4 this 3 1445  5 other 1 1445  
73 0 0 4 79 1404 0 0 0 1 4 this 3 1447  
74 0 0 4 80 1404 0 0 0 2 4 this 3 1448  3 out 1 1416  
75 0 0 7 100 1450 757 0 0 1 4 copy 1 1402  
76 0 0 7 100 1450 757 0 0 1 6 source 1 1405  
77 0 0 7 100 1450 757 0 0 1 11 type_handle 5 1451  
78 0 0 7 101 1450 757 0 0 2 1 n 1 1335  11 type_handle 5 1451  
79 0 0 4 102 1404 0 0 0 1 4 this 3 1450  
80 0 0 6 103 1335 0 0 0 1 4 this 3 1402  
81 0 0 4 104 1404 0 0 0 2 4 this 3 1450  1 x 1 1387  
82 0 0 4 105 1404 0 0 0 1 4 this 3 1450  
83 0 0 6 106 1387 0 0 0 2 4 this 3 1402  1 n 1 1335  
84 0 0 4 107 1404 0 0 0 3 4 this 3 1450  1 n 1 1335  5 value 1 1387  
85 0 0 6 108 1387 0 0 0 2 4 this 3 1402  1 n 1 1335  
86 0 0 4 109 1404 0 0 0 3 4 this 3 1450  1 n 1 1335  5 value 1 1387  
87 0 0 6 110 1405 0 0 0 1 4 this 3 1402  
88 0 0 4 111 1404 0 0 0 2 4 this 3 1450  4 data 1 1405  
89 0 0 6 112 1405 0 0 0 3 4 this 3 1402  1 n 1 1335  5 count 1 1335  
90 0 0 4 113 1404 0 0 0 4 4 this 3 1450  1 n 1 1335  5 count 1 1335  4 data 1 1453  
91 0 0 6 114 1337 0 0 0 1 4 this 3 1402  
92 0 0 6 115 1337 0 0 0 1 4 this 3 1402  
93 0 0 6 116 1335 0 0 0 2 4 this 3 1402  6 param0 0 1387  
94 0 0 6 117 1405 0 0 0 1 4 this 3 1402  
95 0 0 6 118 1337 0 0 0 3 4 this 3 1450  4 view 1 1408  5 flags 1 1337  
96 0 0 4 119 1404 0 0 0 2 4 this 3 1402  4 view 1 1408  
97 0 0 7 123 1454 778 0 0 1 4 copy 1 1422  
98 0 0 7 123 1454 778 0 0 1 6 source 1 1405  
99 0 0 7 123 1454 778 0 0 1 11 type_handle 5 1451  
100 0 0 7 124 1454 778 0 0 2 1 n 1 1335  11 type_handle 5 1451  
101 0 0 4 125 1404 0 0 0 1 4 this 3 1454  
102 0 0 6 126 1335 0 0 0 1 4 this 3 1422  
103 0 0 4 127 1404 0 0 0 2 4 this 3 1454  1 x 1 1390  
104 0 0 4 128 1404 0 0 0 1 4 this 3 1454  
105 0 0 6 129 1390 0 0 0 2 4 this 3 1422  1 n 1 1335  
106 0 0 4 130 1404 0 0 0 3 4 this 3 1454  1 n 1 1335  5 value 1 1390  
107 0 0 6 131 1390 0 0 0 2 4 this 3 1422  1 n 1 1335  
108 0 0 4 132 1404 0 0 0 3 4 this 3 1454  1 n 1 1335  5 value 1 1390  
109 0 0 6 133 1405 0 0 0 1 4 this 3 1422  
110 0 0 4 134 1404 0 0 0 2 4 this 3 1454  4 data 1 1405  
111 0 0 6 135 1405 0 0 0 3 4 this 3 1422  1 n 1 1335  5 count 1 1335  
112 0 0 4 136 1404 0 0 0 4 4 this 3 1454  1 n 1 1335  5 count 1 1335  4 data 1 1453  
113 0 0 6 137 1337 0 0 0 1 4 this 3 1422  
114 0 0 6 138 1337 0 0 0 1 4 this 3 1422  
115 0 0 6 139 1335 0 0 0 2 4 this 3 1422  6 param0 0 1390  
116 0 0 6 140 1405 0 0 0 1 4 this 3 1422  
117 0 0 6 141 1337 0 0 0 3 4 this 3 1454  4 view 1 1408  5 flags 1 1337  
118 0 0 4 142 1404 0 0 0 2 4 this 3 1422  4 view 1 1408  
119 0 0 7 146 1455 799 0 0 1 4 copy 1 1432  
120 0 0 7 146 1455 799 0 0 1 6 source 1 1405  
121 0 0 7 146 1455 799 0 0 1 11 type_handle 5 1451  
122 0 0 7 147 1455 799 0 0 2 1 n 1 1335  11 type_handle 5 1451  
123 0 0 4 148 1404 0 0 0 1 4 this 3 1455  
124 0 0 6 149 1335 0 0 0 1 4 this 3 1432  
125 0 0 4 150 1404 0 0 0 2 4 this 3 1455  1 x 1 1337  
126 0 0 4 151 1404 0 0 0 1 4 this 3 1455  
127 0 0 6 152 1337 0 0 0 2 4 this 3 1432  1 n 1 1335  
128 0 0 4 153 1404 0 0 0 3 4 this 3 1455  1 n 1 1335  5 value 1 1337  
129 0 0 6 154 1337 0 0 0 2 4 this 3 1432  1 n 1 1335  
130 0 0 4 155 1404 0 0 0 3 4 this 3 1455  1 n 1 1335  5 value 1 1337  
131 0 0 6 156 1405 0 0 0 1 4 this 3 1432  
132 0 0 4 157 1404 0 0 0 2 4 this 3 1455  4 data 1 1405  
133 0 0 6 158 1405 0 0 0 3 4 this 3 1432  1 n 1 1335  5 count 1 1335  
134 0 0 4 159 1404 0 0 0 4 4 this 3 1455  1 n 1 1335  5 count 1 1335  4 data 1 1453  
135 0 0 6 160 1337 0 0 0 1 4 this 3 1432  
136 0 0 6 161 1337 0 0 0 1 4 this 3 1432  
137 0 0 6 162 1335 0 0 0 2 4 this 3 1432  6 param0 0 1337  
138 0 0 6 163 1405 0 0 0 1 4 this 3 1432  
139 0 0 6 164 1337 0 0 0 3 4 this 3 1455  4 view 1 1408  5 flags 1 1337  
140 0 0 4 165 1404 0 0 0 2 4 this 3 1432  4 view 1 1408  
141 0 0 7 169 1456 820 0 0 1 4 copy 1 1442  
142 0 0 7 169 1456 820 0 0 1 6 source 1 1405  
143 0 0 7 169 1456 820 0 0 1 11 type_handle 5 1451  
144 0 0 7 170 1456 820 0 0 2 1 n 1 1335  11 type_handle 5 1451  
145 0 0 4 171 1404 0 0 0 1 4 this 3 1456  
146 0 0 6 172 1335 0 0 0 1 4 this 3 1442  
147 0 0 4 173 1404 0 0 0 2 4 this 3 1456  1 x 1 1444  
148 0 0 4 174 1404 0 0 0 1 4 this 3 1456  
149 0 0 6 175 1444 0 0 0 2 4 this 3 1442  1 n 1 1335  
150 0 0 4 176 1404 0 0 0 3 4 this 3 1456  1 n 1 1335  5 value 1 1444  
151 0 0 6 177 1444 0 0 0 2 4 this 3 1442  1 n 1 1335  
152 0 0 4 178 1404 0 0 0 3 4 this 3 1456  1 n 1 1335  5 value 1 1444  
153 0 0 6 179 1405 0 0 0 1 4 this 3 1442  
154 0 0 4 180 1404 0 0 0 2 4 this 3 1456  4 data 1 1405  
155 0 0 6 181 1405 0 0 0 3 4 this 3 1442  1 n 1 1335  5 count 1 1335  
156 0 0 4 182 1404 0 0 0 4 4 this 3 1456  1 n 1 1335  5 count 1 1335  4 data 1 1453  
157 0 0 6 183 1337 0 0 0 1 4 this 3 1442  
158 0 0 6 184 1337 0 0 0 1 4 this 3 1442  
159 0 0 6 185 1335 0 0 0 2 4 this 3 1442  6 param0 0 1444  
160 0 0 6 186 1405 0 0 0 1 4 this 3 1442  
161 0 0 6 187 1337 0 0 0 3 4 this 3 1456  4 view 1 1408  5 flags 1 1337  
162 0 0 4 188 1404 0 0 0 2 4 this 3 1442  4 view 1 1408  
163 0 0 7 225 1459 842 0 0 1 6 param0 0 1457  
164 0 0 6 192 1333 0 0 125 /**
 * Returns true if the MemoryUsage object is currently tracking memory (e.g.
 * track-memory-usage is configured #t).
 */ 0 
165 0 0 6 193 1333 0 0 168 /**
 * Returns true if the MemoryUsage object is currently at least counting
 * memory (e.g.  this is a Windows debug build), even if it's not fully
 * tracking it.
 */ 0 
166 0 0 6 194 1334 0 0 136 /**
 * Returns the total number of bytes of allocated memory consumed by C++
 * objects, not including the memory previously frozen.
 */ 0 
167 0 0 6 195 1334 0 0 132 /**
 * Returns the total number of bytes of allocated memory consumed by C++
 * objects, including the memory previously frozen.
 */ 0 
168 0 0 6 196 1334 0 0 119 /**
 * Returns the total number of bytes allocated from the heap from code within
 * Panda, for individual objects.
 */ 0 
169 0 0 6 197 1334 0 0 107 /**
 * Returns the total number of bytes allocated from the heap from code within
 * Panda, for arrays.
 */ 0 
170 0 0 6 198 1334 0 0 190 /**
 * Returns the extra bytes allocated from the system that are not immediately
 * used for holding allocated objects.  This can only be determined if
 * ALTERNATIVE_MALLOC is enabled.
 */ 0 
171 0 0 6 199 1334 0 0 110 /**
 * Returns the total number of bytes allocated from the virtual memory pool
 * from code within Panda.
 */ 0 
172 0 0 6 200 1334 0 0 496 /**
 * Returns the total number of bytes of allocated memory in the heap that
 * Panda didn't seem to be responsible for.  This includes a few bytes for
 * very low-level objects (like ConfigVariables) that cannot use Panda memory
 * tracking because they are so very low-level.
 *
 * This also includes all of the memory that might have been allocated by a
 * high-level interpreter, like Python.
 *
 * This number is only available if Panda is able to hook into the actual heap
 * callback.
 */ 0 
173 0 0 6 201 1334 0 0 113 /**
 * Returns the total size of allocated memory consumed by the process, as
 * nearly as can be determined.
 */ 0 
174 0 0 6 202 1337 0 0 59 /**
 * Returns the number of pointers currently active.
 */ 0 
175 0 0 4 203 1404 0 0 100 /**
 * Fills the indicated MemoryUsagePointers with the set of all pointers
 * currently active.
 */ 1 6 result 1 1460  
176 0 0 4 204 1404 0 0 122 /**
 * Fills the indicated MemoryUsagePointers with the set of all pointers of the
 * indicated type currently active.
 */ 2 6 result 1 1460  4 type 1 1451  
177 0 0 4 205 1404 0 0 159 /**
 * Fills the indicated MemoryUsagePointers with the set of all pointers that
 * were allocated within the range of the indicated number of seconds ago.
 */ 3 6 result 1 1460  4 from 1 1387  2 to 1 1387  
178 0 0 4 206 1404 0 0 852 /**
 * Fills the indicated MemoryUsagePointers with the set of all currently
 * active pointers (that is, pointers allocated since the last call to
 * freeze(), and not yet freed) that have a zero reference count.
 *
 * Generally, an undeleted pointer with a zero reference count means its
 * reference count has never been incremented beyond zero (since once it has
 * been incremented, the only way it can return to zero would free the
 * pointer).  This may include objects that are allocated statically or on the
 * stack, which are never intended to be deleted.  Or, it might represent a
 * programmer or compiler error.
 *
 * This function has the side-effect of incrementing each of their reference
 * counts by one, thus preventing them from ever being freed--but since they
 * hadn't been freed anyway, probably no additional harm is done.
 */ 1 6 result 1 1460  
179 0 0 4 207 1404 0 0 285 /**
 * 'Freezes' all pointers currently stored so that they are no longer
 * reported; only newly allocate pointers from this point on will appear in
 * future information requests.  This makes it easier to differentiate between
 * continuous leaks and one-time memory allocations.
 */ 0 
180 0 0 4 208 1404 0 0 70 /**
 * Shows the breakdown of types of all of the active pointers.
 */ 0 
181 0 0 4 209 1404 0 0 118 /**
 * Shows the breakdown of types of all of the pointers allocated and freed
 * since the last call to freeze().
 */ 0 
182 0 0 4 210 1404 0 0 69 /**
 * Shows the breakdown of ages of all of the active pointers.
 */ 0 
183 0 0 4 211 1404 0 0 117 /**
 * Shows the breakdown of ages of all of the pointers allocated and freed
 * since the last call to freeze().
 */ 0 
184 0 0 6 231 1337 0 0 47 /**
 * Returns the current reference count.
 */ 1 4 this 3 1461  
185 0 0 4 232 1404 0 0 538 /**
 * Explicitly increments the reference count.  User code should avoid using
 * ref() and unref() directly, which can result in missed reference counts.
 * Instead, let a PointerTo object manage the reference counting
 * automatically.
 *
 * This function is const, even though it changes the object, because
 * generally fiddling with an object's reference count isn't considered part
 * of fiddling with the object.  An object might be const in other ways, but
 * we still need to accurately count the number of references to it.
 */ 1 4 this 3 1461  
186 0 0 6 233 1333 0 0 865 /**
 * Explicitly decrements the reference count.  Note that the object will not
 * be implicitly deleted by unref() simply because the reference count drops
 * to zero.  (Having a member function delete itself is problematic.) However,
 * see the helper function unref_delete().
 *
 * User code should avoid using ref() and unref() directly, which can result
 * in missed reference counts.  Instead, let a PointerTo object manage the
 * reference counting automatically.
 *
 * This function is const, even though it changes the object, because
 * generally fiddling with an object's reference count isn't considered part
 * of fiddling with the object.  An object might be const in other ways, but
 * we still need to accurately count the number of references to it.
 *
 * The return value is true if the new reference count is nonzero, false if it
 * is zero.
 */ 1 4 this 3 1461  
187 0 0 6 236 1333 0 0 135 /**
 * Does some easy checks to make sure that the reference count isn't
 * completely bogus.  Returns true if ok, false otherwise.
 */ 1 4 this 3 1461  
188 0 0 6 237 1333 0 0 144 /**
 * Does some easy checks to make sure that the reference count isn't zero, or
 * completely bogus.  Returns true if ok, false otherwise.
 */ 1 4 this 3 1461  
189 0 0 7 238 1451 0 0 0 0 
190 0 0 6 228 1464 0 0 0 1 4 this 3 1463  
191 0 0 7 241 1467 845 0 0 1 6 param0 0 1465  
192 0 0 6 240 1337 0 0 10 /**
 *
 */ 1 4 this 3 1465  
193 0 0 4 250 1404 0 0 0 2 4 this 3 1468  5 level 1 1387  
194 0 0 6 252 1337 0 0 47 /**
 * Returns the current reference count.
 */ 1 4 this 3 1469  
195 0 0 4 253 1404 0 0 107 /**
 * Explicitly increments the node reference count and the normal reference
 * count simultaneously.
 */ 1 4 this 3 1469  
196 0 0 6 254 1333 0 0 201 /**
 * Explicitly decrements the node reference count and the normal reference
 * count simultaneously.
 *
 * The return value is true if the new reference count is nonzero, false if it
 * is zero.
 */ 1 4 this 3 1469  
197 0 0 6 255 1333 0 0 97 /**
 * Does some easy checks to make sure that the reference count isn't
 * completely bogus.
 */ 1 4 this 3 1469  
198 0 0 4 256 1404 0 0 186 /**
 * Decrements the node reference count without affecting the normal reference
 * count.  Intended to be called by derived classes only, presumably to
 * reimplement node_unref().
 */ 1 4 this 3 1469  
199 0 0 7 257 1451 0 0 0 0 
200 0 0 7 260 1471 0 0 0 0 
201 0 0 7 260 1471 0 0 0 1 4 copy 1 1472  
202 0 0 7 260 1471 0 0 64 /**
 * Constructs a datagram from an existing block of data.
 */ 1 4 data 1 1474  
203 0 0 6 261 1471 0 0 0 2 4 this 3 1471  4 copy 1 1472  
204 0 0 4 262 1404 0 0 90 /**
 * Resets the datagram to empty, in preparation for building up a new
 * datagram.
 */ 1 4 this 3 1471  
205 0 0 4 263 1404 0 0 111 /**
 * Writes a representation of the entire datagram contents, as a sequence of
 * hex (and ASCII) values.
 */ 3 4 this 3 1472  3 out 1 1416  6 indent 5 1476  
206 0 0 4 264 1404 0 0 48 /**
 * Adds a boolean value to the datagram.
 */ 2 4 this 3 1471  5 value 1 1333  
207 0 0 4 265 1404 0 0 55 /**
 * Adds a signed 8-bit integer to the datagram.
 */ 2 4 this 3 1471  5 value 1 1477  
208 0 0 4 266 1404 0 0 58 /**
 * Adds an unsigned 8-bit integer to the datagram.
 */ 2 4 this 3 1471  5 value 1 1479  
209 0 0 4 267 1404 0 0 56 /**
 * Adds a signed 16-bit integer to the datagram.
 */ 2 4 this 3 1471  5 value 1 1480  
210 0 0 4 268 1404 0 0 56 /**
 * Adds a signed 32-bit integer to the datagram.
 */ 2 4 this 3 1471  5 value 1 1482  
211 0 0 4 269 1404 0 0 56 /**
 * Adds a signed 64-bit integer to the datagram.
 */ 2 4 this 3 1471  5 value 1 1483  
212 0 0 4 270 1404 0 0 59 /**
 * Adds an unsigned 16-bit integer to the datagram.
 */ 2 4 this 3 1471  5 value 1 1484  
213 0 0 4 271 1404 0 0 59 /**
 * Adds an unsigned 32-bit integer to the datagram.
 */ 2 4 this 3 1471  5 value 1 1486  
214 0 0 4 272 1404 0 0 59 /**
 * Adds an unsigned 64-bit integer to the datagram.
 */ 2 4 this 3 1471  5 value 1 1487  
215 0 0 4 273 1404 0 0 197 /**
 * Adds a 32-bit single-precision floating-point number to the datagram.
 * Since this kind of float is not necessarily portable across different
 * architectures, special care is required.
 */ 2 4 this 3 1471  5 value 1 1488  
216 0 0 4 274 1404 0 0 63 /**
 * Adds a 64-bit floating-point number to the datagram.
 */ 2 4 this 3 1471  5 value 1 1489  
217 0 0 4 275 1404 0 0 105 /**
 * Adds either a 32-bit or a 64-bit floating-point number, according to
 * set_stdfloat_double().
 */ 2 4 this 3 1471  5 value 1 1389  
218 0 0 4 276 1404 0 0 67 // These functions pack numbers big-endian, in case that's desired. 2 4 this 3 1471  5 value 1 1480  
219 0 0 4 277 1404 0 0 67 /**
 * Adds a signed 32-bit big-endian integer to the datagram.
 */ 2 4 this 3 1471  5 value 1 1482  
220 0 0 4 278 1404 0 0 67 /**
 * Adds a signed 64-bit big-endian integer to the datagram.
 */ 2 4 this 3 1471  5 value 1 1483  
221 0 0 4 279 1404 0 0 70 /**
 * Adds an unsigned 16-bit big-endian integer to the datagram.
 */ 2 4 this 3 1471  5 value 1 1484  
222 0 0 4 280 1404 0 0 70 /**
 * Adds an unsigned 32-bit big-endian integer to the datagram.
 */ 2 4 this 3 1471  5 value 1 1486  
223 0 0 4 281 1404 0 0 70 /**
 * Adds an unsigned 64-bit big-endian integer to the datagram.
 */ 2 4 this 3 1471  5 value 1 1487  
224 0 0 4 282 1404 0 0 94 /**
 * Adds a 32-bit single-precision big-endian floating-point number to the
 * datagram.
 */ 2 4 this 3 1471  5 value 1 1488  
225 0 0 4 283 1404 0 0 74 /**
 * Adds a 64-bit big-endian floating-point number to the datagram.
 */ 2 4 this 3 1471  5 value 1 1489  
226 0 0 4 284 1404 0 0 109 /**
 * Adds a variable-length string to the datagram.  This actually adds a count
 * followed by n bytes.
 */ 2 4 this 3 1471  3 str 1 1453  
227 0 0 4 285 1404 0 0 116 /**
 * Adds a variable-length string to the datagram, using a 32-bit length field
 * to allow very long strings.
 */ 2 4 this 3 1471  3 str 1 1453  
228 0 0 4 286 1404 0 0 86 /**
 * Adds a variable-length string to the datagram, as a NULL-terminated string.
 */ 2 4 this 3 1471  3 str 1 1453  
229 0 0 4 287 1404 0 0 238 /**
 * Adds a fixed-length string to the datagram.  If the string given is less
 * than the requested size, this will pad the string out with zeroes; if it is
 * greater than the requested size, this will silently truncate the string.
 */ 3 4 this 3 1471  3 str 1 1453  4 size 1 1334  
230 0 0 4 288 1404 0 0 58 /**
 * Adds a variable-length wstring to the datagram.
 */ 2 4 this 3 1471  3 str 1 1453  
231 0 0 4 289 1404 0 0 114 /**
 * Adds a variable-length binary blob to the datagram.  This actually adds a
 * count followed by n bytes.
 */ 2 4 this 3 1471  6 param0 0 1474  
232 0 0 4 290 1404 0 0 119 /**
 * Adds a variable-length binary blob to the datagram, using a 32-bit length
 * field to allow very long blobs.
 */ 2 4 this 3 1471  6 param0 0 1474  
233 0 0 4 291 1404 0 0 67 /**
 * Adds the indicated number of zero bytes to the datagram.
 */ 2 4 this 3 1471  4 size 1 1334  
234 0 0 4 292 1404 0 0 65 /**
 * Appends some more raw data to the end of the datagram.
 */ 2 4 this 3 1471  4 data 1 1474  
235 0 0 6 293 1405 0 0 51 /**
 * Returns the datagram's data as a string.
 */ 1 4 this 3 1472  
236 0 0 6 294 1405 0 0 0 1 4 this 3 1472  
237 0 0 6 295 1405 0 0 0 1 4 this 3 1472  
238 0 0 6 296 1334 0 0 55 /**
 * Returns the number of bytes in the datagram.
 */ 1 4 this 3 1472  
239 0 0 4 297 1404 0 0 199 /**
 * Replaces the data in the Datagram with the data in the indicated PTA_uchar.
 * This is assignment by reference: subsequent changes to the Datagram will
 * also change the source PTA_uchar.
 */ 2 4 this 3 1471  4 data 1 1490  
240 0 0 4 298 1404 0 0 237 /**
 * Replaces the data in the Datagram with a copy of the data in the indicated
 * CPTA_uchar.  Unlike set_array(), a complete copy is made of the data;
 * subsequent changes to the Datagram will *not* change the source CPTA_uchar.
 */ 2 4 this 3 1471  4 data 1 1491  
241 0 0 7 299 1491 0 0 70 /**
 * Returns a const pointer to the actual data in the Datagram.
 */ 1 4 this 3 1472  
242 0 0 7 300 1490 0 0 75 /**
 * Returns a modifiable pointer to the actual data in the Datagram.
 */ 1 4 this 3 1471  
243 0 0 4 301 1404 0 0 343 /**
 * Changes the stdfloat_double flag, which defines the operation performed by
 * add_stdfloat() and DatagramIterator::get_stdfloat().  When this is true,
 * add_stdfloat() adds a 64-bit floating-point number; when it is false, it
 * adds a 32-bit floating-point number.  The default is based on the
 * STDFLOAT_DOUBLE compilation flag.
 */ 2 4 this 3 1471  15 stdfloat_double 1 1333  
244 0 0 6 302 1333 0 0 72 /**
 * Returns the stdfloat_double flag.  See set_stdfloat_double().
 */ 1 4 this 3 1472  
245 0 0 6 303 1333 0 0 0 2 4 this 3 1472  5 other 1 1472  
246 0 0 6 304 1333 0 0 0 2 4 this 3 1472  5 other 1 1472  
247 0 0 6 305 1333 0 0 0 2 4 this 3 1472  5 other 1 1472  
248 0 0 4 306 1404 0 0 67 /**
 * Write a string representation of this instance to <out>.
 */ 2 4 this 3 1472  3 out 1 1416  
249 0 0 4 307 1404 0 0 67 /**
 * Write a string representation of this instance to <out>.
 */ 3 4 this 3 1472  3 out 1 1416  6 indent 5 1476  
250 0 0 7 308 1451 0 0 0 0 
251 0 0 6 311 1333 0 0 0 2 4 this 3 1492  4 data 1 1471  
252 0 0 6 312 1333 0 0 391 /**
 * Skips over the next datagram without extracting it, but saves the relevant
 * file information in the SubfileInfo object so that its data may be read
 * later.  For non-file-based datagram generators, this may mean creating a
 * temporary file and copying the contents of the datagram to disk.
 *
 * Returns true on success, false on failure or if this method is
 * unimplemented.
 */ 2 4 this 3 1492  4 info 1 1493  
253 0 0 6 313 1333 0 0 0 1 4 this 3 1492  
254 0 0 6 314 1333 0 0 0 1 4 this 3 1492  
255 0 0 6 315 1494 0 0 159 /**
 * Returns the filename that provides the source for these datagrams, if any,
 * or empty string if the datagrams do not originate from a file on disk.
 */ 1 4 this 3 1492  
256 0 0 6 316 1497 0 0 138 /**
 * Returns the on-disk timestamp of the file that was read, at the time it was
 * opened, if that is available, or 0 if it is not.
 */ 1 4 this 3 1495  
257 0 0 7 317 1348 0 0 156 /**
 * Returns the FileReference that provides the source for these datagrams, if
 * any, or NULL if the datagrams do not originate from a file on disk.
 */ 1 4 this 3 1492  
258 0 0 7 318 1499 1174 0 153 /**
 * Returns the VirtualFile that provides the source for these datagrams, if
 * any, or NULL if the datagrams do not originate from a VirtualFile.
 */ 1 4 this 3 1492  
259 0 0 6 319 1352 0 0 327 /**
 * Returns the current file position within the data stream, if any, or 0 if
 * the file position is not meaningful or cannot be determined.
 *
 * For DatagramGenerators that return a meaningful file position, this will be
 * pointing to the first byte following the datagram returned after a call to
 * get_datagram().
 */ 1 4 this 3 1492  
260 0 0 7 321 1500 964 0 10 /**
 *
 */ 0 
261 0 0 7 321 1500 964 0 10 /**
 *
 */ 2 8 datagram 1 1472  6 offset 5 1334  
262 0 0 7 321 1500 964 0 0 1 6 param0 0 1501  
263 0 0 6 322 1333 0 0 36 /**
 * Extracts a boolean value.
 */ 1 4 this 3 1500  
264 0 0 6 323 1477 0 0 43 /**
 * Extracts a signed 8-bit integer.
 */ 1 4 this 3 1500  
265 0 0 6 324 1479 0 0 46 /**
 * Extracts an unsigned 8-bit integer.
 */ 1 4 this 3 1500  
266 0 0 6 325 1480 0 0 44 /**
 * Extracts a signed 16-bit integer.
 */ 1 4 this 3 1500  
267 0 0 6 326 1482 0 0 44 /**
 * Extracts a signed 32-bit integer.
 */ 1 4 this 3 1500  
268 0 0 6 327 1483 0 0 44 /**
 * Extracts a signed 64-bit integer.
 */ 1 4 this 3 1500  
269 0 0 6 328 1484 0 0 47 /**
 * Extracts an unsigned 16-bit integer.
 */ 1 4 this 3 1500  
270 0 0 6 329 1486 0 0 47 /**
 * Extracts an unsigned 32-bit integer.
 */ 1 4 this 3 1500  
271 0 0 6 330 1487 0 0 47 /**
 * Extracts an unsigned 64-bit integer.
 */ 1 4 this 3 1500  
272 0 0 6 331 1488 0 0 68 /**
 * Extracts a 32-bit single-precision floating-point number.
 */ 1 4 this 3 1500  
273 0 0 6 332 1489 0 0 51 /**
 * Extracts a 64-bit floating-point number.
 */ 1 4 this 3 1500  
274 0 0 6 333 1389 0 0 119 /**
 * Extracts either a 32-bit or a 64-bit floating-point number, according to
 * Datagram::set_stdfloat_double().
 */ 1 4 this 3 1500  
275 0 0 6 334 1480 0 0 55 /**
 * Extracts a signed 16-bit big-endian integer.
 */ 1 4 this 3 1500  
276 0 0 6 335 1482 0 0 55 /**
 * Extracts a signed 32-bit big-endian integer.
 */ 1 4 this 3 1500  
277 0 0 6 336 1483 0 0 55 /**
 * Extracts a signed 64-bit big-endian integer.
 */ 1 4 this 3 1500  
278 0 0 6 337 1484 0 0 58 /**
 * Extracts an unsigned 16-bit big-endian integer.
 */ 1 4 this 3 1500  
279 0 0 6 338 1486 0 0 58 /**
 * Extracts an unsigned 32-bit big-endian integer.
 */ 1 4 this 3 1500  
280 0 0 6 339 1487 0 0 58 /**
 * Extracts an unsigned 64-bit big-endian integer.
 */ 1 4 this 3 1500  
281 0 0 6 340 1488 0 0 79 /**
 * Extracts a 32-bit big-endian single-precision floating-point number.
 */ 1 4 this 3 1500  
282 0 0 6 341 1489 0 0 62 /**
 * Extracts a 64-bit big-endian floating-point number.
 */ 1 4 this 3 1500  
283 0 0 6 342 1453 0 0 45 /**
 * Extracts a variable-length string.
 */ 1 4 this 3 1500  
284 0 0 6 343 1453 0 0 72 /**
 * Extracts a variable-length string with a 32-bit length field.
 */ 1 4 this 3 1500  
285 0 0 6 344 1453 0 0 74 /**
 * Extracts a variable-length string, as a NULL-terminated string.
 */ 1 4 this 3 1500  
286 0 0 6 345 1453 0 0 128 /**
 * Extracts a fixed-length string.  However, if a zero byte occurs within the
 * string, it marks the end of the string.
 */ 2 4 this 3 1500  4 size 1 1334  
287 0 0 6 346 1453 0 0 75 /**
 * Extracts a variable-length wstring (with a 32-bit length field).
 */ 1 4 this 3 1500  
288 0 0 6 347 1474 0 0 50 /**
 * Extracts a variable-length binary blob.
 */ 1 4 this 3 1500  
289 0 0 6 348 1474 0 0 75 /**
 * Extracts a variable-length binary blob with a 32-bit size field.
 */ 1 4 this 3 1500  
290 0 0 4 349 1404 0 0 68 /**
 * Skips over the indicated number of bytes in the datagram.
 */ 2 4 this 3 1500  4 size 1 1334  
291 0 0 6 350 1474 0 0 98 /**
 * Extracts the indicated number of bytes in the datagram and returns them as
 * a string.
 */ 2 4 this 3 1500  4 size 1 1334  
292 0 0 6 351 1474 0 0 115 /**
 * Returns the remaining bytes in the datagram as a string, but does not
 * extract them from the iterator.
 */ 1 4 this 3 1501  
293 0 0 6 352 1334 0 0 49 /**
 * Return the bytes left in the datagram.
 */ 1 4 this 3 1501  
294 0 0 6 353 1472 0 0 48 /**
 * Return the datagram of this iterator.
 */ 1 4 this 3 1501  
295 0 0 6 354 1334 0 0 100 /**
 * Returns the current position within the datagram of the next piece of data
 * to extract.
 */ 1 4 this 3 1501  
296 0 0 4 355 1404 0 0 67 /**
 * Write a string representation of this instance to <out>.
 */ 2 4 this 3 1501  3 out 1 1416  
297 0 0 4 356 1404 0 0 67 /**
 * Write a string representation of this instance to <out>.
 */ 3 4 this 3 1501  3 out 1 1416  6 indent 5 1476  
298 0 0 7 357 1451 0 0 0 0 
299 0 0 6 361 1333 0 0 0 2 4 this 3 1503  4 data 1 1472  
300 0 0 6 362 1333 0 0 349 /**
 * Copies the file data from the entire indicated file (via the vfs) as the
 * next datagram.  This is intended to support potentially very large
 * datagrams.
 *
 * Returns true on success, false on failure or if this method is
 * unimplemented.  On true, fills "result" with the information that
 * references the copied file, if possible.
 */ 3 4 this 3 1503  6 result 1 1493  8 filename 1 1494  
301 0 0 6 362 1333 0 0 362 /**
 * Copies the file data from the range of the indicated file (outside of the
 * vfs) as the next datagram.  This is intended to support potentially very
 * large datagrams.
 *
 * Returns true on success, false on failure or if this method is
 * unimplemented.  On true, fills "result" with the information that
 * references the copied file, if possible.
 */ 3 4 this 3 1503  6 result 1 1493  6 source 1 1504  
302 0 0 6 363 1333 0 0 0 1 4 this 3 1503  
303 0 0 4 364 1404 0 0 0 1 4 this 3 1503  
304 0 0 6 365 1494 0 0 159 /**
 * Returns the filename that provides the target for these datagrams, if any,
 * or empty string if the datagrams do not get written to a file on disk.
 */ 1 4 this 3 1503  
305 0 0 7 366 1348 0 0 152 /**
 * Returns the FileReference that provides the target for these datagrams, if
 * any, or NULL if the datagrams do not written to a file on disk.
 */ 1 4 this 3 1503  
306 0 0 6 367 1352 0 0 322 /**
 * Returns the current file position within the data stream, if any, or 0 if
 * the file position is not meaningful or cannot be determined.
 *
 * For DatagramSinks that return a meaningful file position, this will be
 * pointing to the first byte following the datagram returned after a call to
 * put_datagram().
 */ 1 4 this 3 1503  
307 0 0 7 382 1506 982 0 0 1 6 param0 0 1348  
308 0 0 7 382 1506 982 0 10 /**
 *
 */ 1 8 filename 1 1494  
309 0 0 6 383 1494 0 0 49 /**
 * Returns the filename of the reference.
 */ 1 4 this 3 1348  
310 0 0 7 384 1451 0 0 0 0 
311 0 0 7 380 1451 0 0 0 0 
312 0 0 6 376 1508 0 0 0 1 4 this 3 1507  
313 0 0 7 378 1463 845 0 0 1 4 this 3 1507  
314 0 0 7 401 1509 1002 0 10 /**
 *
 */ 0 
315 0 0 7 401 1509 1002 0 0 1 6 param0 0 1510  
316 0 0 4 402 1404 0 0 130 /**
 * Moves the data pointer to the indicated byte position.  It is not an error
 * to move the pointer past the end of data.
 */ 2 4 this 3 1509  3 pos 1 1334  
317 0 0 6 403 1334 0 0 106 /**
 * Returns the current data pointer position as a byte offset from the
 * beginning of the stream.
 */ 1 4 this 3 1510  
318 0 0 6 404 1405 0 0 319 /**
 * Extracts and returns the indicated number of characters from the current
 * data pointer, and advances the data pointer.  If the data pointer exceeds
 * the end of the buffer, returns empty string.
 *
 * The interface here is intentionally designed to be similar to that for
 * Python's file.read() function.
 */ 2 4 this 3 1509  6 length 1 1334  
319 0 0 6 405 1405 0 0 303 /**
 * Assumes the stream represents a text file, and extracts one line up to and
 * including the trailing newline character.  Returns empty string when the
 * end of file is reached.
 *
 * The interface here is intentionally designed to be similar to that for
 * Python's file.readline() function.
 */ 1 4 this 3 1509  
320 0 0 6 406 1405 0 0 0 1 4 this 3 1509  
321 0 0 6 407 1405 0 0 101 /**
 * Returns the entire buffer contents as a string, regardless of the current
 * data pointer.
 */ 1 4 this 3 1510  
322 0 0 6 408 1334 0 0 58 /**
 * Returns the size of the entire buffer contents.
 */ 1 4 this 3 1510  
323 0 0 4 409 1404 0 0 47 /**
 * Empties the current buffer contents.
 */ 1 4 this 3 1509  
324 0 0 7 412 1512 1033 0 10 /**
 *
 */ 0 
325 0 0 7 412 1512 1033 0 10 /**
 *
 */ 1 4 copy 1 1513  
326 0 0 6 413 1512 0 0 0 2 4 this 3 1512  4 copy 1 1513  
327 0 0 6 414 1333 0 0 0 2 4 this 3 1513  5 other 1 1513  
328 0 0 6 415 1333 0 0 0 2 4 this 3 1513  5 other 1 1513  
329 0 0 6 416 1333 0 0 0 2 4 this 3 1513  5 other 1 1513  
330 0 0 6 417 1337 0 0 10 /**
 *
 */ 2 4 this 3 1513  5 other 1 1513  
331 0 0 4 418 1404 0 0 86 /**
 * Generates a new HashVal representing the xor of this one and the other one.
 */ 2 4 this 3 1512  5 other 1 1513  
332 0 0 4 419 1404 0 0 65 /**
 * Outputs the HashVal as four unsigned decimal integers.
 */ 2 4 this 3 1513  3 out 1 1416  
333 0 0 4 420 1404 0 0 64 /**
 * Inputs the HashVal as four unsigned decimal integers.
 */ 2 4 this 3 1512  2 in 1 1514  
334 0 0 4 421 1404 0 0 64 /**
 * Outputs the HashVal as a 32-digit hexadecimal number.
 */ 2 4 this 3 1513  3 out 1 1416  
335 0 0 4 422 1404 0 0 63 /**
 * Inputs the HashVal as a 32-digit hexadecimal number.
 */ 2 4 this 3 1512  2 in 1 1514  
336 0 0 4 423 1404 0 0 128 /**
 * Outputs the HashVal as a binary stream of bytes in order.  This is not the
 * same order generated by write_stream().
 */ 2 4 this 3 1513  3 out 1 1416  
337 0 0 4 424 1404 0 0 125 /**
 * Inputs the HashVal as a binary stream of bytes in order.  This is not the
 * same order expected by read_stream().
 */ 2 4 this 3 1512  2 in 1 1514  
338 0 0 4 425 1404 0 0 10 /**
 *
 */ 2 4 this 3 1513  3 out 1 1416  
339 0 0 6 426 1453 0 0 69 /**
 * Returns the HashVal as a string with four decimal numbers.
 */ 1 4 this 3 1513  
340 0 0 6 427 1333 0 0 112 /**
 * Sets the HashVal from a string with four decimal numbers.  Returns true if
 * valid, false otherwise.
 */ 2 4 this 3 1512  4 text 1 1453  
341 0 0 6 428 1453 0 0 63 /**
 * Returns the HashVal as a 32-byte hexadecimal string.
 */ 1 4 this 3 1513  
342 0 0 6 429 1333 0 0 111 /**
 * Sets the HashVal from a 32-byte hexademical string.  Returns true if
 * successful, false otherwise.
 */ 2 4 this 3 1512  4 text 1 1453  
343 0 0 6 430 1474 0 0 58 /**
 * Returns the HashVal as a 16-byte binary string.
 */ 1 4 this 3 1513  
344 0 0 6 431 1333 0 0 106 /**
 * Sets the HashVal from a 16-byte binary string.  Returns true if successful,
 * false otherwise.
 */ 2 4 this 3 1512  4 text 1 1474  
345 0 0 4 432 1404 0 0 10 /**
 *
 */ 2 4 this 3 1513  11 destination 1 1471  
346 0 0 4 433 1404 0 0 10 /**
 *
 */ 2 4 this 3 1512  6 source 1 1500  
347 0 0 4 434 1404 0 0 10 /**
 *
 */ 2 4 this 3 1513  11 destination 1 1515  
348 0 0 4 435 1404 0 0 10 /**
 *
 */ 2 4 this 3 1512  6 source 1 1517  
349 0 0 6 436 1333 0 0 232 /**
 * Generates the hash value from the indicated file.  Returns true on success,
 * false if the file cannot be read.  This method is only defined if we have
 * the OpenSSL library (which provides md5 functionality) available.
 */ 2 4 this 3 1512  8 filename 1 1494  
350 0 0 6 437 1333 0 0 232 /**
 * Generates the hash value from the indicated file.  Returns true on success,
 * false if the file cannot be read.  This method is only defined if we have
 * the OpenSSL library (which provides md5 functionality) available.
 */ 2 4 this 3 1512  6 stream 1 1514  
351 0 0 4 438 1404 0 0 178 /**
 * Generates the hash value by hashing the indicated data.  This method is
 * only defined if we have the OpenSSL library (which provides md5
 * functionality) available.
 */ 2 4 this 3 1512  7 ramfile 1 1510  
352 0 0 4 439 1404 0 0 178 /**
 * Generates the hash value by hashing the indicated data.  This method is
 * only defined if we have the OpenSSL library (which provides md5
 * functionality) available.
 */ 2 4 this 3 1512  4 data 1 1453  
353 0 0 4 440 1404 0 0 178 /**
 * Generates the hash value by hashing the indicated data.  This method is
 * only defined if we have the OpenSSL library (which provides md5
 * functionality) available.
 */ 2 4 this 3 1512  4 data 1 1474  
354 0 0 4 441 1404 0 0 178 /**
 * Generates the hash value by hashing the indicated data.  This method is
 * only defined if we have the OpenSSL library (which provides md5
 * functionality) available.
 */ 3 4 this 3 1512  6 buffer 1 1453  6 length 1 1337  
355 0 0 7 444 1460 1035 0 10 /**
 *
 */ 0 
356 0 0 7 444 1460 1035 0 0 1 6 param0 0 1519  
357 0 0 6 446 1334 0 0 53 /**
 * Returns the number of pointers in the set.
 */ 1 4 this 3 1519  
358 0 0 7 447 1463 845 0 46 /**
 * Returns the nth pointer of the set.
 */ 2 4 this 3 1519  1 n 1 1334  
359 0 0 6 449 1508 0 0 175 /**
 * Returns the nth pointer of the set, typecast to a TypedObject if possible.
 * If the pointer is not a TypedObject or if the cast cannot be made, returns
 * nullptr.
 */ 2 4 this 3 1519  1 n 1 1334  
360 0 0 7 451 1451 0 0 70 /**
 * Returns the actual type of the nth pointer, if it is known.
 */ 2 4 this 3 1519  1 n 1 1334  
361 0 0 6 452 1453 0 0 68 /**
 * Returns the type name of the nth pointer, if it is known.
 */ 2 4 this 3 1519  1 n 1 1334  
362 0 0 6 453 1387 0 0 197 /**
 * Returns the age of the nth pointer: the number of seconds elapsed between
 * the time it was allocated and the time it was added to this set via a call
 * to MemoryUsage::get_pointers().
 */ 2 4 this 3 1519  1 n 1 1334  
363 0 0 6 454 1405 0 0 0 2 4 this 3 1519  1 n 1 1334  
364 0 0 4 455 1404 0 0 39 /**
 * Empties the set of pointers.
 */ 1 4 this 3 1460  
365 0 0 4 456 1404 0 0 10 /**
 *
 */ 2 4 this 3 1519  3 out 1 1416  
366 0 0 7 459 1521 1048 0 10 /**
 *
 */ 0 
367 0 0 7 459 1521 1048 0 10 /**
 *
 */ 3 6 source 1 1522  5 start 1 1352  3 end 1 1352  
368 0 0 6 460 1521 0 0 391 /**
 * Starts the SubStream reading from the indicated source, with the first
 * character being the character at position "start" within the source, for
 * end - start total characters.  The character at "end" within the source
 * will never be read; this will appear to be EOF.
 *
 * If end is zero, it indicates that the ISubStream will continue until the
 * end of the source stream.
 */ 4 4 this 3 1521  6 source 1 1522  5 start 1 1352  3 end 1 1352  
369 0 0 6 461 1521 0 0 92 /**
 * Resets the SubStream to empty, but does not actually close the source
 * istream.
 */ 1 4 this 3 1521  
370 0 0 7 465 1524 1052 0 10 /**
 *
 */ 0 
371 0 0 7 465 1524 1052 0 10 /**
 *
 */ 4 4 dest 1 1525  5 start 1 1352  3 end 1 1352  6 append 5 1333  
372 0 0 6 466 1524 0 0 383 /**
 * Starts the SubStream reading from the indicated dest, with the first
 * character being the character at position "start" within the dest, for end
 * - start total characters.  The character at "end" within the dest will
 * never be read; this will appear to be EOF.
 *
 * If end is zero, it indicates that the OSubStream will continue until the
 * end of the dest stream.
 */ 5 4 this 3 1524  4 dest 1 1525  5 start 1 1352  3 end 1 1352  6 append 5 1333  
373 0 0 6 467 1524 0 0 90 /**
 * Resets the SubStream to empty, but does not actually close the dest
 * ostream.
 */ 1 4 this 3 1524  
374 0 0 7 471 1527 1056 0 10 /**
 *
 */ 0 
375 0 0 7 471 1527 1056 0 10 /**
 *
 */ 4 6 nested 1 1528  5 start 1 1352  3 end 1 1352  6 append 5 1333  
376 0 0 6 472 1527 0 0 278 /**
 * Starts the SubStream reading and writing from the indicated nested stream,
 * within the indicated range.  "end" is the first character outside of the
 * range.
 *
 * If end is zero, it indicates that the SubStream will continue until the end
 * of the nested stream.
 */ 5 4 this 3 1527  6 nested 1 1528  5 start 1 1352  3 end 1 1352  6 append 5 1333  
377 0 0 6 473 1527 0 0 92 /**
 * Resets the SubStream to empty, but does not actually close the nested
 * ostream.
 */ 1 4 this 3 1527  
378 0 0 7 476 1530 845 0 10 /**
 *
 */ 0 
379 0 0 6 477 1333 0 0 352 /**
 * Opens the named Multifile on disk for reading.  The Multifile index is read
 * in, and the list of subfiles becomes available; individual subfiles may
 * then be extracted or read, but the list of subfiles may not be modified.
 *
 * Also see the version of open_read() which accepts an istream.  Returns true
 * on success, false on failure.
 */ 3 4 this 3 1530  14 multifile_name 1 1494  6 offset 5 1352  
380 0 0 6 477 1333 0 0 333 /**
 * Opens an anonymous Multifile for reading using an istream.  There must be
 * seek functionality via seekg() and tellg() on the istream.
 *
 * If owns_pointer is true, then the Multifile assumes ownership of the stream
 * pointer and will delete it when the multifile is closed, including if this
 * function returns false.
 */ 4 4 this 3 1530  16 multifile_stream 1 1522  12 owns_pointer 5 1333  6 offset 5 1352  
381 0 0 6 478 1333 0 0 420 /**
 * Opens the named Multifile on disk for writing.  If there already exists a
 * file by that name, it is truncated.  The Multifile is then prepared for
 * accepting a brand new set of subfiles, which will be written to the
 * indicated filename.  Individual subfiles may not be extracted or read.
 *
 * Also see the version of open_write() which accepts an ostream.  Returns
 * true on success, false on failure.
 */ 2 4 this 3 1530  14 multifile_name 1 1494  
382 0 0 6 478 1333 0 0 333 /**
 * Opens an anonymous Multifile for writing using an ostream.  There must be
 * seek functionality via seekp() and tellp() on the pstream.
 *
 * If owns_pointer is true, then the Multifile assumes ownership of the stream
 * pointer and will delete it when the multifile is closed, including if this
 * function returns false.
 */ 3 4 this 3 1530  16 multifile_stream 1 1416  12 owns_pointer 5 1333  
383 0 0 6 479 1333 0 0 360 /**
 * Opens the named Multifile on disk for reading and writing.  If there
 * already exists a file by that name, its index is read.  Subfiles may be
 * added or removed, and the resulting changes will be written to the named
 * file.
 *
 * Also see the version of open_read_write() which accepts an iostream.
 * Returns true on success, false on failure.
 */ 2 4 this 3 1530  14 multifile_name 1 1494  
384 0 0 6 479 1333 0 0 365 /**
 * Opens an anonymous Multifile for reading and writing using an iostream.
 * There must be seek functionality via seekg()/seekp() and tellg()/tellp() on
 * the iostream.
 *
 * If owns_pointer is true, then the Multifile assumes ownership of the stream
 * pointer and will delete it when the multifile is closed, including if this
 * function returns false.
 */ 3 4 this 3 1530  16 multifile_stream 1 1531  12 owns_pointer 5 1333  
385 0 0 4 480 1404 0 0 169 /**
 * Closes the Multifile if it is open.  All changes are flushed to disk, and
 * the file becomes invalid for further operations until the next call to
 * open().
 */ 1 4 this 3 1530  
386 0 0 6 481 1494 0 0 69 /**
 * Returns the filename of the Multifile, if it is available.
 */ 1 4 this 3 1532  
387 0 0 4 482 1404 0 0 209 /**
 * Replaces the filename of the Multifile.  This is primarily used for
 * documentation purposes only; changing this name does not open the indicated
 * file.  See open_read() or open_write() for that.
 */ 2 4 this 3 1530  14 multifile_name 1 1494  
388 0 0 6 483 1333 0 0 154 /**
 * Returns true if the Multifile has been opened for read mode and there have
 * been no errors, and individual Subfile contents may be extracted.
 */ 1 4 this 3 1532  
389 0 0 6 484 1333 0 0 162 /**
 * Returns true if the Multifile has been opened for write mode and there have
 * been no errors, and Subfiles may be added or removed from the Multifile.
 */ 1 4 this 3 1532  
390 0 0 6 485 1333 0 0 118 /**
 * Returns true if the Multifile index is suboptimal and should be repacked.
 * Call repack() to achieve this.
 */ 1 4 this 3 1532  
391 0 0 6 486 1497 0 0 299 /**
 * Returns the modification timestamp of the overall Multifile.  This
 * indicates the most recent date at which subfiles were added or removed from
 * the Multifile.  Note that it is logically possible for an individual
 * subfile to have a more recent timestamp than the overall timestamp.
 */ 1 4 this 3 1532  
392 0 0 4 487 1404 0 0 206 /**
 * Changes the overall mudification timestamp of the multifile.  Note that this
 * will be reset to the current time every time you modify a subfile.
 * Only set this if you know what you are doing!
 */ 2 4 this 3 1530  9 timestamp 1 1497  
393 0 0 4 488 1404 0 0 529 /**
 * Sets the flag indicating whether timestamps should be recorded within the
 * Multifile or not.  The default is true, indicating the Multifile will
 * record timestamps for the overall file and also for each subfile.
 *
 * If this is false, the Multifile will not record timestamps internally.  In
 * this case, the return value from get_timestamp() or get_subfile_timestamp()
 * will be estimations.
 *
 * You may want to set this false to minimize the bitwise difference between
 * independently-generated Multifiles.
 */ 2 4 this 3 1530  16 record_timestamp 1 1333  
394 0 0 6 489 1333 0 0 137 /**
 * Returns the flag indicating whether timestamps should be recorded within
 * the Multifile or not.  See set_record_timestamp().
 */ 1 4 this 3 1532  
395 0 0 4 490 1404 0 0 782 /**
 * Changes the internal scale factor for this Multifile.
 *
 * This is normally 1, but it may be set to any arbitrary value (greater than
 * zero) to support Multifile archives that exceed 4GB, if necessary.
 * (Individual subfiles may still not exceed 4GB.)
 *
 * All addresses within the file are rounded up to the next multiple of
 * _scale_factor, and zeros are written to the file to fill the resulting
 * gaps.  Then the address is divided by _scale_factor and written out as a
 * 32-bit integer.  Thus, setting a scale factor of 2 supports up to 8GB
 * files, 3 supports 12GB files, etc.
 *
 * Calling this function on an already-existing Multifile will have no
 * immediate effect until a future call to repack() or close() (or until the
 * Multifile is destructed).
 */ 2 4 this 3 1530  12 scale_factor 1 1334  
396 0 0 6 491 1334 0 0 92 /**
 * Returns the internal scale factor for this Multifile.  See
 * set_scale_factor().
 */ 1 4 this 3 1532  
397 0 0 4 492 1404 0 0 461 /**
 * Sets the flag indicating whether subsequently-added subfiles should be
 * encrypted before writing them to the multifile.  If true, subfiles will be
 * encrypted; if false (the default), they will be written without encryption.
 *
 * When true, subfiles will be encrypted with the password specified by
 * set_encryption_password().  It is possible to apply a different password to
 * different files, but the resulting file can't be mounted via VFS.
 */ 2 4 this 3 1530  4 flag 1 1333  
398 0 0 6 493 1333 0 0 163 /**
 * Returns the flag indicating whether subsequently-added subfiles should be
 * encrypted before writing them to the multifile.  See set_encryption_flag().
 */ 1 4 this 3 1532  
399 0 0 4 494 1404 0 0 369 /**
 * Specifies the password that will be used to encrypt subfiles subsequently
 * added to the multifile, if the encryption flag is also set true (see
 * set_encryption_flag()).
 *
 * It is possible to apply a different password to different files, but the
 * resulting file can't be mounted via VFS.  Changing this value may cause an
 * implicit call to flush().
 */ 2 4 this 3 1530  19 encryption_password 1 1453  
400 0 0 6 495 1453 0 0 141 /**
 * Returns the password that will be used to encrypt subfiles subsequently
 * added to the multifile.  See set_encryption_password().
 */ 1 4 this 3 1532  
401 0 0 4 496 1404 0 0 659 /**
 * Specifies the encryption algorithm that should be used for future calls to
 * add_subfile().  The default is whatever is specified by the encryption-
 * algorithm config variable.  The complete set of available algorithms is
 * defined by the current version of OpenSSL.
 *
 * If an invalid algorithm is specified, there is no immediate error return
 * code, but flush() will fail and the file will be invalid.
 *
 * It is possible to apply a different encryption algorithm to different
 * files, and unlike the password, this does not interfere with mounting the
 * multifile via VFS.  Changing this value may cause an implicit call to
 * flush().
 */ 2 4 this 3 1530  20 encryption_algorithm 1 1453  
402 0 0 6 497 1453 0 0 96 /**
 * Returns the encryption algorithm that was specified by
 * set_encryption_algorithm().
 */ 1 4 this 3 1532  
403 0 0 4 498 1404 0 0 611 /**
 * Specifies the length of the key, in bits, that should be used to encrypt
 * the stream in future calls to add_subfile().  The default is whatever is
 * specified by the encryption-key-length config variable.
 *
 * If an invalid key_length for the chosen algorithm is specified, there is no
 * immediate error return code, but flush() will fail and the file will be
 * invalid.
 *
 * It is possible to apply a different key length to different files, and
 * unlike the password, this does not interfere with mounting the multifile
 * via VFS. Changing this value may cause an implicit call to flush().
 */ 2 4 this 3 1530  21 encryption_key_length 1 1337  
404 0 0 6 499 1337 0 0 108 /**
 * Returns the encryption key length, in bits, that was specified by
 * set_encryption_key_length().
 */ 1 4 this 3 1532  
405 0 0 4 500 1404 0 0 740 /**
 * Specifies the number of times to repeatedly hash the key before writing it
 * to the stream in future calls to add_subfile().  Its purpose is to make it
 * computationally more expensive for an attacker to search the key space
 * exhaustively.  This should be a multiple of 1,000 and should not exceed
 * about 65 million; the value 0 indicates just one application of the hashing
 * algorithm.
 *
 * The default is whatever is specified by the multifile-encryption-iteration-
 * count config variable.
 *
 * It is possible to apply a different iteration count to different files, and
 * unlike the password, this does not interfere with mounting the multifile
 * via VFS.  Changing this value causes an implicit call to flush().
 */ 2 4 this 3 1530  26 encryption_iteration_count 1 1337  
406 0 0 6 501 1337 0 0 84 /**
 * Returns the value that was specified by set_encryption_iteration_count().
 */ 1 4 this 3 1532  
407 0 0 6 502 1453 0 0 618 /**
 * Adds a file on disk as a subfile to the Multifile.  The file named by
 * filename will be read and added to the Multifile at the next call to
 * flush().  If there already exists a subfile with the indicated name, it is
 * replaced without examining its contents (but see also update_subfile).
 *
 * Either Filename:::set_binary() or set_text() must have been called
 * previously to specify the nature of the source file.  If set_text() was
 * called, the text flag will be set on the subfile.
 *
 * Returns the subfile name on success (it might have been modified slightly),
 * or empty string on failure.
 */ 4 4 this 3 1530  12 subfile_name 1 1453  8 filename 1 1494  17 compression_level 1 1337  
408 0 0 6 502 1453 0 0 777 /**
 * Adds a file from a stream as a subfile to the Multifile.  The indicated
 * istream will be read and its contents added to the Multifile at the next
 * call to flush(). The file will be added as a binary subfile.
 *
 * Note that the istream must remain untouched and unused by any other code
 * until flush() is called.  At that time, the Multifile will read the entire
 * contents of the istream from the current file position to the end of the
 * file.  Subsequently, the Multifile will *not* close or delete the istream.
 * It is the caller's responsibility to ensure that the istream pointer does
 * not destruct during the lifetime of the Multifile.
 *
 * Returns the subfile name on success (it might have been modified slightly),
 * or empty string on failure.
 */ 4 4 this 3 1530  12 subfile_name 1 1453  12 subfile_data 1 1514  17 compression_level 1 1337  
409 0 0 6 503 1453 0 0 451 /**
 * Adds a file on disk to the subfile.  If a subfile already exists with the
 * same name, its contents are compared byte-for-byte to the disk file, and it
 * is replaced only if it is different; otherwise, the multifile is left
 * unchanged.
 *
 * Either Filename:::set_binary() or set_text() must have been called
 * previously to specify the nature of the source file.  If set_text() was
 * called, the text flag will be set on the subfile.
 */ 4 4 this 3 1530  12 subfile_name 1 1453  8 filename 1 1494  17 compression_level 1 1337  
410 0 0 6 504 1333 0 0 1292 /**
 * Adds a new signature to the Multifile.  This signature associates the
 * indicated certificate with the current contents of the Multifile.  When the
 * Multifile is read later, the signature will still be present only if the
 * Multifile is unchanged; any subsequent changes to the Multifile will
 * automatically invalidate and remove the signature.
 *
 * The chain filename may be empty if the certificate does not require an
 * authenticating certificate chain (e.g.  because it is self-signed).
 *
 * The specified private key must match the certificate, and the Multifile
 * must be open in read-write mode.  The private key is only used for
 * generating the signature; it is not written to the Multifile and cannot be
 * retrieved from the Multifile later.  (However, the certificate *can* be
 * retrieved from the Multifile later, to identify the entity that created the
 * signature.)
 *
 * This implicitly causes a repack() operation if one is needed.  Returns true
 * on success, false on failure.
 *
 * This flavor of add_signature() reads the certificate and private key from a
 * PEM-formatted file, for instance as generated by the openssl command.  If
 * the private key file is password-encrypted, the third parameter will be
 * used as the password to decrypt it.
 */ 5 4 this 3 1530  11 certificate 1 1494  5 chain 1 1494  4 pkey 1 1494  8 password 5 1453  
411 0 0 6 504 1333 0 0 724 /**
 * Adds a new signature to the Multifile.  This signature associates the
 * indicated certificate with the current contents of the Multifile.  When the
 * Multifile is read later, the signature will still be present only if the
 * Multifile is unchanged; any subsequent changes to the Multifile will
 * automatically invalidate and remove the signature.
 *
 * This flavor of add_signature() reads the certificate, private key, and
 * certificate chain from the same PEM-formatted file.  It takes the first
 * private key found as the intended key, and then uses the first certificate
 * found that matches that key as the signing certificate.  Any other
 * certificates in the file are taken to be part of the chain.
 */ 3 4 this 3 1530  9 composite 1 1494  8 password 5 1453  
412 0 0 6 505 1337 0 0 555 /**
 * Returns the number of matching signatures found on the Multifile.  These
 * signatures may be iterated via get_signature() and related methods.
 *
 * A signature on this list is guaranteed to match the Multifile contents,
 * proving that the Multifile has been unmodified since the signature was
 * applied.  However, this does not guarantee that the certificate itself is
 * actually from who it says it is from; only that it matches the Multifile
 * contents.  See validate_signature_certificate() to authenticate a
 * particular certificate.
 */ 1 4 this 3 1532  
413 0 0 6 506 1453 0 0 352 /**
 * Returns the "subject name" for the nth signature found on the Multifile.
 * This is a string formatted according to RFC2253 that should more-or-less
 * identify a particular certificate; when paired with the public key (see
 * get_signature_public_key()), it can uniquely identify a certificate.  See
 * the comments in get_num_signatures().
 */ 2 4 this 3 1532  1 n 1 1337  
414 0 0 6 507 1453 0 0 299 /**
 * Returns a "friendly name" for the nth signature found on the Multifile.
 * This attempts to extract out the most meaningful part of the subject name.
 * It returns the emailAddress, if it is defined; otherwise, it returns the
 * commonName.
 *
 * See the comments in get_num_signatures().
 */ 2 4 this 3 1532  1 n 1 1337  
415 0 0 6 508 1453 0 0 379 /**
 * Returns the public key used for the nth signature found on the Multifile.
 * This is encoded in DER form and returned as a string of hex digits.
 *
 * This can be used, in conjunction with the subject name (see
 * get_signature_subject_name()), to uniquely identify a particular
 * certificate and its subsequent reissues.  See the comments in
 * get_num_signatures().
 */ 2 4 this 3 1532  1 n 1 1337  
416 0 0 4 509 1404 0 0 158 /**
 * Writes the certificate for the nth signature, in user-readable verbose
 * form, to the indicated stream.  See the comments in get_num_signatures().
 */ 3 4 this 3 1532  1 n 1 1337  3 out 1 1416  
417 0 0 4 510 1404 0 0 140 /**
 * Writes the certificate for the nth signature, in PEM form, to the indicated
 * stream.  See the comments in get_num_signatures().
 */ 3 4 this 3 1532  1 n 1 1337  3 out 1 1416  
418 0 0 6 511 1337 0 0 289 /**
 * Checks that the certificate used for the nth signature is a valid,
 * authorized certificate with some known certificate authority.  Returns 0 if
 * it is valid, -1 if there is some error, or the corresponding OpenSSL error
 * code if it is invalid, out-of-date, or self-signed.
 */ 2 4 this 3 1532  1 n 1 1337  
419 0 0 6 512 1333 0 0 691 /**
 * Writes all contents of the Multifile to disk.  Until flush() is called,
 * add_subfile() and remove_subfile() do not actually do anything to disk.  At
 * this point, all of the recently-added subfiles are read and their contents
 * are added to the end of the Multifile, and the recently-removed subfiles
 * are marked gone from the Multifile.
 *
 * This may result in a suboptimal index.  To guarantee that the index is
 * written at the beginning of the file, call repack() instead of flush().
 *
 * It is not necessary to call flush() explicitly unless you are concerned
 * about reading the recently-added subfiles immediately.
 *
 * Returns true on success, false on failure.
 */ 1 4 this 3 1530  
420 0 0 6 513 1333 0 0 587 /**
 * Forces a complete rewrite of the Multifile and all of its contents, so that
 * its index will appear at the beginning of the file with all of the subfiles
 * listed in alphabetical order.  This is considered optimal for reading, and
 * is the standard configuration; but it is not essential to do this.
 *
 * It is only valid to call this if the Multifile was opened using
 * open_read_write() and an explicit filename, rather than an iostream.  Also,
 * we must have write permission to the directory containing the Multifile.
 *
 * Returns true on success, false on failure.
 */ 1 4 this 3 1530  
421 0 0 6 514 1337 0 0 169 /**
 * Returns the number of subfiles within the Multifile.  The subfiles may be
 * accessed in alphabetical order by iterating through [0 ..
 * get_num_subfiles()).
 */ 1 4 this 3 1532  
422 0 0 6 515 1337 0 0 127 /**
 * Returns the index of the subfile with the indicated name, or -1 if the
 * named subfile is not within the Multifile.
 */ 2 4 this 3 1532  12 subfile_name 1 1453  
423 0 0 6 516 1333 0 0 203 /**
 * Returns true if the indicated subfile name is the directory prefix to one
 * or more files within the Multifile.  That is, the Multifile contains at
 * least one file named "subfile_name/...".
 */ 2 4 this 3 1532  12 subfile_name 1 1453  
424 0 0 6 517 1333 0 0 420 /**
 * Considers subfile_name to be the name of a subdirectory within the
 * Multifile, but not a file itself; fills the given vector up with the sorted
 * list of subdirectories or files within the named directory.
 *
 * Note that directories do not exist explicitly within a Multifile; this just
 * checks for the existence of files with the given initial prefix.
 *
 * Returns true if successful, false otherwise.
 */ 3 4 this 3 1532  8 contents 1 1534  12 subfile_name 1 1453  
425 0 0 4 518 1404 0 0 435 /**
 * Removes the nth subfile from the Multifile.  This will cause all subsequent
 * index numbers to decrease by one.  The file will not actually be removed
 * from the disk until the next call to flush().
 *
 * Note that this does not actually remove the data from the indicated
 * subfile; it simply removes it from the index.  The Multifile will not be
 * reduced in size after this operation, until the next call to repack().
 */ 2 4 this 3 1530  5 index 1 1337  
426 0 0 6 518 1333 0 0 475 /**
 * Removes the named subfile from the Multifile, if it exists; returns true if
 * successfully removed, or false if it did not exist in the first place.  The
 * file will not actually be removed from the disk until the next call to
 * flush().
 *
 * Note that this does not actually remove the data from the indicated
 * subfile; it simply removes it from the index.  The Multifile will not be
 * reduced in size after this operation, until the next call to repack().
 */ 2 4 this 3 1530  12 subfile_name 1 1453  
427 0 0 6 519 1453 0 0 47 /**
 * Returns the name of the nth subfile.
 */ 2 4 this 3 1532  5 index 1 1337  
428 0 0 6 521 1334 0 0 170 /**
 * Returns the uncompressed data length of the nth subfile.  This might return
 * 0 if the subfile has recently been added and flush() has not yet been
 * called.
 */ 2 4 this 3 1532  5 index 1 1337  
429 0 0 6 522 1497 0 0 270 /**
 * Returns the modification time of the nth subfile.  If this is called on an
 * older .mf file, which did not store individual timestamps in the file (or
 * if get_record_timestamp() is false), this will return the modification time
 * of the overall multifile.
 */ 2 4 this 3 1532  5 index 1 1337  
430 0 0 6 523 1333 0 0 120 /**
 * Returns true if the indicated subfile has been compressed when stored
 * within the archive, false otherwise.
 */ 2 4 this 3 1532  5 index 1 1337  
431 0 0 6 524 1333 0 0 119 /**
 * Returns true if the indicated subfile has been encrypted when stored within
 * the archive, false otherwise.
 */ 2 4 this 3 1532  5 index 1 1337  
432 0 0 6 525 1333 0 0 343 /**
 * Returns true if the indicated subfile represents text data, or false if it
 * represents binary data.  If the file is text data, it may have been
 * processed by end-of-line conversion when it was added.  (But the actual
 * bits in the multifile will represent the standard Unix end-of-line
 * convention, e.g.  \n instead of \r\n.)
 */ 2 4 this 3 1532  5 index 1 1337  
433 0 0 6 526 1352 0 0 371 /**
 * Returns the first byte that is guaranteed to follow any index byte already
 * written to disk in the Multifile.
 *
 * This number is largely meaningless in many cases, but if needs_repack() is
 * false, and the file is flushed, this will indicate the number of bytes in
 * the header + index.  Everything at this byte position and later will be
 * actual data.
 */ 1 4 this 3 1532  
434 0 0 6 527 1352 0 0 338 /**
 * Returns the starting byte position within the Multifile at which the
 * indicated subfile begins.  This may be used, with
 * get_subfile_internal_length(), for low-level access to the subfile, but
 * usually it is better to use open_read_subfile() instead (which
 * automatically decrypts and/or uncompresses the subfile data).
 */ 2 4 this 3 1532  5 index 1 1337  
435 0 0 6 528 1334 0 0 322 /**
 * Returns the number of bytes the indicated subfile consumes within the
 * archive.  For compressed subfiles, this will generally be smaller than
 * get_subfile_length(); for encrypted (but noncompressed) subfiles, it may be
 * slightly different, for noncompressed and nonencrypted subfiles, it will be
 * equal.
 */ 2 4 this 3 1532  5 index 1 1337  
436 0 0 6 529 1474 0 0 96 /**
 * Returns a vector_uchar that contains the entire contents of the indicated
 * subfile.
 */ 2 4 this 3 1530  5 index 1 1337  
437 0 0 6 530 1514 0 0 745 /**
 * Returns an istream that may be used to read the indicated subfile.  You may
 * seek() within this istream to your heart's content; even though it will be
 * a reference to the already-opened pfstream of the Multifile itself, byte 0
 * appears to be the beginning of the subfile and EOF appears to be the end of
 * the subfile.
 *
 * The returned istream will have been allocated via new; you should pass the
 * pointer to close_read_subfile() when you are finished with it to delete it
 * and release its resources.
 *
 * Any future calls to repack() or close() (or the Multifile destructor) will
 * invalidate all currently open subfile pointers.
 *
 * The return value will be NULL if the stream cannot be opened for some
 * reason.
 */ 2 4 this 3 1530  5 index 1 1337  
438 0 0 4 531 1404 0 0 246 /**
 * Closes a file opened by a previous call to open_read_subfile().  This
 * really just deletes the istream pointer, but it is recommended to use this
 * interface instead of deleting it explicitly, to help work around compiler
 * issues.
 */ 1 6 stream 1 1514  
439 0 0 6 532 1333 0 0 68 /**
 * Extracts the nth subfile into a file with the given name.
 */ 3 4 this 3 1530  5 index 1 1337  8 filename 1 1494  
440 0 0 6 533 1333 0 0 61 /**
 * Extracts the nth subfile to the indicated ostream.
 */ 3 4 this 3 1530  5 index 1 1337  3 out 1 1416  
441 0 0 6 534 1333 0 0 509 /**
 * Performs a byte-for-byte comparison of the indicated file on disk with the
 * nth subfile.  Returns true if the files are equivalent, or false if they
 * are different (or the file is missing).
 *
 * If Filename::set_binary() or set_text() has already been called, it
 * specifies the nature of the source file.  If this is different from the
 * text flag of the subfile, the comparison will always return false.  If this
 * has not been specified, it will be set from the text flag of the subfile.
 */ 3 4 this 3 1530  5 index 1 1337  8 filename 1 1494  
442 0 0 4 535 1404 0 0 10 /**
 *
 */ 2 4 this 3 1532  3 out 1 1416  
443 0 0 4 536 1404 0 0 61 /**
 * Shows a list of all subfiles within the Multifile.
 */ 2 4 this 3 1532  3 out 5 1416  
444 0 0 6 537 1453 0 0 108 /**
 * Returns a string with the first n bytes written to a Multifile, to identify
 * it as a Multifile.
 */ 0 
445 0 0 4 541 1404 0 0 644 /**
 * Sets the string which is written to the Multifile before the Multifile
 * header.  This string must begin with a hash mark and end with a newline
 * character; and if it includes embedded newline characters, each one must be
 * followed by a hash mark.  If these conditions are not initially true, the
 * string will be modified as necessary to make it so.
 *
 * This is primarily useful as a simple hack to allow p3d applications to be
 * run directly from the command line on Unix-like systems.
 *
 * The return value is true if successful, or false on failure (for instance,
 * because the header prefix violates the above rules).
 */ 2 4 this 3 1530  13 header_prefix 1 1453  
446 0 0 6 542 1453 0 0 113 /**
 * Returns the string that preceded the Multifile header on the file, if any.
 * See set_header_prefix().
 */ 1 4 this 3 1532  
447 0 0 7 544 1539 1127 0 0 1 6 param0 0 1537  
448 0 0 7 544 1539 1127 0 10 /**
 *
 */ 1 12 initial_name 5 1453  
449 0 0 4 545 1404 0 0 10 /**
 *
 */ 2 4 this 3 1539  4 name 1 1453  
450 0 0 4 546 1404 0 0 46 /**
 * Resets the Namable's name to empty.
 */ 1 4 this 3 1539  
451 0 0 6 547 1333 0 0 94 /**
 * Returns true if the Namable has a nonempty name set, false if the name is
 * empty.
 */ 1 4 this 3 1537  
452 0 0 6 548 1453 0 0 10 /**
 *
 */ 1 4 this 3 1537  
453 0 0 4 551 1404 0 0 148 /**
 * Outputs the Namable.  This function simply writes the name to the output
 * stream; most Namable derivatives will probably redefine this.
 */ 2 4 this 3 1537  3 out 1 1416  
454 0 0 7 552 1451 0 0 0 0 
455 0 0 4 555 1404 0 0 200 /**
 * Removes all the certificates from the global store, including the compiled-
 * in certificates loaded from ca_bundle_data.c.  You can add new certificates
 * by calling load_certificates().
 */ 1 4 this 3 1540  
456 0 0 6 556 1337 0 0 436 /**
 * Reads the PEM-formatted certificate(s) (delimited by -----BEGIN
 * CERTIFICATE----- and -----END CERTIFICATE-----) from the indicated file and
 * adds them to the global store object, retrieved via get_x509_store().
 *
 * Returns the number of certificates read on success, or 0 on failure.
 *
 * You should call this only with trusted, locally-stored certificates; not
 * with certificates received from an untrusted source.
 */ 2 4 this 3 1540  8 filename 1 1494  
457 0 0 6 557 1337 0 0 376 /**
 * Reads a chain of trusted certificates from the indicated data buffer and
 * adds them to the X509_STORE object.  The data buffer should be PEM-
 * formatted.  Returns the number of certificates read on success, or 0 on
 * failure.
 *
 * You should call this only with trusted, locally-stored certificates; not
 * with certificates received from an untrusted source.
 */ 3 4 this 3 1540  4 data 1 1453  9 data_size 1 1334  
458 0 0 6 557 1337 0 0 376 /**
 * Reads a chain of trusted certificates from the indicated data buffer and
 * adds them to the X509_STORE object.  The data buffer should be PEM-
 * formatted.  Returns the number of certificates read on success, or 0 on
 * failure.
 *
 * You should call this only with trusted, locally-stored certificates; not
 * with certificates received from an untrusted source.
 */ 2 4 this 3 1540  4 data 1 1453  
459 0 0 6 558 1337 0 0 376 /**
 * Reads a chain of trusted certificates from the indicated data buffer and
 * adds them to the X509_STORE object.  The data buffer should be DER-
 * formatted.  Returns the number of certificates read on success, or 0 on
 * failure.
 *
 * You should call this only with trusted, locally-stored certificates; not
 * with certificates received from an untrusted source.
 */ 3 4 this 3 1540  4 data 1 1453  9 data_size 1 1334  
460 0 0 6 558 1337 0 0 376 /**
 * Reads a chain of trusted certificates from the indicated data buffer and
 * adds them to the X509_STORE object.  The data buffer should be DER-
 * formatted.  Returns the number of certificates read on success, or 0 on
 * failure.
 *
 * You should call this only with trusted, locally-stored certificates; not
 * with certificates received from an untrusted source.
 */ 2 4 this 3 1540  4 data 1 1453  
461 0 0 6 559 1541 0 0 378 /**
 * Returns the global X509_STORE object.
 *
 * It has to be a global object, because OpenSSL seems to store some global
 * pointers associated with this object whether you want it to or not, and
 * keeping independent copies of a local X509_STORE object doesn't seem to
 * work that well.  So, we have one store that keeps all certificates the
 * application might need.
 */ 1 4 this 3 1540  
462 0 0 4 560 1404 0 0 277 /**
 * A convenience function that is itself a wrapper around the OpenSSL
 * convenience function to output the recent OpenSSL errors.  This function
 * sends the error string to express_cat.warning().  If REPORT_OPENSSL_ERRORS
 * is not defined, the function does nothing.
 */ 1 4 this 3 1540  
463 0 0 4 561 1404 0 0 84 /**
 * As notify_ssl_errors(), but sends the output to debug instead of warning.
 */ 1 4 this 3 1540  
464 0 0 6 562 1540 0 0 10 /**
 *
 */ 0 
465 0 0 7 564 1493 1144 0 10 /**
 *
 */ 0 
466 0 0 7 564 1493 1144 0 10 /**
 *
 */ 3 4 file 1 1348  5 start 1 1352  4 size 1 1544  
467 0 0 7 564 1493 1144 0 10 /**
 *
 */ 3 8 filename 1 1494  5 start 1 1352  4 size 1 1544  
468 0 0 7 564 1493 1144 0 10 /**
 *
 */ 1 4 copy 1 1504  
469 0 0 6 565 1493 0 0 0 2 4 this 3 1493  4 copy 1 1504  
470 0 0 6 566 1333 0 0 98 /**
 * Returns true if this SubfileInfo doesn't define any file, false if it has
 * real data.
 */ 1 4 this 3 1504  
471 0 0 7 567 1348 0 0 63 /**
 * Returns the FileReference that represents this file.
 */ 1 4 this 3 1504  
472 0 0 6 568 1494 0 0 38 /**
 * A shortcut to the filename.
 */ 1 4 this 3 1504  
473 0 0 6 569 1352 0 0 77 /**
 * Returns the offset within the file at which this file data begins.
 */ 1 4 this 3 1504  
474 0 0 6 570 1544 0 0 115 /**
 * Returns the number of consecutive bytes, beginning at get_start(), that
 * correspond to this file data.
 */ 1 4 this 3 1504  
475 0 0 4 571 1404 0 0 10 /**
 *
 */ 2 4 this 3 1504  3 out 1 1416  
476 0 0 6 574 1547 0 0 0 1 4 this 3 1545  
477 0 0 7 575 1548 0 0 0 1 4 this 3 1545  
478 0 0 6 576 1494 0 0 166 /**
 * Returns the original filename as it was used to locate this VirtualFile.
 * This is usually, but not always, the same string returned by
 * get_filename().
 */ 1 4 this 3 1545  
479 0 0 6 577 1333 0 0 61 /**
 * Returns true if this file exists, false otherwise.
 */ 1 4 this 3 1545  
480 0 0 6 578 1333 0 0 117 /**
 * Returns true if this file represents a directory (and scan_directory() may
 * be called), false otherwise.
 */ 1 4 this 3 1545  
481 0 0 6 579 1333 0 0 115 /**
 * Returns true if this file represents a regular file (and read_file() may be
 * called), false otherwise.
 */ 1 4 this 3 1545  
482 0 0 6 580 1333 0 0 153 /**
 * Returns true if this file may be written to, which implies write_file() may
 * be called (unless it is a directory instead of a regular file).
 */ 1 4 this 3 1545  
483 0 0 6 581 1333 0 0 199 /**
 * Attempts to delete this file or directory.  This can remove a single file
 * or an empty directory.  It will not remove a nonempty directory.  Returns
 * true on success, false on failure.
 */ 1 4 this 3 1499  
484 0 0 6 582 1333 0 0 589 /**
 * Attempts to move or rename this file or directory.  If the original file is
 * an ordinary file, it will quietly replace any already-existing file in the
 * new filename (but not a directory).  If the original file is a directory,
 * the new filename must not already exist.
 *
 * If the file is a directory, the new filename must be within the same mount
 * point.  If the file is an ordinary file, the new filename may be anywhere;
 * but if it is not within the same mount point then the rename operation is
 * automatically performed as a two-step copy-and-delete operation.
 */ 2 4 this 3 1499  8 new_file 1 1499  
485 0 0 6 583 1333 0 0 123 /**
 * Attempts to copy the contents of this file to the indicated file.  Returns
 * true on success, false on failure.
 */ 2 4 this 3 1499  8 new_file 1 1499  
486 0 0 7 584 1549 845 0 247 /**
 * If the file represents a directory (that is, is_directory() returns true),
 * this returns the list of files within the directory at the current time.
 * Returns NULL if the file is not a directory or if the directory cannot be
 * read.
 */ 1 4 this 3 1545  
487 0 0 4 585 1404 0 0 10 /**
 *
 */ 2 4 this 3 1545  3 out 1 1416  
488 0 0 4 586 1404 0 0 66 /**
 * If the file represents a directory, lists its contents.
 */ 2 4 this 3 1545  3 out 5 1416  
489 0 0 4 587 1404 0 0 113 /**
 * If the file represents a directory, recursively lists its contents and
 * those of all subdirectories.
 */ 2 4 this 3 1545  3 out 5 1416  
490 0 0 6 588 1405 0 0 63 /**
 * Returns the entire contents of the file as a string.
 */ 2 4 this 3 1545  11 auto_unwrap 1 1333  
491 0 0 6 589 1514 0 0 179 /**
 * Opens the file for reading.  Returns a newly allocated istream on success
 * (which you should eventually delete when you are done reading). Returns
 * NULL on failure.
 */ 2 4 this 3 1545  11 auto_unwrap 1 1333  
492 0 0 4 590 1404 0 0 243 /**
 * Closes a file opened by a previous call to open_read_file().  This really
 * just deletes the istream pointer, but it is recommended to use this
 * interface instead of deleting it explicitly, to help work around compiler
 * issues.
 */ 2 4 this 3 1545  6 stream 1 1514  
493 0 0 6 591 1333 0 0 324 /**
 * Call this method after a reading the istream returned by open_read_file()
 * to completion.  If it returns true, the file was read completely and
 * without error; if it returns false, there may have been some errors or a
 * truncated file read.  This is particularly likely if the stream is a
 * VirtualFileHTTP.
 */ 1 4 this 3 1545  
494 0 0 6 592 1405 0 0 0 3 4 this 3 1499  4 data 1 1405  9 auto_wrap 1 1333  
495 0 0 6 593 1416 0 0 179 /**
 * Opens the file for writing.  Returns a newly allocated ostream on success
 * (which you should eventually delete when you are done writing). Returns
 * NULL on failure.
 */ 3 4 this 3 1499  9 auto_wrap 1 1333  8 truncate 1 1333  
496 0 0 6 594 1416 0 0 180 /**
 * Works like open_write_file(), but the file is opened in append mode.  Like
 * open_write_file, the returned pointer should eventually be passed to
 * close_write_file().
 */ 1 4 this 3 1499  
497 0 0 4 595 1404 0 0 244 /**
 * Closes a file opened by a previous call to open_write_file().  This really
 * just deletes the ostream pointer, but it is recommended to use this
 * interface instead of deleting it explicitly, to help work around compiler
 * issues.
 */ 2 4 this 3 1499  6 stream 1 1416  
498 0 0 6 596 1531 0 0 180 /**
 * Opens the file for writing.  Returns a newly allocated iostream on success
 * (which you should eventually delete when you are done writing). Returns
 * NULL on failure.
 */ 2 4 this 3 1499  8 truncate 1 1333  
499 0 0 6 597 1531 0 0 194 /**
 * Works like open_read_write_file(), but the file is opened in append mode.
 * Like open_read_write_file, the returned pointer should eventually be passed
 * to close_read_write_file().
 */ 1 4 this 3 1499  
500 0 0 4 598 1404 0 0 250 /**
 * Closes a file opened by a previous call to open_read_write_file().  This
 * really just deletes the iostream pointer, but it is recommended to use this
 * interface instead of deleting it explicitly, to help work around compiler
 * issues.
 */ 2 4 this 3 1499  6 stream 1 1531  
501 0 0 6 599 1544 0 0 105 /**
 * Returns the current size on disk (or wherever it is) of the file before it
 * has been opened.
 */ 1 4 this 3 1545  
502 0 0 6 599 1544 0 0 222 /**
 * Returns the current size on disk (or wherever it is) of the already-open
 * file.  Pass in the stream that was returned by open_read_file(); some
 * implementations may require this stream to determine the size.
 */ 2 4 this 3 1545  6 stream 1 1514  
503 0 0 6 600 1497 0 0 434 /**
 * Returns a time_t value that represents the time the file was last modified,
 * to within whatever precision the operating system records this information
 * (on a Windows95 system, for instance, this may only be accurate to within 2
 * seconds).
 *
 * If the timestamp cannot be determined, either because it is not supported
 * by the operating system or because there is some error (such as file not
 * found), returns 0.
 */ 1 4 this 3 1545  
504 0 0 6 601 1333 0 0 330 /**
 * Populates the SubfileInfo structure with the data representing where the
 * file actually resides on disk, if this is knowable.  Returns true if the
 * file might reside on disk, and the info is populated, or false if it does
 * not (or it is not known where the file resides), in which case the info is
 * meaningless.
 */ 2 4 this 3 1499  4 info 1 1493  
505 0 0 7 602 1451 0 0 0 0 
506 0 0 7 605 1451 0 0 0 0 
507 0 0 6 608 1547 0 0 68 /**
 * Returns the file system this mount object is attached to.
 */ 1 4 this 3 1550  
508 0 0 6 609 1494 0 0 161 /**
 * Returns the name of the directory within the virtual file system that this
 * mount object is attached to.  This directory name will end with a slash.
 */ 1 4 this 3 1550  
509 0 0 6 610 1337 0 0 100 /**
 * Returns the set of flags passed by the user to the
 * VirtualFileSystem::mount() command.
 */ 1 4 this 3 1550  
510 0 0 4 611 1404 0 0 10 /**
 *
 */ 2 4 this 3 1550  3 out 1 1416  
511 0 0 4 612 1404 0 0 10 /**
 *
 */ 2 4 this 3 1550  3 out 1 1416  
512 0 0 7 613 1451 0 0 0 0 
513 0 0 7 615 1552 978 0 10 /**
 *
 */ 1 9 multifile 1 1530  
514 0 0 7 616 1530 845 0 76 /**
 * Returns the Multifile pointer that this mount object is based on.
 */ 1 4 this 3 1553  
515 0 0 7 617 1451 0 0 0 0 
516 0 0 7 619 1555 1188 0 10 /**
 *
 */ 0 
517 0 0 7 620 1451 0 0 0 0 
518 0 0 7 623 1556 1192 0 10 /**
 *
 */ 1 17 physical_filename 1 1494  
519 0 0 6 624 1494 0 0 112 /**
 * Returns the name of the source file on the OS filesystem of the directory
 * or file that is mounted.
 */ 1 4 this 3 1557  
520 0 0 7 625 1451 0 0 0 0 
521 0 0 7 628 1561 978 0 69 /**
 * Returns the VirtualFileMount this file is associated with.
 */ 1 4 this 3 1559  
522 0 0 6 629 1333 0 0 174 /**
 * Returns true if this file is a .pz file that should be implicitly
 * decompressed on load, or false if it is not a .pz file or if it should not
 * be decompressed.
 */ 1 4 this 3 1559  
523 0 0 7 630 1451 0 0 0 0 
524 0 0 7 633 1562 982 0 10 /**
 *
 */ 1 8 filename 1 1494  
525 0 0 7 633 1562 982 0 0 1 6 param0 0 1563  
526 0 0 7 634 1451 0 0 0 0 
527 0 0 7 636 1565 1202 0 10 /**
 *
 */ 0 
528 0 0 7 636 1565 1202 0 10 /**
 *
 */ 2 6 source 1 1514  11 owns_source 1 1333  
529 0 0 6 637 1565 0 0 10 /**
 *
 */ 3 4 this 3 1565  6 source 1 1514  11 owns_source 1 1333  
530 0 0 6 638 1565 0 0 118 /**
 * Resets the ZStream to empty, but does not actually close the source istream
 * unless owns_source was true.
 */ 1 4 this 3 1565  
531 0 0 7 641 1566 1206 0 10 /**
 *
 */ 0 
532 0 0 7 641 1566 1206 0 10 /**
 *
 */ 3 4 dest 1 1416  9 owns_dest 1 1333  17 compression_level 5 1337  
533 0 0 6 642 1566 0 0 10 /**
 *
 */ 4 4 this 3 1566  4 dest 1 1416  9 owns_dest 1 1333  17 compression_level 5 1337  
534 0 0 6 643 1566 0 0 114 /**
 * Resets the ZStream to empty, but does not actually close the dest ostream
 * unless owns_dest was true.
 */ 1 4 this 3 1566  
535 0 0 7 653 1549 845 0 0 1 6 param0 0 1567  
536 0 0 6 646 1334 0 0 51 /**
 * Returns the number of files in the list.
 */ 1 4 this 3 1567  
537 0 0 7 647 1499 1174 0 44 /**
 * Returns the nth file in the list.
 */ 2 4 this 3 1567  1 n 1 1334  
538 0 0 7 649 1499 1174 0 44 /**
 * Returns the nth file in the list.
 */ 2 4 this 3 1567  1 n 1 1334  
539 0 0 6 650 1334 0 0 51 /**
 * Returns the number of files in the list.
 */ 1 4 this 3 1567  
540 0 0 7 651 1549 845 0 0 2 4 this 3 1549  5 other 1 1567  
541 0 0 7 652 1549 845 0 0 2 4 this 3 1567  5 other 1 1567  
542 0 0 7 655 1547 1215 0 10 /**
 *
 */ 0 
543 0 0 6 658 1333 0 0 1009 /**
 * Mounts the indicated system file or directory at the given mount point.  If
 * the named file is a directory, mounts the directory.  If the named file is
 * a Multifile, mounts it as a Multifile.  Returns true on success, false on
 * failure.
 *
 * A given system directory may be mounted to multiple different mount point,
 * and the same mount point may share multiple system directories.  In the
 * case of ambiguities (that is, two different files with exactly the same
 * full pathname), the most-recently mounted system wins.
 *
 * The filename specified as the first parameter must refer to a real,
 * physical filename on disk; it cannot be a virtual file already appearing
 * within the vfs filespace.  However, it is possible to mount such a file;
 * see mount_loop() for this.
 *
 * Note that a mounted VirtualFileSystem directory is fully case-sensitive,
 * unlike the native Windows file system, so you must refer to files within
 * the virtual file system with exactly the right case.
 */ 5 4 this 3 1547  17 physical_filename 1 1494  11 mount_point 1 1494  5 flags 1 1337  8 password 5 1453  
544 0 0 6 658 1333 0 0 67 /**
 * Mounts the indicated Multifile at the given mount point.
 */ 4 4 this 3 1547  9 multifile 1 1530  11 mount_point 1 1494  5 flags 1 1337  
545 0 0 6 658 1333 0 0 208 /**
 * Adds the given VirtualFileMount object to the mount list.  This is a lower-
 * level function than the other flavors of mount(); it requires you to create
 * a VirtualFileMount object specifically.
 */ 4 4 this 3 1547  5 mount 1 1561  11 mount_point 1 1494  5 flags 1 1337  
546 0 0 6 659 1333 0 0 587 /**
 * This is similar to mount(), but it receives the name of a Multifile that
 * already appears within the virtual file system.  It can be used to mount a
 * Multifile that is itself hosted within a virtually-mounted Multifile.
 *
 * This interface can also be used to mount physical files (that appear within
 * the virtual filespace), but it cannot be used to mount directories.  Use
 * mount() if you need to mount a directory.
 *
 * Note that there is additional overhead, in the form of additional buffer
 * copies of the data, for recursively mounting a multifile like this.
 */ 5 4 this 3 1547  16 virtual_filename 1 1494  11 mount_point 1 1494  5 flags 1 1337  8 password 5 1453  
547 0 0 6 660 1337 0 0 156 /**
 * Unmounts all appearances of the indicated directory name or multifile name
 * from the file system.  Returns the number of appearances unmounted.
 */ 2 4 this 3 1547  17 physical_filename 1 1494  
548 0 0 6 660 1337 0 0 132 /**
 * Unmounts all appearances of the indicated Multifile from the file system.
 * Returns the number of appearances unmounted.
 */ 2 4 this 3 1547  9 multifile 1 1530  
549 0 0 6 660 1337 0 0 127 /**
 * Unmounts the indicated VirtualFileMount object from the file system.
 * Returns the number of appearances unmounted.
 */ 2 4 this 3 1547  5 mount 1 1561  
550 0 0 6 661 1337 0 0 136 /**
 * Unmounts all systems attached to the given mount point from the file
 * system.  Returns the number of appearances unmounted.
 */ 2 4 this 3 1547  11 mount_point 1 1494  
551 0 0 6 662 1337 0 0 96 /**
 * Unmounts all files from the file system.  Returns the number of systems
 * unmounted.
 */ 1 4 this 3 1547  
552 0 0 6 663 1337 0 0 65 /**
 * Returns the number of individual mounts in the system.
 */ 1 4 this 3 1569  
553 0 0 7 664 1561 978 0 47 /**
 * Returns the nth mount in the system.
 */ 2 4 this 3 1569  1 n 1 1337  
554 0 0 6 677 1333 0 0 171 /**
 * Changes the current directory.  This is used to resolve relative pathnames
 * in get_file() and/or find_file().  Returns true if successful, false
 * otherwise.
 */ 2 4 this 3 1547  13 new_directory 1 1494  
555 0 0 7 678 1548 0 0 60 /**
 * Returns the current directory name.  See chdir().
 */ 1 4 this 3 1569  
556 0 0 6 679 1333 0 0 263 /**
 * Attempts to create a directory within the file system.  Returns true on
 * success, false on failure (for instance, because the parent directory does
 * not exist, or is read-only).  If the directory already existed prior to
 * this call, returns true.
 */ 2 4 this 3 1547  8 filename 1 1494  
557 0 0 6 680 1333 0 0 169 /**
 * Attempts to create a directory within the file system.  Will also create
 * any intervening directories needed.  Returns true on success, false on
 * failure.
 */ 2 4 this 3 1547  8 filename 1 1494  
558 0 0 7 681 1499 1174 0 537 /**
 * Looks up the file by the indicated name in the file system.  Returns a
 * VirtualFile pointer representing the file if it is found, or NULL if it is
 * not.
 *
 * If status_only is true, the file will be checked for existence and length
 * and so on, but the returned file's contents cannot be read.  This is an
 * optimization which is especially important for certain mount types, for
 * instance HTTP, for which opening a file to determine its status is
 * substantially less expensive than opening it to read its contents.
 */ 3 4 this 3 1569  8 filename 1 1494  11 status_only 5 1333  
559 0 0 7 682 1499 1174 0 298 /**
 * Attempts to create a file by the indicated name in the filesystem, if
 * possible, and returns it.  If a file by this name already exists, returns
 * the same thing as get_file().  If the filename is located within a read-
 * only directory, or the directory doesn't exist, returns NULL.
 */ 2 4 this 3 1547  8 filename 1 1494  
560 0 0 7 683 1499 1174 0 173 /**
 * Uses the indicated search path to find the file within the file system.
 * Returns the first occurrence of the file found, or NULL if the file cannot
 * be found.
 */ 4 4 this 3 1569  8 filename 1 1494  10 searchpath 1 1571  11 status_only 5 1333  
561 0 0 6 684 1333 0 0 208 /**
 * Attempts to delete the indicated file or directory.  This can remove a
 * single file or an empty directory.  It will not remove a nonempty
 * directory.  Returns true on success, false on failure.
 */ 2 4 this 3 1547  8 filename 1 1494  
562 0 0 6 685 1333 0 0 599 /**
 * Attempts to move or rename the indicated file or directory.  If the
 * original file is an ordinary file, it will quietly replace any already-
 * existing file in the new filename (but not a directory).  If the original
 * file is a directory, the new filename must not already exist.
 *
 * If the file is a directory, the new filename must be within the same mount
 * point.  If the file is an ordinary file, the new filename may be anywhere;
 * but if it is not within the same mount point then the rename operation is
 * automatically performed as a two-step copy-and-delete operation.
 */ 3 4 this 3 1547  13 orig_filename 1 1494  12 new_filename 1 1494  
563 0 0 6 686 1333 0 0 131 /**
 * Attempts to copy the contents of the indicated file to the indicated file.
 * Returns true on success, false on failure.
 */ 3 4 this 3 1547  13 orig_filename 1 1494  12 new_filename 1 1494  
564 0 0 6 687 1333 0 0 174 /**
 * Searches the given search path for the filename.  If it is found, updates
 * the filename to the full pathname found and returns true; otherwise,
 * returns false.
 */ 4 4 this 3 1569  8 filename 1 1548  10 searchpath 1 1571  17 default_extension 5 1453  
565 0 0 6 688 1337 0 0 363 /**
 * Searches all the directories in the search list for the indicated file, in
 * order.  Fills up the results list with *all* of the matching filenames
 * found, if any.  Returns the number of matches found.
 *
 * It is the responsibility of the the caller to clear the results list first;
 * otherwise, the newly-found files will be appended to the list.
 */ 4 4 this 3 1569  8 filename 1 1494  10 searchpath 1 1571  7 results 1 1574  
566 0 0 6 689 1333 0 0 71 /**
 * Convenience function; returns true if the named file exists.
 */ 2 4 this 3 1569  8 filename 1 1494  
567 0 0 6 690 1333 0 0 93 /**
 * Convenience function; returns true if the named file exists and is a
 * directory.
 */ 2 4 this 3 1569  8 filename 1 1494  
568 0 0 6 691 1333 0 0 96 /**
 * Convenience function; returns true if the named file exists and is a
 * regular file.
 */ 2 4 this 3 1569  8 filename 1 1494  
569 0 0 7 692 1549 845 0 247 /**
 * If the file represents a directory (that is, is_directory() returns true),
 * this returns the list of files within the directory at the current time.
 * Returns NULL if the file is not a directory or if the directory cannot be
 * read.
 */ 2 4 this 3 1569  8 filename 1 1494  
570 0 0 4 693 1404 0 0 80 /**
 * Convenience function; lists the files within the indicated directory.
 */ 2 4 this 3 1569  8 filename 1 1494  
571 0 0 4 694 1404 0 0 117 /**
 * Convenience function; lists the files within the indicated directory, and
 * all files below, recursively.
 */ 2 4 this 3 1569  8 filename 1 1494  
572 0 0 4 695 1404 0 0 75 /**
 * Print debugging information.  (e.g.  from Python or gdb prompt).
 */ 2 4 this 3 1569  3 out 1 1416  
573 0 0 6 696 1547 0 0 423 /**
 * Returns the default global VirtualFileSystem.  You may create your own
 * personal VirtualFileSystem objects and use them for whatever you like, but
 * Panda will attempt to load models and stuff from this default object.
 *
 * Initially, the global VirtualFileSystem is set up to mount the OS
 * filesystem to root; i.e.  it is equivalent to the OS filesystem.  This may
 * be subsequently adjusted by the user.
 */ 0 
574 0 0 6 697 1405 0 0 365 /**
 * Convenience function; returns the entire contents of the indicated file as
 * a string.
 *
 * If auto_unwrap is true, an explicitly-named .pz/.gz file is automatically
 * decompressed and the decompressed contents are returned.  This is different
 * than vfs-implicit-pz, which will automatically decompress a file if the
 * extension .pz is *not* given.
 */ 3 4 this 3 1569  8 filename 1 1494  11 auto_unwrap 1 1333  
575 0 0 6 698 1514 0 0 424 /**
 * Convenience function; returns a newly allocated istream if the file exists
 * and can be read, or NULL otherwise.  Does not return an invalid istream.
 *
 * If auto_unwrap is true, an explicitly-named .pz file is automatically
 * decompressed and the decompressed contents are returned.  This is different
 * than vfs-implicit-pz, which will automatically decompress a file if the
 * extension .pz is *not* given.
 */ 3 4 this 3 1569  8 filename 1 1494  11 auto_unwrap 1 1333  
576 0 0 4 699 1404 0 0 243 /**
 * Closes a file opened by a previous call to open_read_file().  This really
 * just deletes the istream pointer, but it is recommended to use this
 * interface instead of deleting it explicitly, to help work around compiler
 * issues.
 */ 1 6 stream 1 1514  
577 0 0 6 700 1405 0 0 0 4 4 this 3 1547  8 filename 1 1494  4 data 1 1405  9 auto_wrap 1 1333  
578 0 0 6 701 1416 0 0 345 /**
 * Convenience function; returns a newly allocated ostream if the file exists
 * and can be written, or NULL otherwise.  Does not return an invalid ostream.
 *
 * If auto_wrap is true, an explicitly-named .pz file is automatically
 * compressed while writing.  If truncate is true, the file is truncated to
 * zero length before writing.
 */ 4 4 this 3 1547  8 filename 1 1494  9 auto_wrap 1 1333  8 truncate 1 1333  
579 0 0 6 702 1416 0 0 180 /**
 * Works like open_write_file(), but the file is opened in append mode.  Like
 * open_write_file, the returned pointer should eventually be passed to
 * close_write_file().
 */ 2 4 this 3 1547  8 filename 1 1494  
580 0 0 4 703 1404 0 0 244 /**
 * Closes a file opened by a previous call to open_write_file().  This really
 * just deletes the ostream pointer, but it is recommended to use this
 * interface instead of deleting it explicitly, to help work around compiler
 * issues.
 */ 1 6 stream 1 1416  
581 0 0 6 704 1531 0 0 169 /**
 * Convenience function; returns a newly allocated iostream if the file exists
 * and can be written, or NULL otherwise.  Does not return an invalid
 * iostream.
 */ 3 4 this 3 1547  8 filename 1 1494  8 truncate 1 1333  
582 0 0 6 705 1531 0 0 194 /**
 * Works like open_read_write_file(), but the file is opened in append mode.
 * Like open_read_write_file, the returned pointer should eventually be passed
 * to close_read_write_file().
 */ 2 4 this 3 1547  8 filename 1 1494  
583 0 0 4 706 1404 0 0 250 /**
 * Closes a file opened by a previous call to open_read_write_file().  This
 * really just deletes the iostream pointer, but it is recommended to use this
 * interface instead of deleting it explicitly, to help work around compiler
 * issues.
 */ 1 6 stream 1 1531  
584 0 0 7 671 1576 1230 0 0 0 
585 0 0 7 671 1576 1230 0 0 1 4 copy 1 1561  
586 0 0 7 671 1576 1230 0 0 1 3 ptr 1 1561  
587 0 0 7 671 1576 1230 0 0 1 6 param0 0 1577  
588 0 0 7 672 1561 978 0 289 // If your base class is a derivative of TypedObject, you might want to use
// the DCAST macro defined in typedObject.h instead, e.g.  DCAST(MyType,
// ptr).  This provides a clean downcast that doesn't require .p() or any
// double-casting, and it can be run-time checked for correctness. 1 4 this 3 1578  
589 0 0 6 673 1576 0 0 0 2 4 this 3 1576  4 copy 1 1561  
590 0 0 6 673 1576 0 0 0 2 4 this 3 1576  3 ptr 1 1561  
591 0 0 6 674 1333 0 0 0 1 4 this 3 1578  
592 0 0 4 675 1404 0 0 0 1 4 this 3 1576  
593 0 0 4 669 1404 0 0 0 1 4 this 3 1580  
594 0 0 4 670 1404 0 0 0 2 4 this 3 1581  3 out 1 1416  
595 0 0 6 708 1387 0 0 203 // get_long_time() returns the most accurate timer we have over a long
// interval.  It may not be very precise for measuring short intervals, but
// it should not drift substantially over the long haul. 1 4 this 3 1583  
596 0 0 6 711 1387 0 0 206 // get_short_time() returns the most precise timer we have over a short
// interval.  It may tend to drift over the long haul, but it should have
// lots of digits to measure short intervals very precisely. 1 4 this 3 1583  
597 0 0 6 713 1387 0 0 144 // get_short_raw_time() is like get_short_time(), but does not apply any
// corrections (e.g.  paranoid-clock) to the result returned by the OS. 1 4 this 3 1583  
598 0 0 6 715 1337 0 0 369 /**
 * Returns the number of clock errors that have been detected.  Each time a
 * clock error is detected, in which the value returned by either of the above
 * methods is suspect, the value returned by this method will be incremented.
 * Applications can monitor this value and react, for instance, by
 * resynchronizing their clocks each time this value changes.
 */ 1 4 this 3 1584  
599 0 0 6 717 1583 0 0 70 /**
 * Returns a pointer to the one TrueClock object in the world.
 */ 0 
600 0 0 6 718 1333 0 0 0 2 4 this 3 1584  4 mask 1 1486  
601 0 0 7 720 1586 1268 0 60 /**
 * Create a patch file and initializes internal data
 */ 0 
602 0 0 7 720 1586 1268 0 49 /**
 * Create patch file with buffer to patch
 */ 1 6 buffer 1 1467  
603 0 0 6 722 1333 0 0 359 /**
 *
 * This implementation uses the "greedy differencing algorithm" described in
 * the masters thesis "Differential Compression: A Generalized Solution for
 * Binary Files" by Randal C. Burns (p.13). For an original file of size M and
 * a new file of size N, this algorithm is O(M) in space and O(M*N) (worst-
 * case) in time.  return false on error
 */ 4 4 this 3 1586  9 file_orig 1 1548  8 file_new 1 1548  10 patch_name 1 1548  
604 0 0 6 723 1337 0 0 193 /**
 * Opens the patch file for reading, and gets the header information from the
 * file but does not begin to do any real work.  This can be used to query the
 * data stored in the patch.
 */ 2 4 this 3 1586  10 patch_file 1 1494  
605 0 0 6 724 1337 0 0 107 /**
 * Set up to apply the patch to the file (original file and patch are
 * destroyed in the process).
 */ 3 4 this 3 1586  10 patch_file 1 1494  4 file 1 1494  
606 0 0 6 724 1337 0 0 127 /**
 * Set up to apply the patch to the file.  In this form, neither the original
 * file nor the patch file are destroyed.
 */ 4 4 this 3 1586  10 patch_file 1 1494  9 orig_file 1 1494  11 target_file 1 1494  
607 0 0 6 725 1337 0 0 390 /**
 * Perform one buffer's worth of patching.
 * Returns one of the following values:
 * @li @c EU_ok : while patching
 * @li @c EU_success : when done
 * @li @c EU_error_abort : Patching has not been initiated
 * @li @c EU_error_file_invalid : file is corrupted
 * @li @c EU_error_invalid_checksum : incompatible patch file
 * @li @c EU_error_write_file_rename : could not rename file
 */ 1 4 this 3 1586  
608 0 0 6 726 1333 0 0 171 /**
 * Patches the entire file in one call returns true on success and false on
 * error
 *
 * This version will delete the patch file and overwrite the original file.
 */ 3 4 this 3 1586  10 patch_file 1 1548  4 file 1 1548  
609 0 0 6 726 1333 0 0 138 /**
 * Patches the entire file in one call returns true on success and false on
 * error
 *
 * This version will not delete any files.
 */ 4 4 this 3 1586  10 patch_file 1 1548  9 orig_file 1 1548  11 target_file 1 1494  
610 0 0 6 727 1389 0 0 125 /**
 * Returns a value in the range 0..1, representing the amount of progress
 * through the patchfile, during a session.
 */ 1 4 this 3 1587  
611 0 0 4 731 1404 0 0 362 /**
 * If this flag is set true, the Patchfile will make a special case for
 * patching Panda Multifiles, if detected, and attempt to patch them on a
 * subfile-by-subfile basis.  If this flag is false, the Patchfile will always
 * patch the file on a full-file basis.
 *
 * This has effect only when building patches; it is not used for applying
 * patches.
 */ 2 4 this 3 1586  15 allow_multifile 1 1333  
612 0 0 6 732 1333 0 0 37 /**
 * See set_allow_multifile().
 */ 1 4 this 3 1586  
613 0 0 4 734 1404 0 0 10 /**
 *
 */ 2 4 this 3 1586  6 length 1 1337  
614 0 0 6 735 1337 0 0 10 /**
 *
 */ 1 4 this 3 1586  
615 0 0 4 736 1404 0 0 10 /**
 *
 */ 1 4 this 3 1586  
616 0 0 6 738 1333 0 0 145 /**
 * Returns true if the MD5 hash for the source file is known.  (Some early
 * versions of the patch file did not store this information.)
 */ 1 4 this 3 1587  
617 0 0 6 739 1513 0 0 52 /**
 * Returns the MD5 hash for the source file.
 */ 1 4 this 3 1587  
618 0 0 6 740 1513 0 0 78 /**
 * Returns the MD5 hash for the file after the patch has been applied.
 */ 1 4 this 3 1587  
619 0 0 7 746 1591 1285 0 0 1 5 other 1 1589  
620 0 0 7 746 1591 1285 0 0 2 4 name 5 1453  10 maxEntries 5 1337  
621 0 0 4 748 1404 0 0 0 3 4 this 3 1591  4 name 1 1453  10 maxEntries 5 1337  
622 0 0 4 749 1404 0 0 0 1 4 this 3 1591  
623 0 0 4 750 1404 0 0 0 2 4 this 3 1591  3 tag 1 1453  
624 0 0 4 751 1404 0 0 0 1 4 this 3 1591  
625 0 0 4 751 1404 0 0 0 2 4 this 3 1591  3 tag 1 1453  
626 0 0 6 752 1387 0 0 110 // Don't call any of the following during timing: (Because they are slow,
// not because anything will break). 1 4 this 3 1589  
627 0 0 4 753 1404 0 0 0 1 3 out 5 1416  
628 0 0 4 754 1404 0 0 0 2 4 this 3 1589  3 out 5 1416  
629 0 0 4 755 1404 0 0 0 1 3 out 5 1416  
630 0 0 4 756 1404 0 0 0 2 4 this 3 1589  3 out 5 1416  
631 0 0 6 758 1333 0 0 384 /**
 * Returns true if the object we are pointing to has been deleted, false
 * otherwise.  If this returns true, it means that the pointer can not yet be
 * reused, but it does not guarantee that it can be safely accessed.  See the
 * lock() method for a safe way to access the underlying pointer.
 *
 * This will always return true for a null pointer, unlike is_valid_pointer().
 */ 1 4 this 3 1592  
632 0 0 6 759 1333 0 0 122 /**
 * Returns true if the pointer is not null and the object has not been
 * deleted.  See was_deleted() for caveats.
 */ 1 4 this 3 1592  
633 0 0 7 769 1594 1304 0 0 0 
634 0 0 7 769 1594 1304 0 0 1 6 param0 0 1595  
635 0 0 6 763 1333 0 0 302 /**
 * Sets the registry key to the indicated value as a string.  The supplied
 * string value is automatically converted from whatever encoding is set by
 * TextEncoder::set_default_encoding() and written as a Unicode string.  The
 * registry key must already exist prior to calling this function.
 */ 4 3 key 1 1453  4 name 1 1453  5 value 1 1453  2 rl 5 1395  
636 0 0 6 764 1333 0 0 142 /**
 * Sets the registry key to the indicated value as an integer.  The registry
 * key must already exist prior to calling this function.
 */ 4 3 key 1 1453  4 name 1 1453  5 value 1 1337  2 rl 5 1395  
637 0 0 6 766 1396 0 0 115 /**
 * Returns the type of the indicated key, or T_none if the key is not known or
 * is some unsupported type.
 */ 3 3 key 1 1453  4 name 1 1453  2 rl 5 1395  
638 0 0 6 767 1453 0 0 291 /**
 * Returns the value associated with the indicated registry key, assuming it
 * is a string value.  The string value is automatically encoded using
 * TextEncoder::get_default_encoding().  If the key is not defined or is not a
 * string type value, default_value is returned instead.
 */ 4 3 key 1 1453  4 name 1 1453  13 default_value 1 1453  2 rl 5 1395  
639 0 0 6 768 1337 0 0 206 /**
 * Returns the value associated with the indicated registry key, assuming it
 * is an integer value.  If the key is not defined or is not an integer type
 * value, default_value is returned instead.
 */ 4 3 key 1 1453  4 name 1 1453  13 default_value 1 1337  2 rl 5 1395  
640 0 0 6 242 1453 0 0 0 2 6 source 1 1453  17 compression_level 1 1337  
641 0 0 6 243 1453 0 0 0 1 6 source 1 1453  
642 0 0 6 244 1333 0 0 0 3 6 source 1 1494  4 dest 1 1494  17 compression_level 1 1337  
643 0 0 6 245 1333 0 0 0 2 6 source 1 1494  4 dest 1 1494  
644 0 0 6 246 1333 0 0 0 3 6 source 1 1514  4 dest 1 1416  17 compression_level 1 1337  
645 0 0 6 247 1333 0 0 0 2 6 source 1 1514  4 dest 1 1416  
646 0 0 6 248 1333 0 0 0 2 6 source 1 1514  4 dest 1 1416  
647 0 0 6 389 1453 0 0 0 5 6 source 1 1453  8 password 1 1453  9 algorithm 5 1453  10 key_length 5 1337  15 iteration_count 5 1337  
648 0 0 6 390 1453 0 0 0 2 6 source 1 1453  8 password 1 1453  
649 0 0 6 391 1333 0 0 0 6 6 source 1 1494  4 dest 1 1494  8 password 1 1453  9 algorithm 5 1453  10 key_length 5 1337  15 iteration_count 5 1337  
650 0 0 6 392 1333 0 0 0 3 6 source 1 1494  4 dest 1 1494  8 password 1 1453  
651 0 0 6 393 1333 0 0 0 6 6 source 1 1514  4 dest 1 1416  8 password 1 1453  9 algorithm 5 1453  10 key_length 5 1337  15 iteration_count 5 1337  
652 0 0 6 394 1333 0 0 0 3 6 source 1 1514  4 dest 1 1416  8 password 1 1453  
653 0 0 6 396 1453 0 0 10 /**
 *
 */ 1 3 err 1 1354  
654 0 0 6 397 1337 0 0 0 0 
655 0 0 6 398 1453 0 0 10 /**
 *
 */ 0 
656 0 0 6 399 1337 0 0 0 0 
657 0 0 6 744 1453 0 0 0 4 8 password 1 1453  4 salt 1 1453  5 iters 1 1337  6 keylen 1 1337  
292
1305 11 CPTA_double 0 2105345 11 CPTA_double 11 CPTA_double 0 0 1306 0 0 0 0 0 0 0 0 0 0

1306 29 ConstPointerToArray< double > 0 141313 29 ConstPointerToArray< double > 29 ConstPointerToArray< double > 0 0 0 1 666 679 0 12 667 668 669 670 671 672 673 674 675 676 677 678 0 0 1 0 1307 0 0 0 0 0

1307 28 PointerToArrayBase< double > 0 26625 28 PointerToArrayBase< double > 28 PointerToArrayBase< double > 0 0 0 0 663 0 2 664 665 0 0 1 0 1308 0 0 0 0 0

1308 49 PointerToBase< ReferenceCountedVector< double > > 0 43009 49 PointerToBase< ReferenceCountedVector< double > > 49 PointerToBase< ReferenceCountedVector< double > > 0 0 0 0 0 0 2 661 662 0 0 1 0 1309 0 0 0 0 0

1309 13 PointerToVoid 0 141313 13 PointerToVoid 13 PointerToVoid 0 0 0 0 660 0 2 658 659 0 0 1 0 1310 0 0 0 0 373
/**
 * This is the non-template part of the base class for PointerTo and
 * ConstPointerTo.  It is necessary so we can keep a pointer to a non-template
 * class within the ReferenceCount object, to implement weak reference
 * pointers--we need to have something to clean up when the ReferenceCount
 * object destructs.
 *
 * This is the base class for PointerToBase<T>.
 */

1310 10 MemoryBase 0 2048 10 MemoryBase 10 MemoryBase 0 0 0 0 0 0 0 0 0 0 0 0 428
/**
 * This class is intended to be the base class of all objects in Panda that
 * might be allocated and deleted via the new and delete operators.  It
 * redefines these operators to provide some memory tracking support.
 *
 * We used to try to override the global operator new and delete methods, but
 * that seems to cause problems when including header files for C++-based
 * system libraries (such as are found on OSX).
 */

1311 10 CPTA_float 0 2105345 10 CPTA_float 10 CPTA_float 0 0 1312 0 0 0 0 0 0 0 0 0 0

1312 28 ConstPointerToArray< float > 0 141313 28 ConstPointerToArray< float > 28 ConstPointerToArray< float > 0 0 0 1 685 698 0 12 686 687 688 689 690 691 692 693 694 695 696 697 0 0 1 0 1313 0 0 0 0 0

1313 27 PointerToArrayBase< float > 0 26625 27 PointerToArrayBase< float > 27 PointerToArrayBase< float > 0 0 0 0 682 0 2 683 684 0 0 1 0 1314 0 0 0 0 0

1314 48 PointerToBase< ReferenceCountedVector< float > > 0 43009 48 PointerToBase< ReferenceCountedVector< float > > 48 PointerToBase< ReferenceCountedVector< float > > 0 0 0 0 0 0 2 680 681 0 0 1 0 1309 0 0 0 0 0

1315 8 CPTA_int 0 2105345 8 CPTA_int 8 CPTA_int 0 0 1316 0 0 0 0 0 0 0 0 0 0

1316 26 ConstPointerToArray< int > 0 141313 26 ConstPointerToArray< int > 26 ConstPointerToArray< int > 0 0 0 1 704 717 0 12 705 706 707 708 709 710 711 712 713 714 715 716 0 0 1 0 1317 0 0 0 0 0

1317 25 PointerToArrayBase< int > 0 26625 25 PointerToArrayBase< int > 25 PointerToArrayBase< int > 0 0 0 0 701 0 2 702 703 0 0 1 0 1318 0 0 0 0 0

1318 46 PointerToBase< ReferenceCountedVector< int > > 0 43009 46 PointerToBase< ReferenceCountedVector< int > > 46 PointerToBase< ReferenceCountedVector< int > > 0 0 0 0 0 0 2 699 700 0 0 1 0 1309 0 0 0 0 0

1319 10 CPTA_uchar 0 2105345 10 CPTA_uchar 10 CPTA_uchar 0 0 1320 0 0 0 0 0 0 0 0 0 0

1320 36 ConstPointerToArray< unsigned char > 0 141313 36 ConstPointerToArray< unsigned char > 36 ConstPointerToArray< unsigned char > 0 0 0 1 723 736 0 12 724 725 726 727 728 729 730 731 732 733 734 735 0 0 1 0 1321 0 0 0 0 0

1321 35 PointerToArrayBase< unsigned char > 0 26625 35 PointerToArrayBase< unsigned char > 35 PointerToArrayBase< unsigned char > 0 0 0 0 720 0 2 721 722 0 0 1 0 1322 0 0 0 0 0

1322 56 PointerToBase< ReferenceCountedVector< unsigned char > > 0 43009 56 PointerToBase< ReferenceCountedVector< unsigned char > > 56 PointerToBase< ReferenceCountedVector< unsigned char > > 0 0 0 0 0 0 2 718 719 0 0 1 0 1309 0 0 0 0 0

1323 10 PTA_double 0 2105345 10 PTA_double 10 PTA_double 0 0 1324 0 0 0 0 0 0 0 0 0 0

1324 24 PointerToArray< double > 0 141313 24 PointerToArray< double > 24 PointerToArray< double > 0 0 0 1 737 757 0 19 738 739 740 741 742 743 744 745 746 747 748 749 750 751 752 753 754 755 756 0 0 1 0 1307 0 0 0 0 0

1325 9 PTA_float 0 2105345 9 PTA_float 9 PTA_float 0 0 1326 0 0 0 0 0 0 0 0 0 0

1326 23 PointerToArray< float > 0 141313 23 PointerToArray< float > 23 PointerToArray< float > 0 0 0 1 758 778 0 19 759 760 761 762 763 764 765 766 767 768 769 770 771 772 773 774 775 776 777 0 0 1 0 1313 0 0 0 0 0

1327 7 PTA_int 0 2105345 7 PTA_int 7 PTA_int 0 0 1328 0 0 0 0 0 0 0 0 0 0

1328 21 PointerToArray< int > 0 141313 21 PointerToArray< int > 21 PointerToArray< int > 0 0 0 1 779 799 0 19 780 781 782 783 784 785 786 787 788 789 790 791 792 793 794 795 796 797 798 0 0 1 0 1317 0 0 0 0 0

1329 9 PTA_uchar 0 2105345 9 PTA_uchar 9 PTA_uchar 0 0 1330 0 0 0 0 0 0 0 0 0 0

1330 31 PointerToArray< unsigned char > 0 141313 31 PointerToArray< unsigned char > 31 PointerToArray< unsigned char > 0 0 0 1 800 820 0 19 801 802 803 804 805 806 807 808 809 810 811 812 813 814 815 816 817 818 819 0 0 1 0 1321 0 0 0 0 0

1331 11 MemoryUsage 0 141313 11 MemoryUsage 11 MemoryUsage 0 0 0 1 841 842 10 1597 1598 1599 1600 1601 1602 1603 1604 1605 1606 20 821 822 823 824 825 826 827 828 829 830 831 832 833 834 835 836 837 838 839 840 0 0 1 0 1332 0 0 0 0 292
/**
 * This class is used strictly for debugging purposes, specifically for
 * tracking memory leaks of reference-counted objects: it keeps a record of
 * every such object currently allocated.
 *
 * When compiled with NDEBUG set, this entire class does nothing and compiles
 * to a stub.
 */

1332 10 MemoryHook 0 2048 10 MemoryHook 10 MemoryHook 0 0 0 0 0 0 0 0 0 0 0 0 641
/**
 * This class provides a wrapper around the various possible malloc schemes
 * Panda might employ.  It also exists to allow the MemoryUsage class in Panda
 * to insert callback hooks to track the size of allocated pointers.
 *
 * The PANDA_MALLOC_* and PANDA_FREE_* macros are defined to vector through
 * through this class (except in production builds) to facilitate that.  Every
 * memory allocation call in Panda should therefore use these macros instead
 * of direct calls to malloc or free.  (C++ new and delete operators may be
 * employed for classes which inherit from MemoryBase; otherwise, use the
 * PANDA_MALLOC macros.)
 */

1333 4 bool 0 8194 4 bool 4 bool 0 4 0 0 0 0 0 0 0 0 0 0 0

1334 6 size_t 0 2105344 11 std::size_t 11 std::size_t 0 0 1335 0 0 0 0 0 0 0 0 0 0

1335 22 unsigned long long int 0 8230 22 unsigned long long int 22 unsigned long long int 0 8 0 0 0 0 0 0 0 0 0 0 0

1336 14 ReferenceCount 0 26625 14 ReferenceCount 14 ReferenceCount 0 0 0 0 845 1 1607 6 846 847 848 849 850 851 0 0 1 3 1310 843 844 0 0 203
/**
 * A base class for all things that want to be reference-counted.
 * ReferenceCount works in conjunction with PointerTo to automatically delete
 * objects when the last pointer to them goes away.
 */

1337 3 int 0 8194 3 int 3 int 0 1 0 0 0 0 0 0 0 0 0 0 0

1338 6 Buffer 0 75777 6 Buffer 6 Buffer 0 0 0 1 853 845 0 1 852 0 0 1 0 1336 0 0 0 0 10
/**
 *
 */

1339 25 PStatCollectorForwardBase 0 75777 25 PStatCollectorForwardBase 25 PStatCollectorForwardBase 0 0 0 0 845 0 1 861 0 0 1 0 1336 0 0 0 0 282
/**
 * This class serves as a cheap forward reference to a PStatCollector, which
 * is defined in the pstatclient module (and is not directly accessible here
 * in the express module).
 *
 * This is subclassed as PStatCollectorForward, which defines the actual
 * functionality.
 */

1340 18 NodeReferenceCount 0 43009 18 NodeReferenceCount 18 NodeReferenceCount 0 0 0 0 0 0 6 862 863 864 865 866 867 0 0 1 0 1336 0 0 0 0 603
/**
 * This class specializes ReferenceCount to add an additional counter, called
 * node_ref_count, for the purposes of counting the number of times the object
 * is referenced by a "node", whatever that may mean in context.
 *
 * The new methods node_ref() and node_unref() automatically increment and
 * decrement the primary reference count as well.  There also exists a
 * NodePointerTo<> class to maintain the node_ref counters automatically.
 *
 * See also CachedTypedWritableReferenceCount, which is similar in principle,
 * as well as NodeCachedReferenceCount, which combines both of these.
 */

1341 8 Datagram 0 75777 8 Datagram 8 Datagram 0 0 0 1 868 0 0 48 869 870 871 872 873 874 875 876 877 878 879 880 881 882 883 884 885 886 887 888 889 890 891 892 893 894 895 896 897 898 899 900 901 902 903 904 905 906 907 908 909 910 911 912 913 914 915 916 0 0 1 0 1342 0 0 0 0 565
/**
 * An ordered list of data elements, formatted in memory for transmission over
 * a socket or writing to a data file.
 *
 * Data elements should be added one at a time, in order, to the Datagram.
 * The nature and contents of the data elements are totally up to the user.
 * When a Datagram has been transmitted and received, its data elements may be
 * extracted using a DatagramIterator; it is up to the caller to know the
 * correct type of each data element in order.
 *
 * A Datagram is itself headerless; it is simply a collection of data
 * elements.
 */

1342 11 TypedObject 0 2048 11 TypedObject 11 TypedObject 0 0 0 0 0 0 0 0 0 0 0 0 2508
/**
 * This is an abstract class that all classes which use TypeHandle, and also
 * provide virtual functions to support polymorphism, should inherit from.
 * Each derived class should define get_type(), which should return the
 * specific type of the derived class.  Inheriting from this automatically
 * provides support for is_of_type() and is_exact_type().
 *
 * All classes that inherit directly or indirectly from TypedObject should
 * redefine get_type() and force_init_type(), as shown below.  Some classes
 * that do not inherit from TypedObject may still declare TypeHandles for
 * themselves by defining methods called get_class_type() and init_type().
 * Classes such as these may serve as base classes, but the dynamic type
 * identification system will be limited.  Classes that do not inherit from
 * TypedObject need not define the virtual functions get_type() and
 * force_init_type() (or any other virtual functions).
 *
 * There is a specific layout for defining the overrides from this class.
 * Keeping the definitions formatted just like these examples will allow
 * someone in the future to use a sed (or similar) script to make global
 * changes, if necessary.  Avoid rearranging the braces or the order of the
 * functions unless you're ready to change them in every file all at once.
 *
 * What follows are some examples that can be used in new classes that you
 * create.
 *
 * @par In the class definition (.h file):
 * @code
 * public:
 *   static TypeHandle get_class_type() {
 *     return _type_handle;
 *   }
 *   static void init_type() {
 *     <<<BaseClassOne>>>::init_type();
 *     <<<BaseClassTwo>>>::init_type();
 *     <<<BaseClassN>>>::init_type();
 *     register_type(_type_handle, "<<<ThisClassStringName>>>",
 *                   <<<BaseClassOne>>>::get_class_type(),
 *                   <<<BaseClassTwo>>>::get_class_type(),
 *                   <<<BaseClassN>>>::get_class_type());
 *   }
 *   virtual TypeHandle get_type() const {
 *     return get_class_type();
 *   }
 *   virtual TypeHandle force_init_type() {init_type(); return get_class_type();}
 *
 * private:
 *   static TypeHandle _type_handle;
 * @endcode
 *
 * @par In the class .cxx file:
 * @code
 * TypeHandle <<<ThisClassStringName>>>::_type_handle;
 * @endcode
 *
 * @par In the class config_<<<PackageName>>>.cxx file:
 * @code
 * ConfigureFn(config_<<<PackageName>>>) {
 *   <<<ClassOne>>>::init_type();
 *   <<<ClassTwo>>>::init_type();
 *   <<<ClassN>>>::init_type();
 * }
 * @endcode
 */

1343 17 DatagramGenerator 0 26625 17 DatagramGenerator 17 DatagramGenerator 0 0 0 0 917 0 9 918 919 920 921 922 923 924 925 926 0 0 0 0 0 125
/**
 * This class defines the abstract interace to any source of datagrams,
 * whether it be from a file or from the net.
 */

1344 16 DatagramIterator 0 141313 16 DatagramIterator 16 DatagramIterator 0 0 0 1 927 964 0 36 928 929 930 931 932 933 934 935 936 937 938 939 940 941 942 943 944 945 946 947 948 949 950 951 952 953 954 955 956 957 958 959 960 961 962 963 0 0 0 0 0 365
/**
 * A class to retrieve the individual data elements previously stored in a
 * Datagram.  Elements may be retrieved one at a time; it is up to the caller
 * to know the correct type and order of each element.
 *
 * Note that it is the responsibility of the caller to ensure that the datagram
 * object is not destructed while this DatagramIterator is in use.
 */

1345 12 DatagramSink 0 26625 12 DatagramSink 12 DatagramSink 0 0 0 0 965 3 1608 1609 1610 7 966 967 968 969 970 971 972 0 0 0 0 0 135
/**
 * This class defines the abstract interface to sending datagrams to any
 * target, whether it be into a file or across the net
 */

1346 14 Filename const 0 8832 14 Filename const 14 Filename const 0 0 1347 0 0 0 0 0 0 0 0 0 0

1347 8 Filename 0 2048 8 Filename 8 Filename 0 0 0 0 0 0 0 0 0 0 0 0 550
/**
 * The name of a file, such as a texture file or an Egg file.  Stores the full
 * pathname, and includes functions for extracting out the directory prefix
 * part and the file extension and stuff.
 *
 * A Filename is also aware of the mapping between the Unix-like filename
 * convention we use internally, and the local OS's specific filename
 * convention, and it knows how to perform basic OS-specific I/O, like testing
 * for file existence and searching a searchpath, as well as the best way to
 * open an fstream for reading or writing.
 */

1348 21 FileReference const * 0 8576 21 FileReference const * 21 FileReference const * 0 0 1349 0 0 0 0 0 0 0 0 0 0

1349 19 FileReference const 0 8832 19 FileReference const 19 FileReference const 0 0 1350 0 0 0 0 0 0 0 0 0 0

1350 13 FileReference 0 141313 13 FileReference 13 FileReference 0 0 0 1 979 982 0 2 980 981 0 0 1 0 1351 0 0 0 0 149
/**
 * Keeps a reference-counted pointer to a file on disk.  As long as the
 * FileReference is held, someone presumably has a use for this file.
 */

1351 19 TypedReferenceCount 0 141313 19 TypedReferenceCount 19 TypedReferenceCount 0 0 0 0 978 0 1 977 0 0 2 3 1342 973 974 3 1336 975 976 0 0 410
/**
 * A base class for things which need to inherit from both TypedObject and
 * from ReferenceCount.  It's convenient to define this intermediate base
 * class instead of multiply inheriting from the two classes each time they
 * are needed, so that we can sensibly pass around pointers to things which
 * are both TypedObjects and ReferenceCounters.
 *
 * See also TypedObject for detailed instructions.
 */

1352 9 streamoff 0 2105344 14 std::streamoff 14 std::streamoff 0 0 1353 0 0 0 0 0 0 0 0 0 0

1353 13 long long int 0 8226 13 long long int 13 long long int 0 8 0 0 0 0 0 0 0 0 0 0 0

1354 13 ErrorUtilCode 0 532481 13 ErrorUtilCode 13 ErrorUtilCode 0 0 0 0 0 0 0 0 0 0 37 16 EU_http_redirect 16 EU_http_redirect 0
7 6 EU_eof 6 EU_eof 0
6 18 EU_network_no_data 18 EU_network_no_data 0
5 12 EU_write_ram 12 EU_write_ram 0
4 8 EU_write 8 EU_write 0
3 5 EU_ok 5 EU_ok 0
2 10 EU_success 10 EU_success 0
1 14 EU_error_abort 14 EU_error_abort 17
// General errors
-1 19 EU_error_file_empty 19 EU_error_file_empty 0
-2 21 EU_error_file_invalid 21 EU_error_file_invalid 0
-3 25 EU_error_invalid_checksum 25 EU_error_invalid_checksum 0
-4 21 EU_error_network_dead 21 EU_error_network_dead 25
// General network errors
-30 28 EU_error_network_unreachable 28 EU_error_network_unreachable 0
-31 29 EU_error_network_disconnected 29 EU_error_network_disconnected 0
-32 24 EU_error_network_timeout 24 EU_error_network_timeout 0
-33 24 EU_error_network_no_data 24 EU_error_network_no_data 0
-34 37 EU_error_network_disconnected_locally 37 EU_error_network_disconnected_locally 23
// Local network errors
-40 32 EU_error_network_buffer_overflow 32 EU_error_network_buffer_overflow 0
-41 36 EU_error_network_disk_quota_exceeded 36 EU_error_network_disk_quota_exceeded 0
-42 41 EU_error_network_remote_host_disconnected 41 EU_error_network_remote_host_disconnected 29
// Remote host network errors
-50 33 EU_error_network_remote_host_down 33 EU_error_network_remote_host_down 0
-51 40 EU_error_network_remote_host_unreachable 40 EU_error_network_remote_host_unreachable 0
-52 38 EU_error_network_remote_host_not_found 38 EU_error_network_remote_host_not_found 0
-53 40 EU_error_network_remote_host_no_response 40 EU_error_network_remote_host_no_response 0
-54 27 EU_error_write_out_of_files 27 EU_error_write_out_of_files 23
// General local errors
-60 28 EU_error_write_out_of_memory 28 EU_error_write_out_of_memory 0
-61 32 EU_error_write_sharing_violation 32 EU_error_write_sharing_violation 0
-62 24 EU_error_write_disk_full 24 EU_error_write_disk_full 0
-63 29 EU_error_write_disk_not_found 29 EU_error_write_disk_not_found 0
-64 36 EU_error_write_disk_sector_not_found 36 EU_error_write_disk_sector_not_found 0
-65 25 EU_error_write_disk_fault 25 EU_error_write_disk_fault 0
-66 26 EU_error_write_file_rename 26 EU_error_write_file_rename 0
-67 28 EU_error_http_server_timeout 28 EU_error_http_server_timeout 14
// HTTP errors
-70 29 EU_error_http_gateway_timeout 29 EU_error_http_gateway_timeout 0
-71 33 EU_error_http_service_unavailable 33 EU_error_http_service_unavailable 0
-72 34 EU_error_http_proxy_authentication 34 EU_error_http_proxy_authentication 0
-73 13 EU_error_zlib 13 EU_error_zlib 14
// Zlib errors
-80 0 0

1355 7 Ramfile 0 141313 7 Ramfile 7 Ramfile 0 0 0 1 993 1002 0 8 994 995 996 997 998 999 1000 1001 0 0 0 0 0 85
/**
 * An in-memory buffer specifically designed for downloading files to memory.
 */

1356 7 HashVal 0 141313 7 HashVal 7 HashVal 0 0 0 1 1003 1033 0 29 1004 1005 1006 1007 1008 1009 1010 1011 1012 1013 1014 1015 1016 1017 1018 1019 1020 1021 1022 1023 1024 1025 1026 1027 1028 1029 1030 1031 1032 0 0 0 0 0 109
/**
 * Stores a 128-bit value that represents the hashed contents (typically MD5)
 * of a file or buffer.
 */

1357 19 MemoryUsagePointers 0 26625 19 MemoryUsagePointers 19 MemoryUsagePointers 0 0 0 1 1034 1035 0 9 1036 1037 1038 1039 1040 1041 1042 1043 1044 2 1623 1624 0 0 0 0 785
/**
 * This is a list of pointers returned by a MemoryUsage object in response to
 * some query.
 *
 * Warning: once pointers are stored in a MemoryUsagePointers object, they are
 * reference-counted, and will not be freed until the MemoryUsagePointers
 * object is freed (or clear() is called on the object).  However, they may
 * not even be freed then; pointers may leak once they have been added to this
 * structure.  This is because we don't store enough information in this
 * structure to correctly free the pointers that have been added.  Since this
 * is intended primarily as a debugging tool, this is not a major issue.
 *
 * This class is just a user interface to talk about pointers stored in a
 * MemoryUsage object.  It doesn't even exist when compiled with NDEBUG.
 */

1358 10 ISubStream 0 141313 10 ISubStream 10 ISubStream 0 0 0 1 1045 1048 0 2 1046 1047 0 0 1 0 1359 0 0 0 0 392
/**
 * An istream object that presents a subwindow into another istream.  The
 * first character read from this stream will be the "start" character from
 * the source istream; just before the file pointer reaches the "end"
 * character, eof is returned.
 *
 * The source stream must be one that we can randomly seek within.  The
 * resulting ISubStream will also support arbitrary seeks.
 */

1359 7 istream 0 2048 12 std::istream 12 std::istream 0 0 0 0 0 0 0 0 0 0 0 0 0

1360 10 OSubStream 0 141313 10 OSubStream 10 OSubStream 0 0 0 1 1049 1052 0 2 1050 1051 0 0 1 0 1361 0 0 0 0 391
/**
 * An ostream object that presents a subwindow into another ostream.  The
 * first character written to this stream will be the "start" character in the
 * dest istream; no characters may be written to character "end" or later
 * (unless end is zero).
 *
 * The dest stream must be one that we can randomly seek within.  The
 * resulting OSubStream will also support arbitrary seeks.
 */

1361 7 ostream 0 2048 12 std::ostream 12 std::ostream 0 0 0 0 0 0 0 0 0 0 0 0 0

1362 9 SubStream 0 141313 9 SubStream 9 SubStream 0 0 0 1 1053 1056 0 2 1054 1055 0 0 1 0 1363 0 0 0 0 68
/**
 * Combined ISubStream and OSubStream for bidirectional I/O.
 */

1363 8 iostream 0 2048 13 std::iostream 13 std::iostream 0 0 0 0 0 0 0 0 0 0 0 0 0

1364 9 Multifile 0 75777 9 Multifile 9 Multifile 0 0 0 1 1057 845 1 1611 62 1058 1059 1060 1061 1062 1063 1064 1065 1066 1067 1068 1069 1070 1071 1072 1073 1074 1075 1076 1077 1078 1079 1080 1081 1082 1083 1084 1085 1086 1087 1088 1089 1090 1091 1092 1093 1094 1095 1096 1097 1098 1099 1100 1101 1102 1103 1104 1105 1106 1107 1108 1109 1110 1111 1112 1113 1114 1115 1116 1117 1118 1119 1 1625 0 1 0 1336 0 0 0 0 47
/**
 * A file that contains a set of files.
 */

1365 6 string 0 2105344 11 std::string 11 std::string 0 0 1366 0 0 0 0 0 0 0 0 0 0

1366 20 basic_string< char > 0 2048 25 std::basic_string< char > 25 std::basic_string< char > 0 0 0 0 0 0 0 0 0 0 0 0 0

1367 7 Namable 0 141313 7 Namable 7 Namable 0 0 0 1 1120 1127 1 1612 6 1121 1122 1123 1124 1125 1126 0 0 1 0 1310 0 0 0 0 125
/**
 * A base class for all things which can have a name.  The name is either
 * empty or nonempty, but it is never NULL.
 */

1368 12 string const 0 8832 17 std::string const 17 std::string const 0 0 1365 0 0 0 0 0 0 0 0 0 0

1369 14 OpenSSLWrapper 0 43009 14 OpenSSLWrapper 14 OpenSSLWrapper 0 0 0 0 0 0 8 1128 1129 1130 1131 1132 1133 1134 1135 0 0 0 0 0 205
/**
 * Provides an interface wrapper around the OpenSSL library, to ensure that
 * the library is properly initialized in the application, and to provide some
 * hooks into global OpenSSL context data.
 */

1370 11 SubfileInfo 0 141313 11 SubfileInfo 11 SubfileInfo 0 0 0 1 1136 1144 0 7 1137 1138 1139 1140 1141 1142 1143 0 0 0 0 0 200
/**
 * This class records a particular byte sub-range within an existing file on
 * disk.  Generally, the filename is understood as a physical file on disk,
 * and not to be looked up via the vfs.
 */

1371 11 VirtualFile 0 141313 11 VirtualFile 11 VirtualFile 0 0 0 0 1174 0 29 1145 1146 1147 1148 1149 1150 1151 1152 1153 1154 1155 1156 1157 1158 1159 1160 1161 1162 1163 1164 1165 1166 1167 1168 1169 1170 1171 1172 1173 0 0 1 0 1351 0 0 0 0 91
/**
 * The abstract base class for a file or directory within the
 * VirtualFileSystem.
 */

1372 20 VirtualFileComposite 0 141313 20 VirtualFileComposite 20 VirtualFileComposite 0 0 0 0 1176 0 1 1175 0 0 1 0 1371 0 0 0 0 223
/**
 * A composite directory within the VirtualFileSystem: this maps to more than
 * one directory on different mount points.  The resulting directory appears
 * to be the union of all the individual simple directories.
 */

1373 16 VirtualFileMount 0 75777 16 VirtualFileMount 16 VirtualFileMount 0 0 0 0 978 0 6 1177 1178 1179 1180 1181 1182 0 0 1 0 1351 0 0 0 0 159
/**
 * The abstract base class for a mount definition used within a
 * VirtualFileSystem.  Normally users don't need to monkey with this class
 * directly.
 */

1374 25 VirtualFileMountMultifile 0 75777 25 VirtualFileMountMultifile 25 VirtualFileMountMultifile 0 0 0 1 1183 978 0 2 1184 1185 0 0 1 0 1373 0 0 0 0 66
/**
 * Maps a Multifile's contents into the VirtualFileSystem.
 */

1375 23 VirtualFileMountRamdisk 0 141313 23 VirtualFileMountRamdisk 23 VirtualFileMountRamdisk 0 0 0 1 1186 1188 0 1 1187 0 0 1 0 1373 0 0 0 0 384
/**
 * Simulates an actual directory on disk with in-memory storage.  This is
 * useful mainly for performing high level functions that expect disk I/O
 * without actually writing files to disk.  Naturally, there are significant
 * limits to the size of the files that may be written with this system; and
 * "files" written here are not automatically persistent between sessions.
 */

1376 22 VirtualFileMountSystem 0 141313 22 VirtualFileMountSystem 22 VirtualFileMountSystem 0 0 0 1 1189 1192 0 2 1190 1191 0 0 1 0 1373 0 0 0 0 66
/**
 * Maps an actual OS directory into the VirtualFileSystem.
 */

1377 17 VirtualFileSimple 0 141313 17 VirtualFileSimple 17 VirtualFileSimple 0 0 0 0 1196 0 3 1193 1194 1195 0 0 1 0 1371 0 0 0 0 183
/**
 * A simple file or directory within the VirtualFileSystem: this maps to
 * exactly one file on one mount point.  Most directories, and all regular
 * files, are of this kind.
 */

1378 13 TemporaryFile 0 75777 13 TemporaryFile 13 TemporaryFile 0 0 0 1 1197 982 0 1 1198 0 0 1 0 1350 0 0 0 0 206
/**
 * This is a special kind of FileReference class that automatically deletes
 * the file in question when it is deleted.  It is not responsible for
 * creating, opening, or closing the file, however.
 */

1379 17 IDecompressStream 0 141313 17 IDecompressStream 17 IDecompressStream 0 0 0 1 1199 1202 0 2 1200 1201 0 0 1 0 1359 0 0 0 0 323
/**
 * An input stream object that uses zlib to decompress (inflate) the input
 * from another source stream on-the-fly.
 *
 * Attach an IDecompressStream to an existing istream that provides compressed
 * data, and read the corresponding uncompressed data from the
 * IDecompressStream.
 *
 * Seeking is not supported.
 */

1380 15 OCompressStream 0 141313 15 OCompressStream 15 OCompressStream 0 0 0 1 1203 1206 0 2 1204 1205 0 0 1 0 1361 0 0 0 0 311
/**
 * An input stream object that uses zlib to compress (deflate) data to another
 * destination stream on-the-fly.
 *
 * Attach an OCompressStream to an existing ostream that will accept
 * compressed data, and write your uncompressed source data to the
 * OCompressStream.
 *
 * Seeking is not supported.
 */

1381 15 VirtualFileList 0 75777 15 VirtualFileList 15 VirtualFileList 0 0 0 1 1213 845 0 6 1207 1208 1209 1210 1211 1212 1 1626 0 1 0 1336 0 0 0 0 80
/**
 * A list of VirtualFiles, as returned by VirtualFile::scan_directory().
 */

1382 17 VirtualFileSystem 0 26625 17 VirtualFileSystem 17 VirtualFileSystem 0 0 0 1 1214 1215 1 1613 37 1216 1217 1218 1219 1220 1221 1222 1231 1232 1233 1234 1235 1236 1237 1238 1239 1240 1241 1242 1243 1244 1245 1246 1247 1248 1249 1250 1251 1252 1253 1254 1255 1256 1257 1258 1259 1260 1 1627 0 0 0 1 1383 352
/**
 * A hierarchy of directories and files that appears to be one continuous file
 * system, even though the files may originate from several different sources
 * that may not be related to the actual OS's file system.
 *
 * For instance, a VirtualFileSystem can transparently mount one or more
 * Multifiles as their own subdirectory hierarchies.
 */

1383 10 MountFlags 0 794624 29 VirtualFileSystem::MountFlags 29 VirtualFileSystem::MountFlags 1382 0 0 0 0 0 0 0 0 0 1 12 MF_read_only 31 VirtualFileSystem::MF_read_only 0
2 0 0

1384 29 PointerTo< VirtualFileMount > 0 141313 29 PointerTo< VirtualFileMount > 29 PointerTo< VirtualFileMount > 0 0 0 1 1225 1230 0 4 1226 1227 1228 1229 0 0 1 0 1385 0 0 0 0 0

1385 33 PointerToBase< VirtualFileMount > 0 43009 33 PointerToBase< VirtualFileMount > 33 PointerToBase< VirtualFileMount > 0 0 0 0 0 0 2 1223 1224 0 0 1 0 1309 0 0 0 0 0

1386 9 TrueClock 0 43009 9 TrueClock 9 TrueClock 0 0 0 0 0 4 1614 1615 1616 1617 6 1261 1262 1263 1264 1265 1266 0 0 0 0 0 467
/**
 * An interface to whatever real-time clock we might have available in the
 * current environment.  There is only one TrueClock in existence, and it
 * constructs itself.
 *
 * The TrueClock returns elapsed real time in seconds since some undefined
 * epoch.  Since it is not defined at what time precisely the clock indicates
 * zero, this value can only be meaningfully used to measure elapsed time, by
 * sampling it at two different times and subtracting.
 */

1387 6 double 0 8194 6 double 6 double 0 3 0 0 0 0 0 0 0 0 0 0 0

1388 9 Patchfile 0 26625 9 Patchfile 9 Patchfile 0 0 0 1 1267 1268 5 1618 1619 1620 1621 1622 14 1269 1270 1271 1272 1273 1274 1275 1276 1277 1278 1279 1280 1281 1282 0 0 0 0 0 10
/**
 *
 */

1389 11 PN_stdfloat 0 2105344 11 PN_stdfloat 11 PN_stdfloat 0 0 1390 0 0 0 0 0 0 0 0 0 0

1390 5 float 0 8194 5 float 5 float 0 2 0 0 0 0 0 0 0 0 0 0 0

1391 13 HashVal const 0 8832 13 HashVal const 13 HashVal const 0 0 1356 0 0 0 0 0 0 0 0 0 0

1392 12 ProfileTimer 0 26625 12 ProfileTimer 12 ProfileTimer 0 0 0 1 1284 1285 0 9 1286 1287 1288 1289 1290 1291 1292 1293 1294 0 0 0 0 0 713
/*
    ProfileTimer

    HowTo:
      Create a ProfileTimer and hold onto it.
      Call init() whenever you like (the timer doesn't
        start yet).
      Call on() to start the timer.
      While the timer is on, call mark() at each point of interest,
        in the code you are timing.
      You can turn the timer off() and on() to skip things you
        don't want to time.
      When your timing is finished, call printTo() to see the
        results (e.g. myTimer.printTo(cerr)).

    Notes:
      You should be able to time things down to the millisecond
      well enough, but if you call on() and off() within micro-
      seconds of each other, I don't think you'll get very good
      results.
*/

1393 17 WeakPointerToVoid 0 141313 17 WeakPointerToVoid 17 WeakPointerToVoid 0 0 0 0 1297 0 2 1295 1296 0 0 1 0 1309 0 0 0 0 152
/**
 * This is the specialization of PointerToVoid for weak pointers.  It needs an
 * additional flag to indicate that the pointer has been deleted.
 */

1394 15 WindowsRegistry 0 141313 15 WindowsRegistry 15 WindowsRegistry 0 0 0 1 1303 1304 0 5 1298 1299 1300 1301 1302 0 0 0 0 2 1395 1396 249
/**
 * This class provides a hook to Python to read and write strings and integers
 * to the windows registry.  It automatically converts strings from utf-8
 * encoding and stores them in Unicode (and conversely reconverts them on
 * retrieval).
 */

1395 8 RegLevel 0 794624 25 WindowsRegistry::RegLevel 25 WindowsRegistry::RegLevel 1394 0 0 0 0 0 0 0 0 0 2 10 rl_machine 27 WindowsRegistry::rl_machine 0
0 7 rl_user 24 WindowsRegistry::rl_user 0
1 0 0

1396 4 Type 0 794624 21 WindowsRegistry::Type 21 WindowsRegistry::Type 1394 0 0 0 0 0 0 0 0 0 3 6 T_none 23 WindowsRegistry::T_none 0
0 5 T_int 22 WindowsRegistry::T_int 0
1 8 T_string 25 WindowsRegistry::T_string 0
2 0 0

1397 12 PTA_stdfloat 0 2105345 12 PTA_stdfloat 12 PTA_stdfloat 0 0 1325 0 0 0 0 0 0 0 0 0 0

1398 13 CPTA_stdfloat 0 2105345 13 CPTA_stdfloat 13 CPTA_stdfloat 0 0 1311 0 0 0 0 0 0 0 0 0 0

1399 37 ConstPointerToArray< double > const * 0 8576 37 ConstPointerToArray< double > const * 37 ConstPointerToArray< double > const * 0 0 1400 0 0 0 0 0 0 0 0 0 0

1400 35 ConstPointerToArray< double > const 0 8832 35 ConstPointerToArray< double > const 35 ConstPointerToArray< double > const 0 0 1306 0 0 0 0 0 0 0 0 0 0

1401 31 ConstPointerToArray< double > * 0 8576 31 ConstPointerToArray< double > * 31 ConstPointerToArray< double > * 0 0 1306 0 0 0 0 0 0 0 0 0 0

1402 32 PointerToArray< double > const * 0 8576 32 PointerToArray< double > const * 32 PointerToArray< double > const * 0 0 1403 0 0 0 0 0 0 0 0 0 0

1403 30 PointerToArray< double > const 0 8832 30 PointerToArray< double > const 30 PointerToArray< double > const 0 0 1324 0 0 0 0 0 0 0 0 0 0

1404 4 void 0 8194 4 void 4 void 0 6 0 0 0 0 0 0 0 0 0 0 0

1405 10 PyObject * 0 8576 10 PyObject * 10 PyObject * 0 0 1406 0 0 0 0 0 0 0 0 0 0

1406 8 PyObject 0 2105344 8 PyObject 8 PyObject 0 0 1407 0 0 0 0 0 0 0 0 0 0

1407 7 _object 0 1024 7 _object 7 _object 0 0 0 0 0 0 0 0 0 0 0 0 0

1408 11 Py_buffer * 0 8576 11 Py_buffer * 11 Py_buffer * 0 0 1409 0 0 0 0 0 0 0 0 0 0

1409 9 Py_buffer 0 2105344 9 Py_buffer 9 Py_buffer 0 0 1410 0 0 0 0 0 0 0 0 0 0

1410 10 bufferinfo 0 1024 10 bufferinfo 10 bufferinfo 0 0 0 0 0 0 0 0 0 0 0 0 0

1411 36 PointerToArrayBase< double > const * 0 8576 36 PointerToArrayBase< double > const * 36 PointerToArrayBase< double > const * 0 0 1412 0 0 0 0 0 0 0 0 0 0

1412 34 PointerToArrayBase< double > const 0 8832 34 PointerToArrayBase< double > const 34 PointerToArrayBase< double > const 0 0 1307 0 0 0 0 0 0 0 0 0 0

1413 51 PointerToBase< ReferenceCountedVector< double > > * 0 8576 51 PointerToBase< ReferenceCountedVector< double > > * 51 PointerToBase< ReferenceCountedVector< double > > * 0 0 1308 0 0 0 0 0 0 0 0 0 0

1414 57 PointerToBase< ReferenceCountedVector< double > > const * 0 8576 57 PointerToBase< ReferenceCountedVector< double > > const * 57 PointerToBase< ReferenceCountedVector< double > > const * 0 0 1415 0 0 0 0 0 0 0 0 0 0

1415 55 PointerToBase< ReferenceCountedVector< double > > const 0 8832 55 PointerToBase< ReferenceCountedVector< double > > const 55 PointerToBase< ReferenceCountedVector< double > > const 0 0 1308 0 0 0 0 0 0 0 0 0 0

1416 9 ostream * 0 8576 14 std::ostream * 14 std::ostream * 0 0 1361 0 0 0 0 0 0 0 0 0 0

1417 21 PointerToVoid const * 0 8576 21 PointerToVoid const * 21 PointerToVoid const * 0 0 1418 0 0 0 0 0 0 0 0 0 0

1418 19 PointerToVoid const 0 8832 19 PointerToVoid const 19 PointerToVoid const 0 0 1309 0 0 0 0 0 0 0 0 0 0

1419 36 ConstPointerToArray< float > const * 0 8576 36 ConstPointerToArray< float > const * 36 ConstPointerToArray< float > const * 0 0 1420 0 0 0 0 0 0 0 0 0 0

1420 34 ConstPointerToArray< float > const 0 8832 34 ConstPointerToArray< float > const 34 ConstPointerToArray< float > const 0 0 1312 0 0 0 0 0 0 0 0 0 0

1421 30 ConstPointerToArray< float > * 0 8576 30 ConstPointerToArray< float > * 30 ConstPointerToArray< float > * 0 0 1312 0 0 0 0 0 0 0 0 0 0

1422 31 PointerToArray< float > const * 0 8576 31 PointerToArray< float > const * 31 PointerToArray< float > const * 0 0 1423 0 0 0 0 0 0 0 0 0 0

1423 29 PointerToArray< float > const 0 8832 29 PointerToArray< float > const 29 PointerToArray< float > const 0 0 1326 0 0 0 0 0 0 0 0 0 0

1424 35 PointerToArrayBase< float > const * 0 8576 35 PointerToArrayBase< float > const * 35 PointerToArrayBase< float > const * 0 0 1425 0 0 0 0 0 0 0 0 0 0

1425 33 PointerToArrayBase< float > const 0 8832 33 PointerToArrayBase< float > const 33 PointerToArrayBase< float > const 0 0 1313 0 0 0 0 0 0 0 0 0 0

1426 50 PointerToBase< ReferenceCountedVector< float > > * 0 8576 50 PointerToBase< ReferenceCountedVector< float > > * 50 PointerToBase< ReferenceCountedVector< float > > * 0 0 1314 0 0 0 0 0 0 0 0 0 0

1427 56 PointerToBase< ReferenceCountedVector< float > > const * 0 8576 56 PointerToBase< ReferenceCountedVector< float > > const * 56 PointerToBase< ReferenceCountedVector< float > > const * 0 0 1428 0 0 0 0 0 0 0 0 0 0

1428 54 PointerToBase< ReferenceCountedVector< float > > const 0 8832 54 PointerToBase< ReferenceCountedVector< float > > const 54 PointerToBase< ReferenceCountedVector< float > > const 0 0 1314 0 0 0 0 0 0 0 0 0 0

1429 34 ConstPointerToArray< int > const * 0 8576 34 ConstPointerToArray< int > const * 34 ConstPointerToArray< int > const * 0 0 1430 0 0 0 0 0 0 0 0 0 0

1430 32 ConstPointerToArray< int > const 0 8832 32 ConstPointerToArray< int > const 32 ConstPointerToArray< int > const 0 0 1316 0 0 0 0 0 0 0 0 0 0

1431 28 ConstPointerToArray< int > * 0 8576 28 ConstPointerToArray< int > * 28 ConstPointerToArray< int > * 0 0 1316 0 0 0 0 0 0 0 0 0 0

1432 29 PointerToArray< int > const * 0 8576 29 PointerToArray< int > const * 29 PointerToArray< int > const * 0 0 1433 0 0 0 0 0 0 0 0 0 0

1433 27 PointerToArray< int > const 0 8832 27 PointerToArray< int > const 27 PointerToArray< int > const 0 0 1328 0 0 0 0 0 0 0 0 0 0

1434 33 PointerToArrayBase< int > const * 0 8576 33 PointerToArrayBase< int > const * 33 PointerToArrayBase< int > const * 0 0 1435 0 0 0 0 0 0 0 0 0 0

1435 31 PointerToArrayBase< int > const 0 8832 31 PointerToArrayBase< int > const 31 PointerToArrayBase< int > const 0 0 1317 0 0 0 0 0 0 0 0 0 0

1436 48 PointerToBase< ReferenceCountedVector< int > > * 0 8576 48 PointerToBase< ReferenceCountedVector< int > > * 48 PointerToBase< ReferenceCountedVector< int > > * 0 0 1318 0 0 0 0 0 0 0 0 0 0

1437 54 PointerToBase< ReferenceCountedVector< int > > const * 0 8576 54 PointerToBase< ReferenceCountedVector< int > > const * 54 PointerToBase< ReferenceCountedVector< int > > const * 0 0 1438 0 0 0 0 0 0 0 0 0 0

1438 52 PointerToBase< ReferenceCountedVector< int > > const 0 8832 52 PointerToBase< ReferenceCountedVector< int > > const 52 PointerToBase< ReferenceCountedVector< int > > const 0 0 1318 0 0 0 0 0 0 0 0 0 0

1439 44 ConstPointerToArray< unsigned char > const * 0 8576 44 ConstPointerToArray< unsigned char > const * 44 ConstPointerToArray< unsigned char > const * 0 0 1440 0 0 0 0 0 0 0 0 0 0

1440 42 ConstPointerToArray< unsigned char > const 0 8832 42 ConstPointerToArray< unsigned char > const 42 ConstPointerToArray< unsigned char > const 0 0 1320 0 0 0 0 0 0 0 0 0 0

1441 38 ConstPointerToArray< unsigned char > * 0 8576 38 ConstPointerToArray< unsigned char > * 38 ConstPointerToArray< unsigned char > * 0 0 1320 0 0 0 0 0 0 0 0 0 0

1442 39 PointerToArray< unsigned char > const * 0 8576 39 PointerToArray< unsigned char > const * 39 PointerToArray< unsigned char > const * 0 0 1443 0 0 0 0 0 0 0 0 0 0

1443 37 PointerToArray< unsigned char > const 0 8832 37 PointerToArray< unsigned char > const 37 PointerToArray< unsigned char > const 0 0 1330 0 0 0 0 0 0 0 0 0 0

1444 13 unsigned char 0 8198 13 unsigned char 13 unsigned char 0 5 0 0 0 0 0 0 0 0 0 0 0

1445 43 PointerToArrayBase< unsigned char > const * 0 8576 43 PointerToArrayBase< unsigned char > const * 43 PointerToArrayBase< unsigned char > const * 0 0 1446 0 0 0 0 0 0 0 0 0 0

1446 41 PointerToArrayBase< unsigned char > const 0 8832 41 PointerToArrayBase< unsigned char > const 41 PointerToArrayBase< unsigned char > const 0 0 1321 0 0 0 0 0 0 0 0 0 0

1447 58 PointerToBase< ReferenceCountedVector< unsigned char > > * 0 8576 58 PointerToBase< ReferenceCountedVector< unsigned char > > * 58 PointerToBase< ReferenceCountedVector< unsigned char > > * 0 0 1322 0 0 0 0 0 0 0 0 0 0

1448 64 PointerToBase< ReferenceCountedVector< unsigned char > > const * 0 8576 64 PointerToBase< ReferenceCountedVector< unsigned char > > const * 64 PointerToBase< ReferenceCountedVector< unsigned char > > const * 0 0 1449 0 0 0 0 0 0 0 0 0 0

1449 62 PointerToBase< ReferenceCountedVector< unsigned char > > const 0 8832 62 PointerToBase< ReferenceCountedVector< unsigned char > > const 62 PointerToBase< ReferenceCountedVector< unsigned char > > const 0 0 1322 0 0 0 0 0 0 0 0 0 0

1450 26 PointerToArray< double > * 0 8576 26 PointerToArray< double > * 26 PointerToArray< double > * 0 0 1324 0 0 0 0 0 0 0 0 0 0

1451 12 TypeHandle * 0 8576 12 TypeHandle * 12 TypeHandle * 0 0 1452 0 0 0 0 0 0 0 0 0 0

1452 10 TypeHandle 0 16779264 10 TypeHandle 10 TypeHandle 0 0 0 0 0 0 0 0 0 0 0 0 732
/**
 * TypeHandle is the identifier used to differentiate C++ class types.  Any
 * C++ classes that inherit from some base class, and must be differentiated
 * at run time, should store a static TypeHandle object that can be queried
 * through a static member function named get_class_type().  Most of the time,
 * it is also desirable to inherit from TypedObject, which provides some
 * virtual functions to return the TypeHandle for a particular instance.
 *
 * At its essence, a TypeHandle is simply a unique identifier that is assigned
 * by the TypeRegistry.  The TypeRegistry stores a tree of TypeHandles, so
 * that ancestry of a particular type may be queried, and the type name may be
 * retrieved for run-time display.
 */

1453 13 atomic string 0 2 13 atomic string 13 atomic string 0 7 0 0 0 0 0 0 0 0 0 0 0

1454 25 PointerToArray< float > * 0 8576 25 PointerToArray< float > * 25 PointerToArray< float > * 0 0 1326 0 0 0 0 0 0 0 0 0 0

1455 23 PointerToArray< int > * 0 8576 23 PointerToArray< int > * 23 PointerToArray< int > * 0 0 1328 0 0 0 0 0 0 0 0 0 0

1456 33 PointerToArray< unsigned char > * 0 8576 33 PointerToArray< unsigned char > * 33 PointerToArray< unsigned char > * 0 0 1330 0 0 0 0 0 0 0 0 0 0

1457 19 MemoryUsage const * 0 8576 19 MemoryUsage const * 19 MemoryUsage const * 0 0 1458 0 0 0 0 0 0 0 0 0 0

1458 17 MemoryUsage const 0 8832 17 MemoryUsage const 17 MemoryUsage const 0 0 1331 0 0 0 0 0 0 0 0 0 0

1459 13 MemoryUsage * 0 8576 13 MemoryUsage * 13 MemoryUsage * 0 0 1331 0 0 0 0 0 0 0 0 0 0

1460 21 MemoryUsagePointers * 0 8576 21 MemoryUsagePointers * 21 MemoryUsagePointers * 0 0 1357 0 0 0 0 0 0 0 0 0 0

1461 22 ReferenceCount const * 0 8576 22 ReferenceCount const * 22 ReferenceCount const * 0 0 1462 0 0 0 0 0 0 0 0 0 0

1462 20 ReferenceCount const 0 8832 20 ReferenceCount const 20 ReferenceCount const 0 0 1336 0 0 0 0 0 0 0 0 0 0

1463 16 ReferenceCount * 0 8576 16 ReferenceCount * 16 ReferenceCount * 0 0 1336 0 0 0 0 0 0 0 0 0 0

1464 12 MemoryBase * 0 8576 12 MemoryBase * 12 MemoryBase * 0 0 1310 0 0 0 0 0 0 0 0 0 0

1465 14 Buffer const * 0 8576 14 Buffer const * 14 Buffer const * 0 0 1466 0 0 0 0 0 0 0 0 0 0

1466 12 Buffer const 0 8832 12 Buffer const 12 Buffer const 0 0 1338 0 0 0 0 0 0 0 0 0 0

1467 8 Buffer * 0 8576 8 Buffer * 8 Buffer * 0 0 1338 0 0 0 0 0 0 0 0 0 0

1468 27 PStatCollectorForwardBase * 0 8576 27 PStatCollectorForwardBase * 27 PStatCollectorForwardBase * 0 0 1339 0 0 0 0 0 0 0 0 0 0

1469 26 NodeReferenceCount const * 0 8576 26 NodeReferenceCount const * 26 NodeReferenceCount const * 0 0 1470 0 0 0 0 0 0 0 0 0 0

1470 24 NodeReferenceCount const 0 8832 24 NodeReferenceCount const 24 NodeReferenceCount const 0 0 1340 0 0 0 0 0 0 0 0 0 0

1471 10 Datagram * 0 8576 10 Datagram * 10 Datagram * 0 0 1341 0 0 0 0 0 0 0 0 0 0

1472 16 Datagram const * 0 8576 16 Datagram const * 16 Datagram const * 0 0 1473 0 0 0 0 0 0 0 0 0 0

1473 14 Datagram const 0 8832 14 Datagram const 14 Datagram const 0 0 1341 0 0 0 0 0 0 0 0 0 0

1474 12 vector_uchar 0 2105344 12 vector_uchar 12 vector_uchar 0 0 1475 0 0 0 0 0 0 0 0 0 0

1475 24 pvector< unsigned char > 0 2048 24 pvector< unsigned char > 24 pvector< unsigned char > 0 0 0 0 0 0 0 0 0 0 0 0 0

1476 12 unsigned int 0 8198 12 unsigned int 12 unsigned int 0 1 0 0 0 0 0 0 0 0 0 0 0

1477 6 int8_t 0 2105344 6 int8_t 6 int8_t 0 0 1478 0 0 0 0 0 0 0 0 0 0

1478 11 signed char 0 8202 11 signed char 11 signed char 0 5 0 0 0 0 0 0 0 0 0 0 0

1479 7 uint8_t 0 2105344 7 uint8_t 7 uint8_t 0 0 1444 0 0 0 0 0 0 0 0 0 0

1480 7 int16_t 0 2105344 7 int16_t 7 int16_t 0 0 1481 0 0 0 0 0 0 0 0 0 0

1481 9 short int 0 8258 9 short int 9 short int 0 1 0 0 0 0 0 0 0 0 0 0 0

1482 7 int32_t 0 2105344 7 int32_t 7 int32_t 0 0 1337 0 0 0 0 0 0 0 0 0 0

1483 7 int64_t 0 2105344 7 int64_t 7 int64_t 0 0 1353 0 0 0 0 0 0 0 0 0 0

1484 8 uint16_t 0 2105344 8 uint16_t 8 uint16_t 0 0 1485 0 0 0 0 0 0 0 0 0 0

1485 18 unsigned short int 0 8262 18 unsigned short int 18 unsigned short int 0 1 0 0 0 0 0 0 0 0 0 0 0

1486 8 uint32_t 0 2105344 8 uint32_t 8 uint32_t 0 0 1476 0 0 0 0 0 0 0 0 0 0

1487 8 uint64_t 0 2105344 8 uint64_t 8 uint64_t 0 0 1335 0 0 0 0 0 0 0 0 0 0

1488 10 PN_float32 0 2105344 10 PN_float32 10 PN_float32 0 0 1390 0 0 0 0 0 0 0 0 0 0

1489 10 PN_float64 0 2105344 10 PN_float64 10 PN_float64 0 0 1387 0 0 0 0 0 0 0 0 0 0

1490 11 PTA_uchar * 0 8576 11 PTA_uchar * 11 PTA_uchar * 0 0 1329 0 0 0 0 0 0 0 0 0 0

1491 12 CPTA_uchar * 0 8576 12 CPTA_uchar * 12 CPTA_uchar * 0 0 1319 0 0 0 0 0 0 0 0 0 0

1492 19 DatagramGenerator * 0 8576 19 DatagramGenerator * 19 DatagramGenerator * 0 0 1343 0 0 0 0 0 0 0 0 0 0

1493 13 SubfileInfo * 0 8576 13 SubfileInfo * 13 SubfileInfo * 0 0 1370 0 0 0 0 0 0 0 0 0 0

1494 16 Filename const * 0 8576 16 Filename const * 16 Filename const * 0 0 1346 0 0 0 0 0 0 0 0 0 0

1495 25 DatagramGenerator const * 0 8576 25 DatagramGenerator const * 25 DatagramGenerator const * 0 0 1496 0 0 0 0 0 0 0 0 0 0

1496 23 DatagramGenerator const 0 8832 23 DatagramGenerator const 23 DatagramGenerator const 0 0 1343 0 0 0 0 0 0 0 0 0 0

1497 6 time_t 0 2105344 6 time_t 6 time_t 0 0 1498 0 0 0 0 0 0 0 0 0 0

1498 8 long int 0 8210 8 long int 8 long int 0 1 0 0 0 0 0 0 0 0 0 0 0

1499 13 VirtualFile * 0 8576 13 VirtualFile * 13 VirtualFile * 0 0 1371 0 0 0 0 0 0 0 0 0 0

1500 18 DatagramIterator * 0 8576 18 DatagramIterator * 18 DatagramIterator * 0 0 1344 0 0 0 0 0 0 0 0 0 0

1501 24 DatagramIterator const * 0 8576 24 DatagramIterator const * 24 DatagramIterator const * 0 0 1502 0 0 0 0 0 0 0 0 0 0

1502 22 DatagramIterator const 0 8832 22 DatagramIterator const 22 DatagramIterator const 0 0 1344 0 0 0 0 0 0 0 0 0 0

1503 14 DatagramSink * 0 8576 14 DatagramSink * 14 DatagramSink * 0 0 1345 0 0 0 0 0 0 0 0 0 0

1504 19 SubfileInfo const * 0 8576 19 SubfileInfo const * 19 SubfileInfo const * 0 0 1505 0 0 0 0 0 0 0 0 0 0

1505 17 SubfileInfo const 0 8832 17 SubfileInfo const 17 SubfileInfo const 0 0 1370 0 0 0 0 0 0 0 0 0 0

1506 15 FileReference * 0 8576 15 FileReference * 15 FileReference * 0 0 1350 0 0 0 0 0 0 0 0 0 0

1507 21 TypedReferenceCount * 0 8576 21 TypedReferenceCount * 21 TypedReferenceCount * 0 0 1351 0 0 0 0 0 0 0 0 0 0

1508 13 TypedObject * 0 8576 13 TypedObject * 13 TypedObject * 0 0 1342 0 0 0 0 0 0 0 0 0 0

1509 9 Ramfile * 0 8576 9 Ramfile * 9 Ramfile * 0 0 1355 0 0 0 0 0 0 0 0 0 0

1510 15 Ramfile const * 0 8576 15 Ramfile const * 15 Ramfile const * 0 0 1511 0 0 0 0 0 0 0 0 0 0

1511 13 Ramfile const 0 8832 13 Ramfile const 13 Ramfile const 0 0 1355 0 0 0 0 0 0 0 0 0 0

1512 9 HashVal * 0 8576 9 HashVal * 9 HashVal * 0 0 1356 0 0 0 0 0 0 0 0 0 0

1513 15 HashVal const * 0 8576 15 HashVal const * 15 HashVal const * 0 0 1391 0 0 0 0 0 0 0 0 0 0

1514 9 istream * 0 8576 14 std::istream * 14 std::istream * 0 0 1359 0 0 0 0 0 0 0 0 0 0

1515 14 StreamWriter * 0 8576 14 StreamWriter * 14 StreamWriter * 0 0 1516 0 0 0 0 0 0 0 0 0 0

1516 12 StreamWriter 0 2048 12 StreamWriter 12 StreamWriter 0 0 0 0 0 0 0 0 0 0 0 0 300
/**
 * A StreamWriter object is used to write sequential binary data directly to
 * an ostream.  Its interface is very similar to Datagram by design; it's
 * primarily intended as a convenience to eliminate the overhead of writing
 * bytes to a Datagram and then writing the Datagram to a stream.
 */

1517 14 StreamReader * 0 8576 14 StreamReader * 14 StreamReader * 0 0 1518 0 0 0 0 0 0 0 0 0 0

1518 12 StreamReader 0 2048 12 StreamReader 12 StreamReader 0 0 0 0 0 0 0 0 0 0 0 0 158
/**
 * A class to read sequential binary data directly from an istream.  Its
 * interface is similar to DatagramIterator by design; see also StreamWriter.
 */

1519 27 MemoryUsagePointers const * 0 8576 27 MemoryUsagePointers const * 27 MemoryUsagePointers const * 0 0 1520 0 0 0 0 0 0 0 0 0 0

1520 25 MemoryUsagePointers const 0 8832 25 MemoryUsagePointers const 25 MemoryUsagePointers const 0 0 1357 0 0 0 0 0 0 0 0 0 0

1521 12 ISubStream * 0 8576 12 ISubStream * 12 ISubStream * 0 0 1358 0 0 0 0 0 0 0 0 0 0

1522 16 IStreamWrapper * 0 8576 16 IStreamWrapper * 16 IStreamWrapper * 0 0 1523 0 0 0 0 0 0 0 0 0 0

1523 14 IStreamWrapper 0 2048 14 IStreamWrapper 14 IStreamWrapper 0 0 0 0 0 0 0 0 0 0 0 0 168
/**
 * This class provides a locking wrapper around an arbitrary istream pointer.
 * A thread may use this class to perform an atomic seek/read/gcount
 * operation.
 */

1524 12 OSubStream * 0 8576 12 OSubStream * 12 OSubStream * 0 0 1360 0 0 0 0 0 0 0 0 0 0

1525 16 OStreamWrapper * 0 8576 16 OStreamWrapper * 16 OStreamWrapper * 0 0 1526 0 0 0 0 0 0 0 0 0 0

1526 14 OStreamWrapper 0 2048 14 OStreamWrapper 14 OStreamWrapper 0 0 0 0 0 0 0 0 0 0 0 0 159
/**
 * This class provides a locking wrapper around an arbitrary ostream pointer.
 * A thread may use this class to perform an atomic seek/write operation.
 */

1527 11 SubStream * 0 8576 11 SubStream * 11 SubStream * 0 0 1362 0 0 0 0 0 0 0 0 0 0

1528 15 StreamWrapper * 0 8576 15 StreamWrapper * 15 StreamWrapper * 0 0 1529 0 0 0 0 0 0 0 0 0 0

1529 13 StreamWrapper 0 2048 13 StreamWrapper 13 StreamWrapper 0 0 0 0 0 0 0 0 0 0 0 0 97
/**
 * This class provides a locking wrapper around a combination ostream/istream
 * pointer.
 */

1530 11 Multifile * 0 8576 11 Multifile * 11 Multifile * 0 0 1364 0 0 0 0 0 0 0 0 0 0

1531 10 iostream * 0 8576 15 std::iostream * 15 std::iostream * 0 0 1363 0 0 0 0 0 0 0 0 0 0

1532 17 Multifile const * 0 8576 17 Multifile const * 17 Multifile const * 0 0 1533 0 0 0 0 0 0 0 0 0 0

1533 15 Multifile const 0 8832 15 Multifile const 15 Multifile const 0 0 1364 0 0 0 0 0 0 0 0 0 0

1534 15 vector_string * 0 8576 15 vector_string * 15 vector_string * 0 0 1535 0 0 0 0 0 0 0 0 0 0

1535 13 vector_string 0 2105344 13 vector_string 13 vector_string 0 0 1536 0 0 0 0 0 0 0 0 0 0

1536 17 pvector< string > 0 2048 22 pvector< std::string > 22 pvector< std::string > 0 0 0 0 0 0 0 0 0 0 0 0 0

1537 15 Namable const * 0 8576 15 Namable const * 15 Namable const * 0 0 1538 0 0 0 0 0 0 0 0 0 0

1538 13 Namable const 0 8832 13 Namable const 13 Namable const 0 0 1367 0 0 0 0 0 0 0 0 0 0

1539 9 Namable * 0 8576 9 Namable * 9 Namable * 0 0 1367 0 0 0 0 0 0 0 0 0 0

1540 16 OpenSSLWrapper * 0 8576 16 OpenSSLWrapper * 16 OpenSSLWrapper * 0 0 1369 0 0 0 0 0 0 0 0 0 0

1541 12 X509_STORE * 0 8576 12 X509_STORE * 12 X509_STORE * 0 0 1542 0 0 0 0 0 0 0 0 0 0

1542 10 X509_STORE 0 2105344 10 X509_STORE 10 X509_STORE 0 0 1543 0 0 0 0 0 0 0 0 0 0

1543 13 x509_store_st 0 1024 13 x509_store_st 13 x509_store_st 0 0 0 0 0 0 0 0 0 0 0 0 0

1544 10 streamsize 0 2105344 15 std::streamsize 15 std::streamsize 0 0 1353 0 0 0 0 0 0 0 0 0 0

1545 19 VirtualFile const * 0 8576 19 VirtualFile const * 19 VirtualFile const * 0 0 1546 0 0 0 0 0 0 0 0 0 0

1546 17 VirtualFile const 0 8832 17 VirtualFile const 17 VirtualFile const 0 0 1371 0 0 0 0 0 0 0 0 0 0

1547 19 VirtualFileSystem * 0 8576 19 VirtualFileSystem * 19 VirtualFileSystem * 0 0 1382 0 0 0 0 0 0 0 0 0 0

1548 10 Filename * 0 8576 10 Filename * 10 Filename * 0 0 1347 0 0 0 0 0 0 0 0 0 0

1549 17 VirtualFileList * 0 8576 17 VirtualFileList * 17 VirtualFileList * 0 0 1381 0 0 0 0 0 0 0 0 0 0

1550 24 VirtualFileMount const * 0 8576 24 VirtualFileMount const * 24 VirtualFileMount const * 0 0 1551 0 0 0 0 0 0 0 0 0 0

1551 22 VirtualFileMount const 0 8832 22 VirtualFileMount const 22 VirtualFileMount const 0 0 1373 0 0 0 0 0 0 0 0 0 0

1552 27 VirtualFileMountMultifile * 0 8576 27 VirtualFileMountMultifile * 27 VirtualFileMountMultifile * 0 0 1374 0 0 0 0 0 0 0 0 0 0

1553 33 VirtualFileMountMultifile const * 0 8576 33 VirtualFileMountMultifile const * 33 VirtualFileMountMultifile const * 0 0 1554 0 0 0 0 0 0 0 0 0 0

1554 31 VirtualFileMountMultifile const 0 8832 31 VirtualFileMountMultifile const 31 VirtualFileMountMultifile const 0 0 1374 0 0 0 0 0 0 0 0 0 0

1555 25 VirtualFileMountRamdisk * 0 8576 25 VirtualFileMountRamdisk * 25 VirtualFileMountRamdisk * 0 0 1375 0 0 0 0 0 0 0 0 0 0

1556 24 VirtualFileMountSystem * 0 8576 24 VirtualFileMountSystem * 24 VirtualFileMountSystem * 0 0 1376 0 0 0 0 0 0 0 0 0 0

1557 30 VirtualFileMountSystem const * 0 8576 30 VirtualFileMountSystem const * 30 VirtualFileMountSystem const * 0 0 1558 0 0 0 0 0 0 0 0 0 0

1558 28 VirtualFileMountSystem const 0 8832 28 VirtualFileMountSystem const 28 VirtualFileMountSystem const 0 0 1376 0 0 0 0 0 0 0 0 0 0

1559 25 VirtualFileSimple const * 0 8576 25 VirtualFileSimple const * 25 VirtualFileSimple const * 0 0 1560 0 0 0 0 0 0 0 0 0 0

1560 23 VirtualFileSimple const 0 8832 23 VirtualFileSimple const 23 VirtualFileSimple const 0 0 1377 0 0 0 0 0 0 0 0 0 0

1561 18 VirtualFileMount * 0 8576 18 VirtualFileMount * 18 VirtualFileMount * 0 0 1373 0 0 0 0 0 0 0 0 0 0

1562 15 TemporaryFile * 0 8576 15 TemporaryFile * 15 TemporaryFile * 0 0 1378 0 0 0 0 0 0 0 0 0 0

1563 21 TemporaryFile const * 0 8576 21 TemporaryFile const * 21 TemporaryFile const * 0 0 1564 0 0 0 0 0 0 0 0 0 0

1564 19 TemporaryFile const 0 8832 19 TemporaryFile const 19 TemporaryFile const 0 0 1378 0 0 0 0 0 0 0 0 0 0

1565 19 IDecompressStream * 0 8576 19 IDecompressStream * 19 IDecompressStream * 0 0 1379 0 0 0 0 0 0 0 0 0 0

1566 17 OCompressStream * 0 8576 17 OCompressStream * 17 OCompressStream * 0 0 1380 0 0 0 0 0 0 0 0 0 0

1567 23 VirtualFileList const * 0 8576 23 VirtualFileList const * 23 VirtualFileList const * 0 0 1568 0 0 0 0 0 0 0 0 0 0

1568 21 VirtualFileList const 0 8832 21 VirtualFileList const 21 VirtualFileList const 0 0 1381 0 0 0 0 0 0 0 0 0 0

1569 25 VirtualFileSystem const * 0 8576 25 VirtualFileSystem const * 25 VirtualFileSystem const * 0 0 1570 0 0 0 0 0 0 0 0 0 0

1570 23 VirtualFileSystem const 0 8832 23 VirtualFileSystem const 23 VirtualFileSystem const 0 0 1382 0 0 0 0 0 0 0 0 0 0

1571 19 DSearchPath const * 0 8576 19 DSearchPath const * 19 DSearchPath const * 0 0 1572 0 0 0 0 0 0 0 0 0 0

1572 17 DSearchPath const 0 8832 17 DSearchPath const 17 DSearchPath const 0 0 1573 0 0 0 0 0 0 0 0 0 0

1573 11 DSearchPath 0 2048 11 DSearchPath 11 DSearchPath 0 0 0 0 0 0 0 0 0 0 0 0 304
/**
 * This class stores a list of directories that can be searched, in order, to
 * locate a particular file.  It is normally constructed by passing it a
 * traditional searchpath-style string, e.g.  a list of directory names
 * delimited by spaces or colons, but it can also be built up explicitly.
 */

1574 9 Results * 0 8576 22 DSearchPath::Results * 22 DSearchPath::Results * 0 0 1575 0 0 0 0 0 0 0 0 0 0

1575 7 Results 0 264192 20 DSearchPath::Results 20 DSearchPath::Results 1573 0 0 0 0 0 0 0 0 0 0 0 0

1576 31 PointerTo< VirtualFileMount > * 0 8576 31 PointerTo< VirtualFileMount > * 31 PointerTo< VirtualFileMount > * 0 0 1384 0 0 0 0 0 0 0 0 0 0

1577 17 decltype(nullptr) 0 8194 17 decltype(nullptr) 17 decltype(nullptr) 0 9 0 0 0 0 0 0 0 0 0 0 0

1578 37 PointerTo< VirtualFileMount > const * 0 8576 37 PointerTo< VirtualFileMount > const * 37 PointerTo< VirtualFileMount > const * 0 0 1579 0 0 0 0 0 0 0 0 0 0

1579 35 PointerTo< VirtualFileMount > const 0 8832 35 PointerTo< VirtualFileMount > const 35 PointerTo< VirtualFileMount > const 0 0 1384 0 0 0 0 0 0 0 0 0 0

1580 35 PointerToBase< VirtualFileMount > * 0 8576 35 PointerToBase< VirtualFileMount > * 35 PointerToBase< VirtualFileMount > * 0 0 1385 0 0 0 0 0 0 0 0 0 0

1581 41 PointerToBase< VirtualFileMount > const * 0 8576 41 PointerToBase< VirtualFileMount > const * 41 PointerToBase< VirtualFileMount > const * 0 0 1582 0 0 0 0 0 0 0 0 0 0

1582 39 PointerToBase< VirtualFileMount > const 0 8832 39 PointerToBase< VirtualFileMount > const 39 PointerToBase< VirtualFileMount > const 0 0 1385 0 0 0 0 0 0 0 0 0 0

1583 11 TrueClock * 0 8576 11 TrueClock * 11 TrueClock * 0 0 1386 0 0 0 0 0 0 0 0 0 0

1584 17 TrueClock const * 0 8576 17 TrueClock const * 17 TrueClock const * 0 0 1585 0 0 0 0 0 0 0 0 0 0

1585 15 TrueClock const 0 8832 15 TrueClock const 15 TrueClock const 0 0 1386 0 0 0 0 0 0 0 0 0 0

1586 11 Patchfile * 0 8576 11 Patchfile * 11 Patchfile * 0 0 1388 0 0 0 0 0 0 0 0 0 0

1587 17 Patchfile const * 0 8576 17 Patchfile const * 17 Patchfile const * 0 0 1588 0 0 0 0 0 0 0 0 0 0

1588 15 Patchfile const 0 8832 15 Patchfile const 15 Patchfile const 0 0 1388 0 0 0 0 0 0 0 0 0 0

1589 20 ProfileTimer const * 0 8576 20 ProfileTimer const * 20 ProfileTimer const * 0 0 1590 0 0 0 0 0 0 0 0 0 0

1590 18 ProfileTimer const 0 8832 18 ProfileTimer const 18 ProfileTimer const 0 0 1392 0 0 0 0 0 0 0 0 0 0

1591 14 ProfileTimer * 0 8576 14 ProfileTimer * 14 ProfileTimer * 0 0 1392 0 0 0 0 0 0 0 0 0 0

1592 25 WeakPointerToVoid const * 0 8576 25 WeakPointerToVoid const * 25 WeakPointerToVoid const * 0 0 1593 0 0 0 0 0 0 0 0 0 0

1593 23 WeakPointerToVoid const 0 8832 23 WeakPointerToVoid const 23 WeakPointerToVoid const 0 0 1393 0 0 0 0 0 0 0 0 0 0

1594 17 WindowsRegistry * 0 8576 17 WindowsRegistry * 17 WindowsRegistry * 0 0 1394 0 0 0 0 0 0 0 0 0 0

1595 23 WindowsRegistry const * 0 8576 23 WindowsRegistry const * 23 WindowsRegistry const * 0 0 1596 0 0 0 0 0 0 0 0 0 0

1596 21 WindowsRegistry const 0 8832 21 WindowsRegistry const 21 WindowsRegistry const 0 0 1394 0 0 0 0 0 0 0 0 0 0

0
26
1597 8 tracking 0 2 1333 821 0 0 0 0 0 0 0 21 MemoryUsage::tracking 0

1598 8 counting 0 2 1333 822 0 0 0 0 0 0 0 21 MemoryUsage::counting 0

1599 16 current_cpp_size 0 2 1334 823 0 0 0 0 0 0 0 29 MemoryUsage::current_cpp_size 0

1600 14 total_cpp_size 0 2 1334 824 0 0 0 0 0 0 0 27 MemoryUsage::total_cpp_size 0

1601 22 panda_heap_single_size 0 2 1334 825 0 0 0 0 0 0 0 35 MemoryUsage::panda_heap_single_size 0

1602 21 panda_heap_array_size 0 2 1334 826 0 0 0 0 0 0 0 34 MemoryUsage::panda_heap_array_size 0

1603 19 panda_heap_overhead 0 2 1334 827 0 0 0 0 0 0 0 32 MemoryUsage::panda_heap_overhead 0

1604 15 panda_mmap_size 0 2 1334 828 0 0 0 0 0 0 0 28 MemoryUsage::panda_mmap_size 0

1605 13 external_size 0 2 1334 829 0 0 0 0 0 0 0 26 MemoryUsage::external_size 0

1606 10 total_size 0 2 1334 830 0 0 0 0 0 0 0 23 MemoryUsage::total_size 0

1607 9 ref_count 0 2 1337 846 0 0 0 0 0 0 0 25 ReferenceCount::ref_count 31
// The current reference count.

1608 8 filename 0 2 1346 970 0 0 0 0 0 0 0 22 DatagramSink::filename 0

1609 4 file 0 2 1348 971 0 0 0 0 0 0 0 18 DatagramSink::file 0

1610 8 file_pos 0 2 1352 972 0 0 0 0 0 0 0 22 DatagramSink::file_pos 0

1611 12 magic_number 0 2 1365 1117 0 0 0 0 0 0 0 23 Multifile::magic_number 0

1612 4 name 0 6 1368 1124 1121 0 0 0 0 0 0 13 Namable::name 0

1613 6 mounts 0 66 1384 1222 0 0 0 0 1221 0 0 25 VirtualFileSystem::mounts 0

1614 9 long_time 0 2 1387 1261 0 0 0 0 0 0 0 20 TrueClock::long_time 203
// get_long_time() returns the most accurate timer we have over a long
// interval.  It may not be very precise for measuring short intervals, but
// it should not drift substantially over the long haul.

1615 10 short_time 0 2 1387 1262 0 0 0 0 0 0 0 21 TrueClock::short_time 206
// get_short_time() returns the most precise timer we have over a short
// interval.  It may tend to drift over the long haul, but it should have
// lots of digits to measure short intervals very precisely.

1616 14 short_raw_time 0 2 1387 1263 0 0 0 0 0 0 0 25 TrueClock::short_raw_time 144
// get_short_raw_time() is like get_short_time(), but does not apply any
// corrections (e.g.  paranoid-clock) to the result returned by the OS.

1617 11 error_count 0 2 1337 1264 0 0 0 0 0 0 0 22 TrueClock::error_count 0

1618 8 progress 0 2 1389 1274 0 0 0 0 0 0 0 19 Patchfile::progress 0

1619 15 allow_multifile 0 6 1333 1276 1275 0 0 0 0 0 0 26 Patchfile::allow_multifile 0

1620 16 footprint_length 0 6 1337 1278 1277 0 0 0 0 0 0 27 Patchfile::footprint_length 0

1621 11 source_hash 0 10 1391 1281 0 1280 0 0 0 0 0 22 Patchfile::source_hash 0

1622 11 result_hash 0 2 1391 1282 0 0 0 0 0 0 0 22 Patchfile::result_hash 0

5
1623 12 get_pointers 0 1036 1037 33 MemoryUsagePointers::get_pointers 0

1624 18 get_typed_pointers 0 1036 1038 39 MemoryUsagePointers::get_typed_pointers 0

1625 17 get_subfile_names 0 1095 1100 28 Multifile::get_subfile_names 0

1626 9 get_files 0 1207 1208 26 VirtualFileList::get_files 0

1627 10 get_mounts 0 1221 1222 29 VirtualFileSystem::get_mounts 0

